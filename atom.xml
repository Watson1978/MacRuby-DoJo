<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[MacRuby DoJo (道場)]]></title>
  <link href="http://watson1978.github.com/MacRuby-DoJo/atom.xml" rel="self"/>
  <link href="http://watson1978.github.com/MacRuby-DoJo/"/>
  <updated>2012-05-24T05:04:16+09:00</updated>
  <id>http://watson1978.github.com/MacRuby-DoJo/</id>
  <author>
    <name><![CDATA[Watson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using the DTrace]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/04/15/dtrace/"/>
    <updated>2012-04-15T00:00:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/04/15/dtrace</id>
    <content type="html"><![CDATA[<p><a href="http://en.wikipedia.org/wiki/DTrace">DTrace</a> is a dynamic tracing framework, and you may trace application without changing by DTrace. MacRuby provides some probe for DTrace to trace the methods behavior.</p>

<table class="table">
<tr><th>Probe Name</th><th>Calling timing</th><th>arg0</th><th>arg1</th><th>arg2</th><th>arg3</th></tr>
<tr><td>method-entry</td><td>At the start of the method</td><td>Class name</td><td>Method name</td><td>File name</td><td>Line number</td></tr>
<td>method-return</td><td>At the end of the method</td><td>Class name</td><td>Method name</td><td>File name</td><td>Line number</td></tr>
<td>raise</td><td>An exception raises</td><td>Class name</td><td>File name</td><td>Line number</td><td>-</td></tr>
</table>


<p>Using these probes, you may easily trace the count of method calling or trace the execution time.</p>

<p>Here is DTrace script which trace the total execution time of String methods.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='d'><span class='line'><span class="cm">/* time.d */</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span><span class="k">pragma</span> <span class="n">D</span> <span class="n">option</span> <span class="n">quiet</span>
</span><span class='line'>
</span><span class='line'><span class="n">macruby</span><span class="p">$</span><span class="n">target</span><span class="p">:::</span><span class="n">method</span><span class="p">-</span><span class="n">entry</span>
</span><span class='line'><span class="p">/</span> <span class="n">copyinstr</span><span class="p">(</span><span class="n">arg0</span><span class="p">)</span> <span class="p">==</span> <span class="s">&quot;String&quot;</span> <span class="p">/</span>  <span class="cm">/* invokes only String methods */</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">self</span><span class="p">-&gt;</span><span class="n">starttime</span> <span class="p">=</span> <span class="n">walltimestamp</span> <span class="p">/</span> <span class="mi">1000</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">macruby</span><span class="p">$</span><span class="n">target</span><span class="p">:::</span><span class="n">method</span><span class="p">-</span><span class="k">return</span>
</span><span class='line'><span class="p">/</span> <span class="n">copyinstr</span><span class="p">(</span><span class="n">arg0</span><span class="p">)</span> <span class="p">==</span> <span class="s">&quot;String&quot;</span> <span class="p">/</span>  <span class="cm">/* invokes only String methods */</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">@</span><span class="n">invoked_time</span><span class="p">[</span><span class="n">copyinstr</span><span class="p">(</span><span class="n">arg0</span><span class="p">),</span> <span class="n">copyinstr</span><span class="p">(</span><span class="n">arg1</span><span class="p">)]</span> <span class="p">=</span> <span class="n">sum</span><span class="p">((</span><span class="n">walltimestamp</span> <span class="p">/</span> <span class="mi">1000</span><span class="p">)</span> <span class="p">-</span> <span class="n">self</span><span class="p">-&gt;</span><span class="n">starttime</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">END</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;\n&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%-10s  %-15s  %s\n&quot;</span><span class="p">,</span> <span class="s">&quot;CLASS&quot;</span><span class="p">,</span> <span class="s">&quot;METHOD&quot;</span><span class="p">,</span> <span class="s">&quot;TOTAL TIME µsec&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;--------------------------------------------------------------------------------\n&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printa</span><span class="p">(</span><span class="s">&quot;%-10s  %-15s  %@d\n&quot;</span><span class="p">,</span> <span class="err">@</span><span class="n">invoked_time</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Prepare your application to trace the execution time.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># test.rb</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1000</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">str</span> <span class="o">=</span> <span class="s2">&quot;abc</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="o">*</span> <span class="mi">1000</span>
</span><span class='line'>  <span class="n">str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You may retrieve the result as following.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">sudo</span> <span class="n">dtrace</span> <span class="o">-</span><span class="n">qs</span> <span class="n">time</span><span class="o">.</span><span class="n">d</span>  <span class="o">-</span><span class="n">c</span> <span class="s2">&quot;macruby test.rb&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">CLASS</span>       <span class="no">METHOD</span>           <span class="no">TOTAL</span> <span class="no">TIME</span> <span class="err">µ</span><span class="n">sec</span>
</span><span class='line'><span class="o">--------------------------------------------------------------------------------</span>
</span><span class='line'><span class="nb">String</span>      <span class="o">*</span><span class="p">:</span>               <span class="mi">6578</span>
</span><span class='line'><span class="nb">String</span>      <span class="nb">split</span><span class="p">:</span>           <span class="mi">1275979</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DTrace を使ってみよう]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/04/14/dtrace/"/>
    <updated>2012-04-14T21:00:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/04/14/dtrace</id>
    <content type="html"><![CDATA[<p>DTrace を使用することで、システムやアプリケーションに手を加えることなく、それらをトレースすることができます。MacRuby はメソッドの振る舞いをトレースするために、いくつかプローブというものを用意しています。</p>

<table class="table">
<tr><th>プローブ名</th><th>実行タイミング</th><th>arg0</th><th>arg1</th><th>arg2</th><th>arg3</th></tr>
<tr><td>method-entry</td><td>メソッド呼出開始</td><td>クラス名</td><td>メソッド名</td><td>ソースファイル名</td><td>行番号</td></tr>
<td>method-return</td><td>メソッド呼出終了</td><td>クラス名</td><td>メソッド名</td><td>ソースファイル名</td><td>行番号</td></tr>
<td>raise</td><td>例外発生時</td><td>クラス名</td><td>ソースファイル名</td><td>行番号</td><td>-</td></tr>
</table>


<p>これらを使用することで、メソッドが呼び出された回数や実行時間を簡単に計測できます。</p>

<p>以下は String クラスのメソッドの合計実行時間を計測するための DTrace スクリプトです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='d'><span class='line'><span class="err">#</span><span class="p">!/</span><span class="n">usr</span><span class="p">/</span><span class="n">sbin</span><span class="p">/</span><span class="n">dtrace</span> <span class="p">-</span><span class="n">s</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span><span class="k">pragma</span> <span class="n">D</span> <span class="n">option</span> <span class="n">quiet</span>
</span><span class='line'>
</span><span class='line'><span class="n">macruby</span><span class="p">$</span><span class="n">target</span><span class="p">:::</span><span class="n">method</span><span class="p">-</span><span class="n">entry</span>
</span><span class='line'><span class="p">/</span> <span class="n">copyinstr</span><span class="p">(</span><span class="n">arg0</span><span class="p">)</span> <span class="p">==</span> <span class="s">&quot;String&quot;</span> <span class="p">/</span>  <span class="cm">/* invokes only String methods */</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">self</span><span class="p">-&gt;</span><span class="n">starttime</span> <span class="p">=</span> <span class="n">walltimestamp</span> <span class="p">/</span> <span class="mi">1000</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">macruby</span><span class="p">$</span><span class="n">target</span><span class="p">:::</span><span class="n">method</span><span class="p">-</span><span class="k">return</span>
</span><span class='line'><span class="p">/</span> <span class="n">copyinstr</span><span class="p">(</span><span class="n">arg0</span><span class="p">)</span> <span class="p">==</span> <span class="s">&quot;String&quot;</span> <span class="p">/</span>  <span class="cm">/* invokes only String methods */</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">@</span><span class="n">invoked_time</span><span class="p">[</span><span class="n">copyinstr</span><span class="p">(</span><span class="n">arg0</span><span class="p">),</span> <span class="n">copyinstr</span><span class="p">(</span><span class="n">arg1</span><span class="p">)]</span> <span class="p">=</span> <span class="n">sum</span><span class="p">((</span><span class="n">walltimestamp</span> <span class="p">/</span> <span class="mi">1000</span><span class="p">)</span> <span class="p">-</span> <span class="n">self</span><span class="p">-&gt;</span><span class="n">starttime</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">END</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;\n&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%-10s  %-15s  %s\n&quot;</span><span class="p">,</span> <span class="s">&quot;CLASS&quot;</span><span class="p">,</span> <span class="s">&quot;METHOD&quot;</span><span class="p">,</span> <span class="s">&quot;TOTAL TIME µsec&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;--------------------------------------------------------------------------------\n&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">printa</span><span class="p">(</span><span class="s">&quot;%-10s  %-15s  %@d\n&quot;</span><span class="p">,</span> <span class="err">@</span><span class="n">invoked_time</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>実行時間を計測する Ruby のプログラムを用意します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># test.rb</span>
</span><span class='line'><span class="mi">1000</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">str</span> <span class="o">=</span> <span class="s2">&quot;abc</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="o">*</span> <span class="mi">1000</span>
</span><span class='line'>  <span class="n">str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>これらを実行すると以下のような結果となります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">sudo</span> <span class="n">dtrace</span> <span class="o">-</span><span class="n">qs</span> <span class="n">time</span><span class="o">.</span><span class="n">d</span>  <span class="o">-</span><span class="n">c</span> <span class="s2">&quot;macruby test.rb&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">CLASS</span>       <span class="no">METHOD</span>           <span class="no">TOTAL</span> <span class="no">TIME</span> <span class="err">µ</span><span class="n">sec</span>
</span><span class='line'><span class="o">--------------------------------------------------------------------------------</span>
</span><span class='line'><span class="nb">String</span>      <span class="o">*</span><span class="p">:</span>               <span class="mi">6578</span>
</span><span class='line'><span class="nb">String</span>      <span class="nb">split</span><span class="p">:</span>           <span class="mi">1275979</span>
</span></code></pre></td></tr></table></div></figure>


<p>DTrace については、以下のサイトなどが有益です。</p>

<ul>
<li><a href="http://docs.oracle.com/cd/E24845_01/html/E22189/toc.html">DTrace ユーザーガイド</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sandbox Class]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/04/14/sandbox-class/"/>
    <updated>2012-04-14T14:00:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/04/14/sandbox-class</id>
    <content type="html"><![CDATA[<p>MacRuby has the Sandbox class which restricts the access to network, to files, etc. Sandbox class is implemented using the <a href="https://developer.apple.com/library/mac/#documentation/Darwin/Reference/ManPages/man7/sandbox.7.html">sandbox(7)</a> in MacRuby.</p>

<p>You can restrict easily your application to access the network by <code>Sandbox.no_network.apply!</code>. Ruby methods and Cocoa APIs both are restricted by the Sandbox.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="n">framework</span> <span class="s1">&#39;Cocoa&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="nb">require</span> <span class="s1">&#39;socket&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="no">Sandbox</span><span class="o">.</span><span class="n">no_network</span><span class="o">.</span><span class="n">apply!</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="no">Socket</span><span class="o">.</span><span class="n">gethostbyaddr</span><span class="p">(</span><span class="s2">&quot;apple.com&quot;</span><span class="p">)</span>
</span><span class='line'><span class="no">SocketError</span><span class="p">:</span> <span class="n">host</span> <span class="ow">not</span> <span class="n">found</span>
</span><span class='line'>  
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="no">NSHost</span><span class="o">.</span><span class="n">hostWithName</span><span class="p">(</span><span class="s2">&quot;apple.com&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="no">NSHost</span> <span class="mh">0x40121eb80</span><span class="o">&gt;</span> <span class="p">(</span><span class="n">null</span><span class="p">)</span> <span class="p">((</span>
</span><span class='line'><span class="p">)</span> <span class="p">(</span>
</span><span class='line'><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Sandbox is a good companion to the Ruby standard $SAFE functionality, you may use the Sandbox and $SAFE at the same time.</p>

<p>The Sandbox will be able to restrict your application,</p>

<ul>
<li>TCP/IP networking is prohibited.</li>
<li>All sockets-based networking is prohibited.</li>
<li>File system writes are prohibited.</li>
<li>File system writes are restricted to temporary folders.</li>
<li>All operating system services are prohibited.</li>
</ul>


<p>As notes,</p>

<ul>
<li>Restriction is not able to change after applying.</li>
<li>Restricts with respect to each process.</li>
</ul>


<h2>Methods in Sandbox Class</h2>

<h3>Sandbox.no_internet</h3>

<p>Restricts TCP/IP networking in current process.</p>

<ul>
<li>no_internet -> Sandbox

<ul>
<li>[RETURN]

<ul>
<li>Returns a Sandbox instance.</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Sandbox.no_network</h3>

<p>Restricts all sockets-based networking in current process.</p>

<ul>
<li>no_network -> Sandbox

<ul>
<li>[RETURN]

<ul>
<li>Returns a Sandbox instance.</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Sandbox.no_writes</h3>

<p>Restricts to write in current process.</p>

<ul>
<li>no_writes -> Sandbox

<ul>
<li>[RETURN]

<ul>
<li>Returns a Sandbox instance.</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Sandbox.temporary_writes</h3>

<p>Restricts to write outside temporary folders in current process.</p>

<ul>
<li>temporary_writes -> Sandbox

<ul>
<li>[RETURN]

<ul>
<li>Returns a Sandbox instance.</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Sandbox.pure_computation</h3>

<p>Restricts all operating system services in current process.</p>

<ul>
<li>pure_computation -> Sandbox

<ul>
<li>[RETURN]

<ul>
<li>Returns a Sandbox instance.</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Sandbox#apply!</h3>

<p>Applies the restriction.</p>

<ul>
<li>apply!</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Boxed Class]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/04/02/boxed-class/"/>
    <updated>2012-04-02T14:00:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/04/02/boxed-class</id>
    <content type="html"><![CDATA[<p>Boxed class is used to retrieve a structure information that is defined in Cocoa. All structures allow to retrieve an information by Boxed Class.</p>

<h2>Methods in Boxed Class</h2>

<h3>Boxed.type</h3>

<p>Returns a structure type information.</p>

<ul>
<li>type -> String

<ul>
<li>[RETURN]

<ul>
<li>Returns a structure type information.</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="n">framework</span> <span class="s1">&#39;Cocoa&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="no">NSRect</span><span class="o">.</span><span class="n">type</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;{CGRect={CGPoint=dd}{CGSize=dd}}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Boxed.opaque?</h3>

<p>Returns whether structure is opaque.</p>

<ul>
<li>opaque? -> bool

<ul>
<li>[RETURN]

<ul>
<li>Returns a true if structure is opaque. Otherwise, returns a false.</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="n">framework</span> <span class="s1">&#39;Cocoa&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="no">NSRect</span><span class="o">.</span><span class="n">opaque?</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">false</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="no">NSModalSession</span><span class="o">.</span><span class="n">opaque?</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="o">&gt;&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pointer Class]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/04/02/pointer-class/"/>
    <updated>2012-04-02T10:00:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/04/02/pointer-class</id>
    <content type="html"><![CDATA[<p>If you use the Cocoa APIs, you might have to pass a pointer variable into argument of API. Some cases, you might need a variable such as <code>NSError* error;</code>.</p>

<p>To create a pointer instance as <code>NSError* error;</code>, you can write a program as following.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">error</span> <span class="o">=</span> <span class="no">Pointer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;@&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can create other Pointer instance if you pass a pointer type into <code>Pointer.new</code>. You can find the other pointer type in <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html">Type Encodings</a>.</p>

<p>Here is a few detail sample about Pointer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">framework</span> <span class="s1">&#39;Cocoa&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">error</span> <span class="o">=</span> <span class="no">Pointer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;@&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">url</span> <span class="o">=</span> <span class="no">NSURL</span><span class="o">.</span><span class="n">URLWithString</span><span class="p">(</span><span class="s2">&quot;http://your_url&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">string</span> <span class="o">=</span> <span class="no">NSString</span><span class="o">.</span><span class="n">stringWithContentsOfURL</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">encoding</span><span class="p">:</span> <span class="no">NSUTF8StringEncoding</span><span class="p">,</span> <span class="n">error</span><span class="p">:</span> <span class="n">error</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">error</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">error</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">description</span>
</span><span class='line'>  <span class="k">raise</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">string</span>
</span></code></pre></td></tr></table></div></figure>


<p>If an error occurs with <code>NSString.stringWithContentsOfURL</code>, an error is stored into <code>error[0]</code>.</p>

<p>To create a Pointer instance such as <code>char* name[5];</code>, specify a size in the second argument.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">name</span> <span class="o">=</span> <span class="no">Pointer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="nb">name</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;a&#39;</span>
</span><span class='line'><span class="nb">name</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;b&#39;</span>
</span><span class='line'><span class="nb">name</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;c&#39;</span>
</span><span class='line'><span class="nb">name</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;d&#39;</span>
</span><span class='line'><span class="nb">name</span><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;e&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To create a Pointer instance of structure such as <code>NSRect *rect[2];</code>, you may write a program as following.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rect</span> <span class="o">=</span> <span class="no">Pointer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;{CGRect={CGPoint=dd}{CGSize=dd}}&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rect</span> <span class="o">=</span> <span class="no">Pointer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">NSRect</span><span class="o">.</span><span class="n">type</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Alias of Pointer Types</h2>

<p>You may think difficult the pointer types such as <code>'@'</code>. MacRuby has the alias of pointer types.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">error</span> <span class="o">=</span> <span class="no">Pointer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:object</span><span class="p">)</span>  <span class="c1"># alias of &#39;@&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<table class="table">
<tr><th>Meaning</th><th>Pointer Types</th><th>Alias</th>
<tr><td>char</td><td>Pointer.new(&#8216;c&#8217;)</td><td>Pointer.new(:char)</td></tr>
<tr><td>unsigned char</td><td>Pointer.new(&#8216;C&#8217;)</td><td>Pointer.new(:uchar)</td></tr>
<tr><td>short</td><td>Pointer.new(&#8217;s&#8217;)</td><td>Pointer.new(:short)</td></tr>
<tr><td>unsigned short</td><td>Pointer.new(&#8216;S&#8217;)</td><td>Pointer.new(:ushort)</td></tr>
<tr><td>int</td><td>Pointer.new(&#8216;i&#8217;)</td><td>Pointer.new(:int)</td></tr>
<tr><td>unsigned int</td><td>Pointer.new(&#8216;I&#8217;)</td><td>Pointer.new(:uint)</td></tr>
<tr><td>long</td><td>Pointer.new(&#8216;l&#8217;)</td><td>Pointer.new(:long)</td></tr>
<tr><td>unsigned long</td><td>Pointer.new(&#8216;L&#8217;)</td><td>Pointer.new(:ulong)</td></tr>
<tr><td>long long</td><td>Pointer.new(&#8216;q&#8217;)</td><td>Pointer.new(:long_long)</td></tr>
<tr><td>unsigned long long</td><td>Pointer.new(&#8216;Q&#8217;)</td><td>Pointer.new(:ulong_long)</td></tr>
<tr><td>float</td><td>Pointer.new(&#8216;f&#8217;)</td><td>Pointer.new(:float)</td></tr>
<tr><td>double</td><td>Pointer.new(&#8216;d&#8217;)</td><td>Pointer.new(:double)</td></tr>
<tr><td>character string (char *)</td><td>Pointer.new(&#8216;*&#8217;)</td><td>Pointer.new(:string)</td></tr>
<tr><td>pointer</td><td>Pointer.new(&#8216;^&#8217;)</td><td>Pointer.new(:pointer)</td></tr>
<tr><td>object</td><td>Pointer.new(&#8216;@&#8217;)</td><td>Pointer.new(:object)<br>Pointer.new(:id)</td></tr>
<tr><td>class object (Class)</td><td>Pointer.new(&#8216;#&#8217;)</td><td>Pointer.new(:class)</td></tr>
<tr><td>boolean</td><td>Pointer.new(&#8216;B&#8217;)</td><td>Pointer.new(:boolean)<br>Pointer.new(:bool)</td></tr>
<tr><td>method selector (SEL)</td><td>Pointer.new(&#8216;:&#8217;)</td><td>Pointer.new(:selector)<br>Pointer.new(:sel)</td></tr>
</table>


<h2>Methods in Pointer Class</h2>

<h3>Pointer.new</h3>

<p>Returns a new Pointer instance.</p>

<ul>
<li>new(type, size = 1) -> Pointer

<ul>
<li>[PARAM] type:

<ul>
<li>Specifies a pointer type.</li>
</ul>
</li>
<li>[PARAM] size:

<ul>
<li>Specifies a size to allocate an array.</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>Returns a new Pointer instance.</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Pointer.new_with_type</h3>

<p>This method is alias of <code>Pointer.new</code>.</p>

<h3>Pointer.magic_cookie</h3>

<p>Returns a new Pointer instance which cast an immediate value to (void *).</p>

<ul>
<li>magic_cookie(val) -> Pointer

<ul>
<li>[PARAM] val:

<ul>
<li>Passes an immediate value to cast.</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>Returns a new Pointer instance.</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Pointer#type</h3>

<p>Returns a pointer type.</p>

<ul>
<li>type -> String

<ul>
<li>[RETURN]

<ul>
<li>Returns a string as pointer type.</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="n">framework</span> <span class="s1">&#39;Cocoa&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">pointer</span> <span class="o">=</span> <span class="no">Pointer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">NSRect</span><span class="o">.</span><span class="n">type</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">pointer</span><span class="o">.</span><span class="n">type</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;{CGRect={CGPoint=dd}{CGSize=dd}}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Pointer#cast!</h3>

<p>Changes a pointer type.</p>

<ul>
<li>cast!(type) -> self

<ul>
<li>[PARAM] type:

<ul>
<li>Specifies a new point type.</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>Returns a self which pointer type was changed.</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="n">pointer</span> <span class="o">=</span> <span class="no">Pointer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;i&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">pointer</span><span class="o">.</span><span class="n">type</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;i&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">pointer</span><span class="o">.</span><span class="n">cast!</span><span class="p">(</span><span class="s1">&#39;I&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">pointer</span><span class="o">.</span><span class="n">type</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;I&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Pointer#[]</h3>

<p>Get a value at nth position.</p>

<ul>
<li>self[nth]

<ul>
<li>[PARAM] nth:

<ul>
<li>Specifies a position to get a value.</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>Returns a value.</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Pointer#[]=</h3>

<p>Set a value into nth position.</p>

<ul>
<li>self[nth] = val

<ul>
<li>[PARAM] nth:

<ul>
<li>Specifies a position to set a value.</li>
</ul>
</li>
<li>[PARAM] val:

<ul>
<li>Passes a value to set.</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>Returns a <code>val</code>.</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Pointer#value</h3>

<p>Get a value at 0 position.</p>

<ul>
<li>value

<ul>
<li>[RETURN]

<ul>
<li>Returns a value at 0 position.</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">pointer</span> <span class="o">=</span> <span class="no">Pointer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">pointer</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="mi">42</span>
</span><span class='line'>
</span><span class='line'><span class="n">pointer</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>    <span class="c1"># =&gt; 42</span>
</span><span class='line'><span class="n">pointer</span><span class="o">.</span><span class="n">value</span> <span class="c1"># =&gt; 42</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Pointer#assign</h3>

<p>Set a value into 0 position.</p>

<ul>
<li>assign(val)

<ul>
<li>[PARAM] val:

<ul>
<li>Specifies a position to set a value.</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>Returns a <code>val</code>.</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Pointer#+</h3>

<p>Returns a new Pointer instance from the specified offset.</p>

<ul>
<li>self + offset -> Pointer

<ul>
<li>[PARAM] offset:

<ul>
<li>Specifies an offset.</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>Returns a new Pointer instance</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">name</span> <span class="o">=</span> <span class="no">Pointer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="nb">name</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'><span class="nb">name</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="mi">11</span>
</span><span class='line'><span class="nb">name</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="mi">12</span>
</span><span class='line'><span class="nb">name</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="o">=</span> <span class="mi">13</span>
</span><span class='line'><span class="nb">name</span><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="o">=</span> <span class="mi">14</span>
</span><span class='line'>
</span><span class='line'><span class="n">tmp</span> <span class="o">=</span> <span class="nb">name</span> <span class="o">+</span> <span class="mi">3</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">p</span> <span class="n">tmp</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="c1"># =&gt; 13, 14</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Pointer#-</h3>

<p>Returns a new Pointer instance from the specified offset.</p>

<ul>
<li>self - offset -> Pointer

<ul>
<li>[PARAM] offset:

<ul>
<li>Specifies an offset.</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>Returns a new Pointer instance</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Pointer#to_object</h3>

<p>TBD</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Original Methods in MacRuby]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/31/original-methods/"/>
    <updated>2012-03-31T16:00:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/31/original-methods</id>
    <content type="html"><![CDATA[<p>MacRuby has some original methods. They does not exist in CRuby&#8217;s methods and Cocoa APIs. This content describes those methods.</p>

<h2>Original Methods</h2>

<h3>String#transform</h3>

<p>Transforms the string to uppercase/lowercase or another language characters.
This method is implemented with <a href="http://site.icu-project.org/">ICU</a>  <a href="http://userguide.icu-project.org/transforms/general">Transforms</a>.</p>

<ul>
<li>transform(pattern) -> String

<ul>
<li>[PARAM] pattern:

<ul>
<li>Specifies transliteration identifier.</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>Returns the transformed string.</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="s2">&quot;hello&quot;</span><span class="o">.</span><span class="n">transform</span><span class="p">(</span><span class="s2">&quot;Upper&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;HELLO&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="s2">&quot;HELLO&quot;</span><span class="o">.</span><span class="n">transform</span><span class="p">(</span><span class="s2">&quot;Lower&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;hello&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="s2">&quot;hello&quot;</span><span class="o">.</span><span class="n">transform</span><span class="p">(</span><span class="s2">&quot;Hiragana&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;へっろ&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="s2">&quot;hello&quot;</span><span class="o">.</span><span class="n">transform</span><span class="p">(</span><span class="s2">&quot;Greek&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;ἑλλο&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>String#pointer</h3>

<p>Returns a Pointer object converted from String. Returned object corresponds to a variable of <code>unsigned char *</code>.</p>

<p>Cocoa APIs has some methods which accepts the pointer variable.
<code>String#pointer</code> may be used for these methods.</p>

<ul>
<li>pinter -> Pointer

<ul>
<li>[RETURN]

<ul>
<li>Returns a Pointer object converted from String.</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="n">pointer</span> <span class="o">=</span> <span class="s2">&quot;foo&quot;</span><span class="o">.</span><span class="n">pointer</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Pointer:0x4007ac580&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="no">NSData</span><span class="o">.</span><span class="n">dataWithBytes</span><span class="p">(</span><span class="n">pointer</span><span class="p">,</span> <span class="n">length</span><span class="p">:</span> <span class="s2">&quot;foo&quot;</span><span class="o">.</span><span class="n">length</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="mi">666</span><span class="n">f6f</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">data</span><span class="o">.</span><span class="n">to_str</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;foo&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>String#to_data</h3>

<p>Returns an <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/NSData_Class/Reference/Reference.html">NSData</a> object which is converted from String.</p>

<ul>
<li>to_data -> NSData

<ul>
<li>[RETURN]

<ul>
<li>Returns a NSData object.</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="s2">&quot;foo&quot;</span><span class="o">.</span><span class="n">to_data</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="mi">666</span><span class="n">f6f</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="s2">&quot;foo&quot;</span><span class="o">.</span><span class="n">to_data</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="n">__NSCFData</span>
</span></code></pre></td></tr></table></div></figure>


<h3>NSData#to_str</h3>

<p>Returns a String object which is converted from NSData.</p>

<ul>
<li>to_str -> String

<ul>
<li>[RETURN]

<ul>
<li>Returns a String object</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="s2">&quot;foo&quot;</span><span class="o">.</span><span class="n">to_data</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="mi">666</span><span class="n">f6f</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">data</span><span class="o">.</span><span class="n">to_str</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;foo&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Kernel.framework</h3>

<p>Loads a framework.</p>

<ul>
<li>framework -> bool

<ul>
<li>[RETURN]

<ul>
<li>Returns a true if loaded a framework. Otherwise, returns a false.</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="n">framework</span> <span class="s1">&#39;Foundation&#39;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Kernel.load_bridge_support_file</h3>

<p>Loads a Bridge Support file.</p>

<ul>
<li>load_bridge_support_file(filename) -> self</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="n">load_bridge_support_file</span><span class="p">(</span><span class="s2">&quot;Foo.bridgesupport&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="n">main</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Kernel.load_plist</h3>

<p>Returns an object which is converted from string of plist format.</p>

<ul>
<li>load_plist(string) -> Object

<ul>
<li>[PARAM] string:

<ul>
<li>Passes a string of plist format.</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>Returns an object.</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s1">&#39;StopWatch-Info.plist&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">load_plist</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="p">{</span><span class="s2">&quot;CFBundleName&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;${PRODUCT_NAME}&quot;</span><span class="p">,</span> <span class="s2">&quot;CFBundleIdentifier&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Watson.${PRODUCT_NAME:rfc1034identifier}&quot;</span><span class="p">,</span> <span class="s2">&quot;CFBundleInfoDictionaryVersion&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;6.0&quot;</span><span class="p">,</span> <span class="s2">&quot;CFBundleVersion&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;1&quot;</span><span class="p">,</span> <span class="s2">&quot;CFBundleExecutable&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;${EXECUTABLE_NAME}&quot;</span><span class="p">,</span> <span class="s2">&quot;NSPrincipalClass&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;NSApplication&quot;</span><span class="p">,</span> <span class="s2">&quot;CFBundlePackageType&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;APPL&quot;</span><span class="p">,</span> <span class="s2">&quot;CFBundleIconFile&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;MacRuby.icns&quot;</span><span class="p">,</span> <span class="s2">&quot;CFBundleSignature&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;????&quot;</span><span class="p">,</span> <span class="s2">&quot;NSMainNibFile&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;MainMenu&quot;</span><span class="p">,</span> <span class="s2">&quot;LSMinimumSystemVersion&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;${MACOSX_DEPLOYMENT_TARGET}&quot;</span><span class="p">,</span> <span class="s2">&quot;CFBundleDevelopmentRegion&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;en&quot;</span><span class="p">,</span> <span class="s2">&quot;CFBundleShortVersionString&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;1.0&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="s2">&quot;foo&quot;</span><span class="o">.</span><span class="n">to_plist</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">load_plist</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;foo&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Object#to_plist</h3>

<p>Returns a string of plist format which is converted from Object.</p>

<ul>
<li>to_plist -> String

<ul>
<li>[RETURN]

<ul>
<li>Returns a string of plist format.</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="s2">&quot;foo&quot;</span><span class="o">.</span><span class="n">to_plist</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;&lt;?xml version=</span><span class="se">\&quot;</span><span class="s2">1.0</span><span class="se">\&quot;</span><span class="s2"> encoding=</span><span class="se">\&quot;</span><span class="s2">UTF-8</span><span class="se">\&quot;</span><span class="s2">?&gt;</span><span class="se">\n</span><span class="s2">&lt;!DOCTYPE plist PUBLIC </span><span class="se">\&quot;</span><span class="s2">-//Apple//DTD PLIST 1.0//EN</span><span class="se">\&quot;</span><span class="s2"> </span><span class="se">\&quot;</span><span class="s2">http://www.apple.com/DTDs/PropertyList-1.0.dtd</span><span class="se">\&quot;</span><span class="s2">&gt;</span><span class="se">\n</span><span class="s2">&lt;plist version=</span><span class="se">\&quot;</span><span class="s2">1.0</span><span class="se">\&quot;</span><span class="s2">&gt;</span><span class="se">\n</span><span class="s2">&lt;string&gt;foo&lt;/string&gt;</span><span class="se">\n</span><span class="s2">&lt;/plist&gt;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="p">{</span><span class="s2">&quot;foo&quot;</span> <span class="o">=&gt;</span> <span class="mi">42</span><span class="p">}</span><span class="o">.</span><span class="n">to_plist</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;&lt;?xml version=</span><span class="se">\&quot;</span><span class="s2">1.0</span><span class="se">\&quot;</span><span class="s2"> encoding=</span><span class="se">\&quot;</span><span class="s2">UTF-8</span><span class="se">\&quot;</span><span class="s2">?&gt;</span><span class="se">\n</span><span class="s2">&lt;!DOCTYPE plist PUBLIC </span><span class="se">\&quot;</span><span class="s2">-//Apple//DTD PLIST 1.0//EN</span><span class="se">\&quot;</span><span class="s2"> </span><span class="se">\&quot;</span><span class="s2">http://www.apple.com/DTDs/PropertyList-1.0.dtd</span><span class="se">\&quot;</span><span class="s2">&gt;</span><span class="se">\n</span><span class="s2">&lt;plist version=</span><span class="se">\&quot;</span><span class="s2">1.0</span><span class="se">\&quot;</span><span class="s2">&gt;</span><span class="se">\n</span><span class="s2">&lt;dict&gt;</span><span class="se">\n\t</span><span class="s2">&lt;key&gt;foo&lt;/key&gt;</span><span class="se">\n\t</span><span class="s2">&lt;integer&gt;42&lt;/integer&gt;</span><span class="se">\n</span><span class="s2">&lt;/dict&gt;</span><span class="se">\n</span><span class="s2">&lt;/plist&gt;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="o">[</span><span class="s2">&quot;foo&quot;</span><span class="p">,</span> <span class="s2">&quot;bar&quot;</span><span class="o">].</span><span class="n">to_plist</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;&lt;?xml version=</span><span class="se">\&quot;</span><span class="s2">1.0</span><span class="se">\&quot;</span><span class="s2"> encoding=</span><span class="se">\&quot;</span><span class="s2">UTF-8</span><span class="se">\&quot;</span><span class="s2">?&gt;</span><span class="se">\n</span><span class="s2">&lt;!DOCTYPE plist PUBLIC </span><span class="se">\&quot;</span><span class="s2">-//Apple//DTD PLIST 1.0//EN</span><span class="se">\&quot;</span><span class="s2"> </span><span class="se">\&quot;</span><span class="s2">http://www.apple.com/DTDs/PropertyList-1.0.dtd</span><span class="se">\&quot;</span><span class="s2">&gt;</span><span class="se">\n</span><span class="s2">&lt;plist version=</span><span class="se">\&quot;</span><span class="s2">1.0</span><span class="se">\&quot;</span><span class="s2">&gt;</span><span class="se">\n</span><span class="s2">&lt;array&gt;</span><span class="se">\n\t</span><span class="s2">&lt;string&gt;foo&lt;/string&gt;</span><span class="se">\n\t</span><span class="s2">&lt;string&gt;bar&lt;/string&gt;</span><span class="se">\n</span><span class="s2">&lt;/array&gt;</span><span class="se">\n</span><span class="s2">&lt;/plist&gt;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Object#methods</h3>

<p>Returns a methods list. CRuby also has <code>Object#methods</code>, <code>objc_methods</code> argument is added to MacRuby&#8217;s method.</p>

<ul>
<li>methods(include_inherited = true, objc_methods = false) -> [Symbol]

<ul>
<li>[PARAM] include_inherited:

<ul>
<li>If passes a true, looks up a recursively.</li>
</ul>
</li>
<li>[PARAM] objc_methods:

<ul>
<li>If passes a true, returns the Ruby&#8217;s methods and Cocoa APIs.</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>Returns a method list.</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="s2">&quot;foo&quot;</span><span class="o">.</span><span class="n">methods</span><span class="p">(</span><span class="kp">true</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:encode!</span><span class="p">,</span> <span class="ss">:&quot;replaceCharactersInRange:withString:&quot;</span><span class="p">,</span> <span class="ss">:&quot;getCharacters:range:&quot;</span><span class="p">,</span> <span class="ss">:characterAtIndex</span><span class="p">,</span> <span class="ss">:length</span><span class="p">,</span> <span class="ss">:transform</span><span class="p">,</span> <span class="ss">:crypt</span><span class="p">,</span> <span class="ss">:rpartition</span><span class="p">,</span> <span class="ss">:partition</span><span class="p">,</span> <span class="ss">:sum</span><span class="p">,</span> <span class="ss">:tr_s!</span><span class="p">,</span> <span class="ss">:tr_s</span><span class="p">,</span> <span class="ss">:tr!</span><span class="p">,</span> <span class="ss">:tr</span><span class="p">,</span> <span class="ss">:squeeze!</span><span class="p">,</span> <span class="ss">:squeeze</span><span class="p">,</span> <span class="ss">:delete!</span><span class="p">,</span> <span class="ss">:delete</span><span class="p">,</span> <span class="ss">:count</span><span class="p">,</span> <span class="ss">:reverse!</span><span class="p">,</span> <span class="ss">:reverse</span><span class="p">,</span> <span class="ss">:upto</span><span class="p">,</span> <span class="ss">:next!</span><span class="p">,</span> <span class="ss">:next</span><span class="p">,</span> <span class="ss">:succ!</span><span class="p">,</span> <span class="ss">:succ</span><span class="p">,</span> <span class="ss">:each_codepoint</span><span class="p">,</span> <span class="ss">:codepoints</span><span class="p">,</span> <span class="ss">:each_byte</span><span class="p">,</span> <span class="ss">:bytes</span><span class="p">,</span> <span class="ss">:each_char</span><span class="p">,</span> <span class="ss">:chars</span><span class="p">,</span> <span class="ss">:each_line</span><span class="p">,</span> <span class="ss">:lines</span><span class="p">,</span> <span class="ss">:rstrip!</span><span class="p">,</span> <span class="ss">:lstrip!</span><span class="p">,</span> <span class="ss">:strip!</span><span class="p">,</span> <span class="ss">:rstrip</span><span class="p">,</span> <span class="ss">:lstrip</span><span class="p">,</span> <span class="ss">:strip</span><span class="p">,</span> <span class="ss">:center</span><span class="p">,</span> <span class="ss">:rjust</span><span class="p">,</span> <span class="ss">:ljust</span><span class="p">,</span> <span class="ss">:capitalize!</span><span class="p">,</span> <span class="ss">:capitalize</span><span class="p">,</span> <span class="ss">:swapcase!</span><span class="p">,</span> <span class="ss">:swapcase</span><span class="p">,</span> <span class="ss">:upcase!</span><span class="p">,</span> <span class="ss">:upcase</span><span class="p">,</span> <span class="ss">:downcase!</span><span class="p">,</span> <span class="ss">:downcase</span><span class="p">,</span> <span class="ss">:gsub!</span><span class="p">,</span> <span class="ss">:gsub</span><span class="p">,</span> <span class="ss">:sub!</span><span class="p">,</span> <span class="ss">:sub</span><span class="p">,</span> <span class="ss">:chop!</span><span class="p">,</span> <span class="ss">:chop</span><span class="p">,</span> <span class="ss">:chomp!</span><span class="p">,</span> <span class="ss">:chomp</span><span class="p">,</span> <span class="ss">:to_f</span><span class="p">,</span> <span class="ss">:chr</span><span class="p">,</span> <span class="ss">:ord</span><span class="p">,</span> <span class="ss">:oct</span><span class="p">,</span> <span class="ss">:hex</span><span class="p">,</span> <span class="ss">:to_i</span><span class="p">,</span> <span class="ss">:split</span><span class="p">,</span> <span class="ss">:scan</span><span class="p">,</span> <span class="p">:</span><span class="o">=~</span><span class="p">,</span> <span class="ss">:match</span><span class="p">,</span> <span class="ss">:dump</span><span class="p">,</span> <span class="ss">:inspect</span><span class="p">,</span> <span class="ss">:intern</span><span class="p">,</span> <span class="ss">:to_sym</span><span class="p">,</span> <span class="ss">:to_str</span><span class="p">,</span> <span class="ss">:to_s</span><span class="p">,</span> <span class="ss">:end_with?</span><span class="p">,</span> <span class="ss">:start_with?</span><span class="p">,</span> <span class="ss">:include?</span><span class="p">,</span> <span class="ss">:eql?</span><span class="p">,</span> <span class="ss">:casecmp</span><span class="p">,</span> <span class="ss">:&lt;=&gt;</span><span class="p">,</span> <span class="ss">:==</span><span class="p">,</span> <span class="ss">:concat</span><span class="p">,</span> <span class="ss">:&lt;&lt;</span><span class="p">,</span> <span class="ss">:%</span><span class="p">,</span> <span class="ss">:*</span><span class="p">,</span> <span class="ss">:+</span><span class="p">,</span> <span class="ss">:rindex</span><span class="p">,</span> <span class="ss">:index</span><span class="p">,</span> <span class="ss">:insert</span><span class="p">,</span> <span class="ss">:slice!</span><span class="p">,</span> <span class="ss">:slice</span><span class="p">,</span> <span class="ss">:[]=</span><span class="p">,</span> <span class="ss">:[]</span><span class="p">,</span> <span class="ss">:ascii_only?</span><span class="p">,</span> <span class="ss">:valid_encoding?</span><span class="p">,</span> <span class="ss">:force_encoding</span><span class="p">,</span> <span class="ss">:pointer</span><span class="p">,</span> <span class="ss">:to_data</span><span class="p">,</span> <span class="ss">:setbyte</span><span class="p">,</span> <span class="ss">:getbyte</span><span class="p">,</span> <span class="ss">:bytesize</span><span class="p">,</span> <span class="ss">:empty?</span><span class="p">,</span> <span class="ss">:size</span><span class="p">,</span> <span class="ss">:encoding</span><span class="p">,</span> <span class="ss">:clear</span><span class="p">,</span> <span class="ss">:replace</span><span class="p">,</span> <span class="ss">:dup</span><span class="p">,</span> <span class="ss">:&quot;performSelector:withObject:withObject:&quot;</span><span class="p">,</span> <span class="ss">:&quot;performSelector:withObject:&quot;</span><span class="p">,</span> <span class="ss">:performSelector</span><span class="p">,</span> <span class="ss">:conformsToProtocol</span><span class="p">,</span> <span class="ss">:dd_appendSpaces</span><span class="p">,</span> <span class="ss">:&quot;replaceOccurrencesOfString:withString:options:range:&quot;</span><span class="p">,</span> <span class="ss">:initWithCapacity</span><span class="p">,</span>  <span class="o">----</span> <span class="n">snip</span> <span class="o">----</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Range#relative_to</h3>

<p>Returns a new Range instance which has negative values in <code>rng</code> expanded relative to <code>max</code>.</p>

<ul>
<li>relative_to(max) -> Range

<ul>
<li>[PARAM] max:

<ul>
<li>Specifies a max of Range.</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>Returns a new Range instance.</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">relative_to</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">5</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">relative_to</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">3</span><span class="o">.</span><span class="n">.</span><span class="mi">4</span>
</span></code></pre></td></tr></table></div></figure>


<h3>BasicSocket#sendfile</h3>

<p>Sends a file with socket. This method is implemented with <a href="http://developer.apple.com/library/ios/#DOCUMENTATION/System/Conceptual/ManPages_iPhoneOS/man2/sendfile.2.html">sendfile(2)</a>.</p>

<ul>
<li>sendfile(file, offset, length) -> Integer

<ul>
<li>[PARAM] file:

<ul>
<li>Specifies a file path or readable IO object.</li>
</ul>
</li>
<li>[PARAM] offset:

<ul>
<li>Specifies a offset as start position.</li>
</ul>
</li>
<li>[PARAM] length:

<ul>
<li>Specifies a length to send.</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>Returns a sent length.</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;socket&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">port</span> <span class="o">=</span> <span class="mi">5000</span>
</span><span class='line'><span class="n">socket</span> <span class="o">=</span> <span class="no">TCPSocket</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s1">&#39;localhost&#39;</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">path</span> <span class="o">=</span> <span class="s1">&#39;sample.txt&#39;</span>
</span><span class='line'><span class="n">socket</span><span class="o">.</span><span class="n">sendfile</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">128</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Fixnum#popcnt</h3>

<p>Returns the number of 1 bits set in the internal representation of Fixnum.</p>

<ul>
<li>popcnt -> Fixnum</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="mi">13</span><span class="o">.</span><span class="n">to_s</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;1101&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="mi">13</span><span class="o">.</span><span class="n">popcnt</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">3</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="mi">255</span><span class="o">.</span><span class="n">to_s</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;11111111&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="mi">255</span><span class="o">.</span><span class="n">popcnt</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">8</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Original Constants in MacRuby]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/31/original-constants/"/>
    <updated>2012-03-31T16:00:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/31/original-constants</id>
    <content type="html"><![CDATA[<p>This content describes the constants that have been added in MacRuby.</p>

<h2>Original Constants</h2>

<h3>Kernel::RUBY_ARCH</h3>

<p>CPU name of the architecture which MacRuby is ran.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="no">Kernel</span><span class="o">::</span><span class="no">RUBY_ARCH</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;x86_64&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Kernel::MACRUBY_VERSION</h3>

<p>MacRuby version.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="no">Kernel</span><span class="o">::</span><span class="no">MACRUBY_VERSION</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;0.12&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Following method may check whether running your program on MacRuby.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">is_macruby?</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="no">MACRUBY_VERSION</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">true</span>
</span><span class='line'>  <span class="k">rescue</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Kernel::MACRUBY_REVISION</h3>

<p>Git SHA1 Hash which indicates a last commit. (Older MacRuby shows a revision number of SVN)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="no">Kernel</span><span class="o">::</span><span class="no">MACRUBY_REVISION</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;git commit e35df75944e7a13d16f019e2ed1e4ce2406b06af&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Dir::NS_TMPDIR</h3>

<p>Path of temporary directory.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="no">Dir</span><span class="o">::</span><span class="no">NS_TMPDIR</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;/var/folders/1z/ff7x15cj7vb24rl38ty0y52w0000gn/T/&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dispatch::Source クラス]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/31/dispatch-source-class/"/>
    <updated>2012-03-31T10:00:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/31/dispatch-source-class</id>
    <content type="html"><![CDATA[<p>Dispatch::Source クラスは何らかのイベントが発生するときに、イベントをハンドリングして処理を実行する仕組みを提供します。</p>

<h2>Dispatch::Source クラスの定数</h2>

<ul>
<li>Dispatch::Source::DATA_ADD</li>
<li>Dispatch::Source::DATA_OR</li>
<li>Dispatch::Source::PROC</li>
<li>Dispatch::Source::SIGNAL</li>
<li>Dispatch::Source::READ</li>
<li>Dispatch::Source::WRITE</li>
<li>Dispatch::Source::VNODE</li>
<li><br/></li>
<li>Dispatch::Source::PROC_EXIT</li>
<li>Dispatch::Source::PROC_FORK</li>
<li>Dispatch::Source::PROC_EXEC</li>
<li>Dispatch::Source::PROC_SIGNAL</li>
<li><br/></li>
<li>Dispatch::Source::VNODE_DELETE</li>
<li>Dispatch::Source::VNODE_WRITE</li>
<li>Dispatch::Source::VNODE_EXTEND</li>
<li>Dispatch::Source::VNODE_ATTRIB</li>
<li>Dispatch::Source::VNODE_LINK</li>
<li>Dispatch::Source::VNODE_RENAME</li>
<li>Dispatch::Source::VNODE_REVOKE</li>
</ul>


<p>Dispatch Source の種類として、以下のものを使用できます。</p>

<table class="table">
<tr><th>定数名</th><th>GCD API での定義</th><th>内容</th></tr>
<tr>
  <td>Dispatch::Source::DATA_ADD</td>
  <td>DISPATCH_SOURCE_TYPE_DATA_ADD</td>
  <td><code>&lt;&lt;</code> メソッドを通じてイベントが発生し、処理を実行します。</td>
</tr>
<tr>
  <td>Dispatch::Source::DATA_OR</td>
  <td>DISPATCH_SOURCE_TYPE_DATA_OR</td>
  <td><code>&lt;&lt;</code> メソッドを通じてイベントが発生し、処理を実行します。</td>
</tr>
<tr>
  <td>Dispatch::Source::PROC</td>
  <td>DISPATCH_SOURCE_TYPE_PROC</td>
  <td>プロセスに関するイベントを受けると、処理を実行します。</td>
</tr>
<tr>
  <td>Dispatch::Source::SIGNAL</td>
  <td>DISPATCH_SOURCE_TYPE_SIGNAL</td>
  <td>シグナルを受けると、処理を実行します。</td>
</tr>
<tr>
  <td>Dispatch::Source::READ</td>
  <td>DISPATCH_SOURCE_TYPE_READ</td>
  <td>ファイルディスクリプタが読み込み可能になると、処理を実行します。</td>
</tr>
<tr>
  <td>Dispatch::Source::WRITE</td>
  <td>DISPATCH_SOURCE_TYPE_WRITE</td>
  <td>ファイルディスクリプタが書き込み可能になると、処理を実行します。</td>
</tr>
<tr>
  <td>Dispatch::Source::VNODE</td>
  <td>DISPATCH_SOURCE_TYPE_VNODE</td>
  <td>ファイルが削除されたりファイルシステム上で変更があると、処理を実行します。</td>
</tr>
</table>


<p>Dispatch::Source::PROC を使用する際に、以下の定数をマスクとして使用できます。</p>

<table class="table">
<tr>
  <td>Dispatch::Source::PROC_EXIT</td>
  <td>DISPATCH_PROC_EXIT</td>
  <td>プロセスが終了した。</td>
</tr>
<tr>
  <td>Dispatch::Source::PROC_FORK</td>
  <td>DISPATCH_PROC_FORK</td>
  <td>子プロセスを作成した。</td>
</tr>
<tr>
  <td>Dispatch::Source::PROC_EXEC</td>
  <td>DISPATCH_PROC_EXEC</td>
  <td>exec や posix_spawn で別のプロセスを実行した。</td>
</tr>
<tr>
  <td>Dispatch::Source::PROC_SIGNAL</td>
  <td>DISPATCH_PROC_SIGNAL</td>
  <td>シグナルを送信した。</td>
</tr>
</table>


<p>Dispatch::Source::VNODE を使用する際に、以下の定数をマスクとして使用できます。</p>

<table class="table">
<tr>
  <td>Dispatch::Source::VNODE_DELETE</td>
  <td>DISPATCH_VNODE_DELETE</td>
  <td>ファイルなどが削除された。</td>
</tr>
<tr>
  <td>Dispatch::Source::VNODE_WRITE</td>
  <td>DISPATCH_VNODE_WRITE</td>
  <td>ファイルなどのデータが変更された。</td>
</tr>
<tr>
  <td>Dispatch::Source::VNODE_EXTEND</td>
  <td>DISPATCH_VNODE_EXTEND</td>
  <td>ファイルサイズが変更された。</td>
</tr>
<tr>
  <td>Dispatch::Source::VNODE_ATTRIB</td>
  <td>DISPATCH_VNODE_ATTRIB</td>
  <td>ファイルなどのメタ情報が変更された。</td>
</tr>
<tr>
  <td>Dispatch::Source::VNODE_LINK</td>
  <td>DISPATCH_VNODE_LINK</td>
  <td>The file-system object link count changed.</td>
</tr>
<tr>
  <td>Dispatch::Source::VNODE_RENAME</td>
  <td>DISPATCH_VNODE_RENAME</td>
  <td>ファイル名が変更された。</td>
</tr>
<tr>
  <td>Dispatch::Source::VNODE_REVOKE</td>
  <td>DISPATCH_VNODE_REVOKE</td>
  <td>The file-system object was revoked.</td>
</tr>
</table>


<p>Dispatch Source は他のクラスよりもわかりにくいと思います。MacRuby のリポジトリにある <a href="https://github.com/MacRuby/MacRuby/blob/master/spec/macruby/core/gcd/source_spec.rb">source_spec.rb</a> を参考にしたりすると良いでしょう。</p>

<h2>Dispatch::Source クラスのメソッド</h2>

<h3>Dispatch::Source.new</h3>

<p>Dispatch Source を生成し返します。</p>

<ul>
<li>new(type, handle, mask, queue) { &#8230; } -> Source

<ul>
<li>[PARAM] type:

<ul>
<li>Dispatch Source の種類を指定します。</li>
</ul>
</li>
<li>[PARAM] handle:

<ul>
<li>イベントを監視するためのディスクリプタを指定します。type に <code>DATA_ADD</code> と <code>DATA_OR</code> を指定した場合には、<code>handle</code> は <code>0</code> とします。</li>
</ul>
</li>
<li>[PARAM] mask:

<ul>
<li>マスクを指定できる Dispatch Source の種類を type で使用した際に指定します。</li>
</ul>
</li>
<li>[PARAM] queue:

<ul>
<li>イベントが発生したときに、block の処理を追加する Dispatch Queue を指定します。</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>生成した Dispatch Source のインスタンスを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Dispatch::Source.timer</h3>

<p>タイマーイベント用の Dispatch Source を生成し返します。</p>

<ul>
<li>timer(delay, interval, leeway, queue) { &#8230; } -> Source

<ul>
<li>[PARAM] delay:

<ul>
<li>何秒後からタイマーを開始するか指定します。nil の場合には Dispatch::TIME_NOW が指定されたのと同じになります</li>
</ul>
</li>
<li>[PARAM] interval:

<ul>
<li>何秒間隔で繰り返すか指定します。</li>
</ul>
</li>
<li>[PARAM] leeway:

<ul>
<li>何秒までの遅れを許容するか指定します。</li>
</ul>
</li>
<li>[PARAM] queue:

<ul>
<li>イベントが発生したときに、block の処理を追加する Dispatch Queue を指定します。</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>生成した Dispatch Source のインスタンスを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gcdq</span> <span class="o">=</span> <span class="no">Dispatch</span><span class="o">::</span><span class="no">Queue</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;sample&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">timer</span> <span class="o">=</span> <span class="no">Dispatch</span><span class="o">::</span><span class="no">Source</span><span class="o">.</span><span class="n">timer</span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="p">,</span> <span class="n">gcdq</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Wake up!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">sleep</span> <span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Dispatch::Source#cancelled?</h3>

<p>Dispatch Source がキャンセルされているか返します。</p>

<ul>
<li>cancelled? -> bool

<ul>
<li>[RETURN]

<ul>
<li>キャンセルされていれば true、そうでなれば false を返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Dispatch::Source#cancel!</h3>

<p>Dispatch Source をキャンセルします。</p>

<ul>
<li>cancel!</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gcdq</span> <span class="o">=</span> <span class="no">Dispatch</span><span class="o">::</span><span class="no">Queue</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;sample&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">timer</span> <span class="o">=</span> <span class="no">Dispatch</span><span class="o">::</span><span class="no">Source</span><span class="o">.</span><span class="n">timer</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">gcdq</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Wake up!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">sleep</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'><span class="n">timer</span><span class="o">.</span><span class="n">cancel!</span>
</span><span class='line'><span class="nb">p</span> <span class="n">timer</span><span class="o">.</span><span class="n">cancelled?</span> <span class="c1"># =&gt; true</span>
</span><span class='line'>
</span><span class='line'><span class="nb">sleep</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Dispatch::Source#handle</h3>

<p>Dispatch Source の handle を返します。</p>

<ul>
<li>handle

<ul>
<li>[RETURN]

<ul>
<li>Dispatch Source の handle を返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Dispatch::Source#mask</h3>

<p>Dispatch Source の mask を返します。GCD API の <code>dispatch_source_get_mask</code> に相当します。</p>

<ul>
<li>mask

<ul>
<li>[RETURN]

<ul>
<li>Dispatch Source の mask を返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Dispatch::Source#data</h3>

<p>Dispatch Source でまだ処理されていないデータを返します。GCD API の <code>dispatch_source_get_data</code> に相当します。</p>

<ul>
<li>data

<ul>
<li>[RETURN]

<ul>
<li>Dispatch Source でまだ処理されていないデータを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>Dispatch Source の種類によって、以下のようなデータを返します。</p>

<table class="table">
<tr>
  <td>Dispatch::Source::DATA_ADD</td>
  <td><code>&lt;&lt;</code>で送信されたデータ</td>
</tr>
<tr>
  <td>Dispatch::Source::DATA_OR</td>
  <td><code>&lt;&lt;</code>で送信されたデータ</td>
</tr>
<tr>
  <td>Dispatch::Source::PROC</td>
  <td>Dispatch::Source::PROC_EXIT、Dispatch::Source::PROC_FORK、Dispatch::Source::PROC_EXEC、Dispatch::Source::PROC_SIGNAL のいずれか</td>
</tr>
<tr>
  <td>Dispatch::Source::SIGNAL</td>
  <td>シグナルの番号</td>
</tr>
<tr>
  <td>Dispatch::Source::READ</td>
  <td>読み込み可能なバイト数</td>
</tr>
</table>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gcdq</span> <span class="o">=</span> <span class="no">Dispatch</span><span class="o">::</span><span class="no">Queue</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;sample&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">src</span> <span class="o">=</span> <span class="no">Dispatch</span><span class="o">::</span><span class="no">Source</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Dispatch</span><span class="o">::</span><span class="no">Source</span><span class="o">::</span><span class="no">DATA_ADD</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">gcdq</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">s</span><span class="o">.</span><span class="n">data</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">src</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span>
</span><span class='line'><span class="nb">sleep</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Dispatch::Source#&lt;&lt;</h3>

<p>Dispatch::Source::DATA_ADD と Dispatch::Source::DATA_OR を指定した Dispatch Source で使用します。指定したデータを Dispatch Source の block へ送信します。GCD API の <code>dispatch_source_get_data</code> に相当します。</p>

<ul>
<li>&lt;&lt; data</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dispatch::Semaphore クラス]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/31/dispatch-semaphore-class/"/>
    <updated>2012-03-31T10:00:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/31/dispatch-semaphore-class</id>
    <content type="html"><![CDATA[<p>Dispatch::Semaphore クラスは排他制御機能を提供します。たとえば、Concurrent Dispatch Queue を用いて並行処理をしていた際に計算結果を 1 つの配列に格納する場合などに Dispatch Semaphore で排他制御を行います。</p>

<h2>Dispatch::Semaphore クラスのメソッド</h2>

<h3>Dispatch::Semaphore.new</h3>

<p>Dispatch Semaphore を生成し返します。GCD API の <code>dispatch_semaphore_create</code> に相当します。</p>

<ul>
<li>new(count) -> Semaphore

<ul>
<li>[PARAM] count:

<ul>
<li>セマフォのカウンタの初期値を指定します。</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>生成した Dispatch Semaphore のインスタンスを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Dispatch::Semaphore#wait</h3>

<p>Dispatch::Semaphore#signal が呼び出されセマフォのカウンタが 1 以上になるまで待ちます。カウンタが 1 以上になると 1 減算して待ち状態が解除されます。GCD API の <code>dispatch_semaphore_wait</code> に相当します。</p>

<ul>
<li>wait(timeout = nil) -> bool

<ul>
<li>[PARAM] timeout:

<ul>
<li>タイムアウト時間を指定します。省略された場合には Dispatch::TIME_FOREVER が指定されたのと同じになります。</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>Dispatch::Semaphore#signal で wait が解除された場合には true、タイムアウトした場合には false を返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gcdq</span> <span class="o">=</span> <span class="no">Dispatch</span><span class="o">::</span><span class="no">Queue</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;sample&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">sema</span> <span class="o">=</span> <span class="no">Dispatch</span><span class="o">::</span><span class="no">Semaphore</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="n">gcdq</span><span class="o">.</span><span class="n">async</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">sleep</span> <span class="mi">1</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Hello&quot;</span>
</span><span class='line'>  <span class="n">sema</span><span class="o">.</span><span class="n">signal</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">sema</span><span class="o">.</span><span class="n">wait</span> <span class="c1">#=&gt; true</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Dispatch::Semaphore#signal</h3>

<p>Dispatch Semaphore のカウンタを 1 加算します。GCD API の <code>dispatch_semaphore_signal</code> に相当します。</p>

<ul>
<li>signal -> bool

<ul>
<li>[RETURN]

<ul>
<li>セマフォを待っているスレッドがなければ true、それ以外で false を返します。</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dispatch::Queue クラス]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/31/dispatch-queue-class/"/>
    <updated>2012-03-31T10:00:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/31/dispatch-queue-class</id>
    <content type="html"><![CDATA[<p>GCD を用いると簡単にマルチスレッドで処理を行うことができます。私たちは、GCD を使いたい処理を書き、適切な Dispatch Queue へ追加するだけです。あとは、GCD が必要なスレッドを生成して処理してくれます。</p>

<p>Dispatch Queue の種類として、以下の 4 つがあります。</p>

<ul>
<li>Serial Dispatch Queue</li>
<li>Concurrent Dispatch Queue</li>
<li>Main Dispatch Queue (Serial Dispatch Queue)</li>
<li>Global Dispatch Queue (Concurrent Dispatch Queue)</li>
</ul>


<p>Serial Dispatch Queue はタスクを逐次的に実行する際に用い、Concurrent Dispatch Queue は平行して複数の処理を行う際に用います。</p>

<p>Main Dispatch Queue と Global Dispatch Queue はあらかじめ用意されており、<code>new</code> でインスタンスを生成しなくとも使うことができます。Main Dispatch Queue は Serial Dispatch Queue の、Global Dispatch Queue は Concurrent Dispatch Queue の一種となっています。</p>

<h2>Dispatch::Queue クラスのメソッド</h2>

<h3>Dispatch::Queue.new</h3>

<p>逐次処理用に Serial Dispatch Queue を生成します。</p>

<ul>
<li>new(label) -> Queue

<ul>
<li>[PARAM] label:

<ul>
<li>生成する Queue に付与するユニークなラベルを指定します。</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>生成した Dispatch Queue のインスタンスを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Dispatch::Queue.concurrent</h3>

<p>並行処理用に Global Dispatch Queue を返します。Mac OS X 10.7 でビルドされた MacRuby では、優先度を指定すると Concurrent Dispatch Queue を返します。</p>

<ul>
<li>concurrent(priority = :default) -> Queue

<ul>
<li>[PARAM] priority:

<ul>
<li>生成する Queue の優先度を指定します。<code>:high</code>、<code>:low</code>、<code>:default</code> と Mac OS X 10.7 からは  <code>:background</code> も指定できます。</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>Dispatch Queue のインスタンスを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Dispatch::Queue.main</h3>

<p>Main Dispatch Queue を返します。</p>

<ul>
<li>main -> Queue

<ul>
<li>[RETURN]

<ul>
<li>Main Dispatch Queue のインスタンスを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Dispatch::Queue.current</h3>

<p>現在使用している Dispatch Queue を返します。GCD タスクの block 内で呼び出すと、そのタスクを実行している Queue が返ります。block の外側で呼び出すと Main Dispatch Queue が返ります。</p>

<ul>
<li>current -> Queue

<ul>
<li>[RETURN]

<ul>
<li>現在使用している Dispatch Queue のインスタンスを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gcdq</span> <span class="o">=</span> <span class="no">Dispatch</span><span class="o">::</span><span class="no">Queue</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;sample&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">gcdq</span><span class="o">.</span><span class="n">after</span><span class="p">(</span><span class="no">Dispatch</span><span class="o">::</span><span class="no">TIME_NOW</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">q</span> <span class="o">=</span> <span class="no">Dispatch</span><span class="o">::</span><span class="no">Queue</span><span class="o">.</span><span class="n">current</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">q</span><span class="o">.</span><span class="n">label</span> <span class="c1"># =&gt; sample</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">sleep</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="n">q</span> <span class="o">=</span> <span class="no">Dispatch</span><span class="o">::</span><span class="no">Queue</span><span class="o">.</span><span class="n">current</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">q</span><span class="o">.</span><span class="n">label</span> <span class="c1"># =&gt; com.apple.main-thread</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Dispatch::Queue#apply</h3>

<p>指定した回数 block を Dispatch Queue に追加し、それらの処理がすべて完了するまで待ちます。GCD API の <code>dispatch_apply</code> に相当します。</p>

<ul>
<li>apply(iterations) {|index| &#8230; }

<ul>
<li>[PARAM] iterations:

<ul>
<li>Dispatch Queue に block を追加する回数を指定します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gcdq</span> <span class="o">=</span> <span class="no">Dispatch</span><span class="o">::</span><span class="no">Queue</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;sample&#39;</span><span class="p">)</span>
</span><span class='line'><span class="vi">@result</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="n">gcdq</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="vi">@result</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">*</span><span class="n">i</span> <span class="p">}</span>
</span><span class='line'><span class="nb">p</span> <span class="vi">@result</span>  <span class="c1">#=&gt; [0, 1, 4, 9, 16, 25]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Dispatch::Queue#async</h3>

<p>長時間にわたる処理など、非同期的に実行したい block を Dispatch Queue に追加します。group を指定すると GCD API の <code>dispatch_group_async</code> に、それ以外は <code>dispatch_async</code> に相当します。</p>

<ul>
<li>async(group = nil) { &#8230; }

<ul>
<li>[PARAM] group:

<ul>
<li>group を指定することで、Dispatch Queue に追加するタスクが group と関連づけられます。</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gcdq</span> <span class="o">=</span> <span class="no">Dispatch</span><span class="o">::</span><span class="no">Queue</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;sample&#39;</span><span class="p">)</span>
</span><span class='line'><span class="vi">@i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">gcdq</span><span class="o">.</span><span class="n">async</span> <span class="p">{</span> <span class="vi">@i</span> <span class="o">=</span> <span class="mi">42</span> <span class="p">}</span>
</span><span class='line'><span class="k">while</span> <span class="vi">@i</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">do</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="nb">p</span> <span class="vi">@i</span> <span class="c1">#=&gt; 42</span>
</span></code></pre></td></tr></table></div></figure>


<p>group を用いることで、Dispatch Queue に追加したすべてのタスクが完了するのを待ち合わせることができたりします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gcdq</span> <span class="o">=</span> <span class="no">Dispatch</span><span class="o">::</span><span class="no">Queue</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;sample&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">gcdg</span> <span class="o">=</span> <span class="no">Dispatch</span><span class="o">::</span><span class="no">Group</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="vi">@i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">gcdq</span><span class="o">.</span><span class="n">async</span><span class="p">(</span><span class="n">gcdg</span><span class="p">)</span> <span class="p">{</span> <span class="vi">@i</span> <span class="o">=</span> <span class="mi">42</span> <span class="p">}</span>
</span><span class='line'><span class="n">gcdg</span><span class="o">.</span><span class="n">wait</span>
</span><span class='line'><span class="nb">p</span> <span class="vi">@i</span> <span class="c1">#=&gt; 42</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Dispatch::Queue#sync</h3>

<p>同期的に実行したい block を Dispatch Queue に追加します。処理が完了するまで待ちます。GCD API の <code>dispatch_sync</code> に相当します。</p>

<ul>
<li>sync { &#8230; }</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gcdq</span> <span class="o">=</span> <span class="no">Dispatch</span><span class="o">::</span><span class="no">Queue</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;sample&#39;</span><span class="p">)</span>
</span><span class='line'><span class="vi">@i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">gcdq</span><span class="o">.</span><span class="n">sync</span> <span class="p">{</span> <span class="vi">@i</span> <span class="o">=</span> <span class="mi">42</span> <span class="p">}</span>
</span><span class='line'><span class="nb">p</span> <span class="vi">@i</span> <span class="c1">#=&gt; 42</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Dispatch::Queue#after</h3>

<p>指定した時間が経過した後、block を Dispatch Queue に追加します。</p>

<ul>
<li>after(delay) { &#8230; }

<ul>
<li>[PARAM] delay:

<ul>
<li>何秒後に block を Dispatch Queue に追加するか指定します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gcdq</span> <span class="o">=</span> <span class="no">Dispatch</span><span class="o">::</span><span class="no">Queue</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;sample&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">gcdq</span><span class="o">.</span><span class="n">after</span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="p">)</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Hello&quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">sleep</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Dispatch::Queue#label</h3>

<p>Dispatch Queue のラベルを返します。GCD API の <code>dispatch_queue_get_label</code> に相当します。</p>

<ul>
<li>label -> String

<ul>
<li>[RETURN]

<ul>
<li>Dispatch Queue のラベルを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gcdq</span> <span class="o">=</span> <span class="no">Dispatch</span><span class="o">::</span><span class="no">Queue</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;sample&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">gcdq</span><span class="o">.</span><span class="n">label</span> <span class="c1"># =&gt; &#39;sample&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Dispatch::Queue#to_s</h3>

<p>Dispatch::Queue#label の別名です。</p>

<h3>Dispatch::Queue#barrier_async</h3>

<p>TBD</p>

<h3>Dispatch::Queue#barrier_sync</h3>

<p>TBD</p>

<h3>Dispatch::Queue.main.run</h3>

<p>TBD</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dispatch::Group クラス]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/31/dispatch-group-class/"/>
    <updated>2012-03-31T10:00:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/31/dispatch-group-class</id>
    <content type="html"><![CDATA[<p>Dispatch Queue に追加された複数の処理がすべて完了するまで待ちたい場合があるかと思います。そのような場合に Dispatch Group を用います。</p>

<h3>Dispatch::Group.new</h3>

<p>Dispatch Group を生成します。</p>

<ul>
<li>new -> Group

<ul>
<li>[RETURN]

<ul>
<li>生成した Dispatch Group のインスタンスを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Dispatch::Group#notify</h3>

<p>Dispatch Queue のタスクがすべて完了すると実行する block を Dispatch Queue に追加します。GCD API の <code>dispatch_group_notify</code> に相当します。</p>

<ul>
<li>notify(queue) { &#8230; }

<ul>
<li>[PARAM] queue:

<ul>
<li>block を追加する Dispatch Queue を指定します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gcdq</span> <span class="o">=</span> <span class="no">Dispatch</span><span class="o">::</span><span class="no">Queue</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;sample&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">gcdg</span> <span class="o">=</span> <span class="no">Dispatch</span><span class="o">::</span><span class="no">Group</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="vi">@i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">gcdq</span><span class="o">.</span><span class="n">async</span> <span class="p">{</span> <span class="vi">@i</span> <span class="o">=</span> <span class="mi">42</span> <span class="p">}</span>
</span><span class='line'><span class="n">gcdg</span><span class="o">.</span><span class="n">notify</span><span class="p">(</span><span class="n">gcdq</span><span class="p">)</span> <span class="p">{</span> <span class="nb">p</span> <span class="vi">@i</span> <span class="p">}</span> <span class="c1"># =&gt; 42</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Dispatch::Group#on_completion</h3>

<p>Dispatch::Group#notify の別名です。</p>

<h3>Dispatch::Group#wait</h3>

<p>Dispatch Group に所属しているDispatch Queue のタスクがすべて完了するのを待ちます。GCD API の <code>dispatch_group_wait</code> に相当します。</p>

<ul>
<li>wait(timeout = nil) -> bool

<ul>
<li>[PARAM] timeout:

<ul>
<li>タイムアウト時間を指定します。省略された場合には Dispatch::TIME_FOREVER が指定されたのと同じになります。</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>すべてのタスクが完了していれば true、タイムアウトにより完了していないタスクがあれば false を返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gcdq</span> <span class="o">=</span> <span class="no">Dispatch</span><span class="o">::</span><span class="no">Queue</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;sample&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">gcdg</span> <span class="o">=</span> <span class="no">Dispatch</span><span class="o">::</span><span class="no">Group</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">gcdq</span><span class="o">.</span><span class="n">async</span><span class="p">(</span><span class="n">gcdg</span><span class="p">)</span> <span class="p">{</span> <span class="nb">sleep</span> <span class="mi">5</span> <span class="p">}</span>
</span><span class='line'><span class="n">gcdg</span><span class="o">.</span><span class="n">wait</span> <span class="c1"># =&gt; true</span>
</span><span class='line'>
</span><span class='line'><span class="n">gcdq</span><span class="o">.</span><span class="n">async</span><span class="p">(</span><span class="n">gcdg</span><span class="p">)</span> <span class="p">{</span> <span class="nb">sleep</span> <span class="mi">5</span> <span class="p">}</span>
</span><span class='line'><span class="n">gcdg</span><span class="o">.</span><span class="n">wait</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c1"># =&gt; false</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dispatch クラス]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/31/dispatch-class/"/>
    <updated>2012-03-31T10:00:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/31/dispatch-class</id>
    <content type="html"><![CDATA[<p>Mac OS X 10.6 から追加された <a href="https://developer.apple.com/library/mac/#documentation/Performance/Reference/GCD_libdispatch_Ref/Reference/reference.html">Grand Central Dispatch (GCD)</a> を利用するために、MacRuby には Dispatch モジュールと、以下のようにいくつかのクラスがあります。</p>

<ul>
<li>Dispatch クラス</li>
<li><a href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/31/dispatch-queue-class/">Dispatch::Queue クラス</a></li>
<li><a href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/31/dispatch-group-class/">Dispatch::Group クラス</a></li>
<li><a href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/31/dispatch-source-class/">Dispatch::Source クラス</a></li>
<li><a href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/31/dispatch-semaphore-class/">Dispatch::Semaphore クラス</a></li>
</ul>


<p>RubyGems の <a href="https://github.com/gunn/Dispatch">Dispatch</a> ライブラリを用いると、より簡単に GCD を使うこともできます。</p>

<h2>Dispatch クラスの定数</h2>

<h3>Dispatch::TIME_NOW</h3>

<p>「処理をすぐに開始する」と指示するときに使用します。GCD API で <code>DISPATCH_TIME_NOW</code> として定義されている定数と同じ定数です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gcdq</span> <span class="o">=</span> <span class="no">Dispatch</span><span class="o">::</span><span class="no">Queue</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;sample&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">gcdq</span><span class="o">.</span><span class="n">after</span><span class="p">(</span><span class="no">Dispatch</span><span class="o">::</span><span class="no">TIME_NOW</span><span class="p">)</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Hello&quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">sleep</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Dispatch::TIME_FOREVER</h3>

<p>処理が完了するのをタイムアウトなしで待ち続けたりするときに使用します。GCD API で <code>DISPATCH_TIME_FOREVER</code> として定義されている定数と同じ定数です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gcdq</span> <span class="o">=</span> <span class="no">Dispatch</span><span class="o">::</span><span class="no">Queue</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;sample&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">sema</span> <span class="o">=</span> <span class="no">Dispatch</span><span class="o">::</span><span class="no">Semaphore</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="n">gcdq</span><span class="o">.</span><span class="n">async</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Hello, &quot;</span>
</span><span class='line'>  <span class="nb">sleep</span> <span class="mi">1</span>
</span><span class='line'>  <span class="n">sema</span><span class="o">.</span><span class="n">signal</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Waiting...&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">sema</span><span class="o">.</span><span class="n">wait</span><span class="p">(</span><span class="no">Dispatch</span><span class="o">::</span><span class="no">TIME_FOREVER</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;World&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Dispatch クラスのメソッド</h2>

<h3>Dispatch#resume!</h3>

<p>中断されている処理を再開します。GCD API の <code>dispatch_resume</code> に相当します。</p>

<ul>
<li>resume!</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gcdq</span> <span class="o">=</span> <span class="no">Dispatch</span><span class="o">::</span><span class="no">Queue</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;sample&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">gcdq</span><span class="o">.</span><span class="n">after</span><span class="p">(</span><span class="no">Dispatch</span><span class="o">::</span><span class="no">TIME_NOW</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">sleep</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Hello&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">gcdq</span><span class="o">.</span><span class="n">suspend!</span>
</span><span class='line'><span class="n">gcdq</span><span class="o">.</span><span class="n">suspended?</span>  <span class="c1">#=&gt; true</span>
</span><span class='line'><span class="n">gcdq</span><span class="o">.</span><span class="n">resume!</span>
</span><span class='line'>
</span><span class='line'><span class="nb">sleep</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Dispatch#suspend!</h3>

<p>処理を中断します。GCD API の <code>dispatch_suspend</code> に相当します。</p>

<ul>
<li>suspend!</li>
</ul>


<h3>Dispatch#suspended?</h3>

<p>処理が中断されているかを返します。</p>

<ul>
<li>suspended? -> bool

<ul>
<li>[RETURN]

<ul>
<li>処理が中断されていれば true、そうでなければ false を返します。</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sandbox クラス]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/27/sandbox-class/"/>
    <updated>2012-03-27T14:30:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/27/sandbox-class</id>
    <content type="html"><![CDATA[<p>MacRuby には Sandbox というネットワークアクセスなどを制限するためのクラスがあります。<a href="https://developer.apple.com/library/mac/#documentation/Darwin/Reference/ManPages/man7/sandbox.7.html">sandbox(7)</a> を利用して MacRuby に実装されています。</p>

<p>使い方は簡単で、あらかじめ <code>Sandbox.no_network.apply!</code> というように呼び出しておくだけです。Ruby のメソッド、Cocoa のAPI、双方に制限がかかります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="n">framework</span> <span class="s1">&#39;Cocoa&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="nb">require</span> <span class="s1">&#39;socket&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="no">Sandbox</span><span class="o">.</span><span class="n">no_network</span><span class="o">.</span><span class="n">apply!</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="no">Socket</span><span class="o">.</span><span class="n">gethostbyaddr</span><span class="p">(</span><span class="s2">&quot;apple.com&quot;</span><span class="p">)</span>
</span><span class='line'><span class="no">SocketError</span><span class="p">:</span> <span class="n">host</span> <span class="ow">not</span> <span class="n">found</span>
</span><span class='line'>  
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="no">NSHost</span><span class="o">.</span><span class="n">hostWithName</span><span class="p">(</span><span class="s2">&quot;apple.com&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="no">NSHost</span> <span class="mh">0x40121eb80</span><span class="o">&gt;</span> <span class="p">(</span><span class="n">null</span><span class="p">)</span> <span class="p">((</span>
</span><span class='line'><span class="p">)</span> <span class="p">(</span>
</span><span class='line'><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sandbox は Ruby の<a href="http://doc.ruby-lang.org/ja/1.9.2/doc/spec=2fsafelevel.html">セキュリティ機構</a>と併用することもできます。</p>

<p>Sandbox を用いて、スクリプトに以下の制限をかけることができます。</p>

<ul>
<li>TCP/IPネットワーキング機能</li>
<li>ソケットベースな全てのネットワーキング機能</li>
<li>ファイルの書き込み</li>
<li>/var/tmp など、テンポラリディレクトリ内のみファイル書き込み可能</li>
<li>OS のサービス全て</li>
</ul>


<p>注意点として、</p>

<ul>
<li>いったん制限をしてしまうと解除できない (別の制限に変更できない)</li>
<li>Sandboxはプロセス単位で制限がかかる</li>
</ul>


<p>制限をかけたい処理は別のプロセスで行うと良いでしょう。</p>

<h2>Sandbox クラスのメソッド</h2>

<h3>Sandbox.no_internet</h3>

<p>TCP/IPネットワーキング機能を制限します。</p>

<ul>
<li>no_internet -> Sandbox

<ul>
<li>[RETURN]

<ul>
<li>制限内容が設定された、Sandbox のインスタンスを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Sandbox.no_network</h3>

<p>ソケットベースな全てのネットワーキング機能を制限します。</p>

<ul>
<li>no_network -> Sandbox

<ul>
<li>[RETURN]

<ul>
<li>制限内容が設定された、Sandbox のインスタンスを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Sandbox.no_writes</h3>

<p>ファイルの書き込みを制限します。</p>

<ul>
<li>no_writes -> Sandbox

<ul>
<li>[RETURN]

<ul>
<li>制限内容が設定された、Sandbox のインスタンスを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Sandbox.temporary_writes</h3>

<p>/var/tmp など、テンポラリディレクトリ内のみファイル書き込み可能にします。</p>

<ul>
<li>temporary_writes -> Sandbox

<ul>
<li>[RETURN]

<ul>
<li>制限内容が設定された、Sandbox のインスタンスを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Sandbox.pure_computation</h3>

<p>OS のサービス全てを制限します。</p>

<ul>
<li>pure_computation -> Sandbox

<ul>
<li>[RETURN]

<ul>
<li>制限内容が設定された、Sandbox のインスタンスを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Sandbox#apply!</h3>

<p>制限内容を反映します。</p>

<ul>
<li>apply!</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Boxed クラス]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/27/boxed-class/"/>
    <updated>2012-03-27T14:00:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/27/boxed-class</id>
    <content type="html"><![CDATA[<p>Boxed クラスは Cocoa で定義されている構造体の情報を取得するために使用します。すべての構造体で Boxed クラスのメソッドを使用できます。</p>

<h2>Boxed クラスのメソッド</h2>

<h3>Boxed.type</h3>

<p>構造体の型情報を返します。</p>

<ul>
<li>type -> String

<ul>
<li>[RETURN]

<ul>
<li>構造体の型情報を返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="n">framework</span> <span class="s1">&#39;Cocoa&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="no">NSRect</span><span class="o">.</span><span class="n">type</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;{CGRect={CGPoint=dd}{CGSize=dd}}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Boxed.opaque?</h3>

<p>構造体が Opaque 構造体かどうかを返します。Opaque 構造体については、<a href="http://news.mynavi.jp/column/objc/018/">「ダイナミックObjective-C」</a>に書かれていますので参考にしてください。</p>

<ul>
<li>opaque? -> bool

<ul>
<li>[RETURN]

<ul>
<li>Opaque 構造体の場合には true、異なる場合には false を返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="n">framework</span> <span class="s1">&#39;Cocoa&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="no">NSRect</span><span class="o">.</span><span class="n">opaque?</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">false</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="no">NSModalSession</span><span class="o">.</span><span class="n">opaque?</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="o">&gt;&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pointer クラス]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/27/pointer-class/"/>
    <updated>2012-03-27T12:00:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/27/pointer-class</id>
    <content type="html"><![CDATA[<p>Cocoa API を使用していると、引数にポインタ変数を渡さなければいけないときがあります。多くは <code>NSError* error;</code> のような変数が必要になるケースでしょうか。Ruby にはポインタ変数を扱うことができるクラスが存在しないため、MacRuby では Pointer クラスが追加されています。</p>

<p>Pointer クラスを使用して、Objective-C の <code>NSError* error;</code> と等しい変数を用意するには以下のような記述になります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">error</span> <span class="o">=</span> <span class="no">Pointer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;@&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Pointer.new</code> の引数の <code>@</code> は、「オブジェクトのポインタ変数をつくりなさい」と指示しています。<code>@</code> のほかにも種類があり <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html">Type Encodings</a> で確認することができます。</p>

<p>Pointer クラスについて、もう少し詳しい例を下に示します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">framework</span> <span class="s1">&#39;Cocoa&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">error</span> <span class="o">=</span> <span class="no">Pointer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;@&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">url</span> <span class="o">=</span> <span class="no">NSURL</span><span class="o">.</span><span class="n">URLWithString</span><span class="p">(</span><span class="s2">&quot;http://your_url&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">string</span> <span class="o">=</span> <span class="no">NSString</span><span class="o">.</span><span class="n">stringWithContentsOfURL</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">encoding</span><span class="p">:</span> <span class="no">NSUTF8StringEncoding</span><span class="p">,</span> <span class="n">error</span><span class="p">:</span> <span class="n">error</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">error</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">error</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">description</span>
</span><span class='line'>  <span class="k">raise</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">string</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>NSString.stringWithContentsOfURL</code> でエラーが発生すると、<code>error[0]</code> にエラー内容が格納されます。</p>

<p><code>char* name[5];</code> のようなインスタンスを作成するには、以下のように <code>Pointer.new</code> の第 2 引数でサイズを指定します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">name</span> <span class="o">=</span> <span class="no">Pointer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="nb">name</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;a&#39;</span>
</span><span class='line'><span class="nb">name</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;b&#39;</span>
</span><span class='line'><span class="nb">name</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;c&#39;</span>
</span><span class='line'><span class="nb">name</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;d&#39;</span>
</span><span class='line'><span class="nb">name</span><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;e&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>NSRect *rect[2];</code> のような構造体のポインタ変数のインスタンスは、以下のように作成できます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rect</span> <span class="o">=</span> <span class="no">Pointer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;{CGRect={CGPoint=dd}{CGSize=dd}}&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>構造体の内容を正確に把握しなければ、変数を用意することができません。
そこで、<code>NSRect.type</code> と構造体に対して <code>type</code> メソッドを実行すると <code>"{CGRect={CGPoint=dd}{CGSize=dd}}"</code> と構造体の Type を取得することができるようになっています。上の例は以下のように書くことができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rect</span> <span class="o">=</span> <span class="no">Pointer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">NSRect</span><span class="o">.</span><span class="n">type</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ポインタ種類の別名</h2>

<p><code>@</code> ではどのようなポインタとなるのかわかりにくいため、MacRuby では <code>Pointer.new('@')</code> を以下のように書くこともできます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">error</span> <span class="o">=</span> <span class="no">Pointer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:object</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>以下の表のように別名が用意されています。</p>

<table class="table">
<tr><th>内容</th><th>ポインタ</th><th>別名</th>
<tr><td>char</td><td>Pointer.new(&#8216;c&#8217;)</td><td>Pointer.new(:char)</td></tr>
<tr><td>unsigned char</td><td>Pointer.new(&#8216;C&#8217;)</td><td>Pointer.new(:uchar)</td></tr>
<tr><td>short</td><td>Pointer.new(&#8217;s&#8217;)</td><td>Pointer.new(:short)</td></tr>
<tr><td>unsigned short</td><td>Pointer.new(&#8216;S&#8217;)</td><td>Pointer.new(:ushort)</td></tr>
<tr><td>int</td><td>Pointer.new(&#8216;i&#8217;)</td><td>Pointer.new(:int)</td></tr>
<tr><td>unsigned int</td><td>Pointer.new(&#8216;I&#8217;)</td><td>Pointer.new(:uint)</td></tr>
<tr><td>long</td><td>Pointer.new(&#8216;l&#8217;)</td><td>Pointer.new(:long)</td></tr>
<tr><td>unsigned long</td><td>Pointer.new(&#8216;L&#8217;)</td><td>Pointer.new(:ulong)</td></tr>
<tr><td>long long</td><td>Pointer.new(&#8216;q&#8217;)</td><td>Pointer.new(:long_long)</td></tr>
<tr><td>unsigned long long</td><td>Pointer.new(&#8216;Q&#8217;)</td><td>Pointer.new(:ulong_long)</td></tr>
<tr><td>float</td><td>Pointer.new(&#8216;f&#8217;)</td><td>Pointer.new(:float)</td></tr>
<tr><td>double</td><td>Pointer.new(&#8216;d&#8217;)</td><td>Pointer.new(:double)</td></tr>
<tr><td>character string (char *)</td><td>Pointer.new(&#8216;*&#8217;)</td><td>Pointer.new(:string)</td></tr>
<tr><td>pointer</td><td>Pointer.new(&#8216;^&#8217;)</td><td>Pointer.new(:pointer)</td></tr>
<tr><td>object</td><td>Pointer.new(&#8216;@&#8217;)</td><td>Pointer.new(:object)<br>Pointer.new(:id)</td></tr>
<tr><td>class object (Class)</td><td>Pointer.new(&#8216;#&#8217;)</td><td>Pointer.new(:class)</td></tr>
<tr><td>boolean</td><td>Pointer.new(&#8216;B&#8217;)</td><td>Pointer.new(:boolean)<br>Pointer.new(:bool)</td></tr>
<tr><td>method selector (SEL)</td><td>Pointer.new(&#8216;:&#8217;)</td><td>Pointer.new(:selector)<br>Pointer.new(:sel)</td></tr>
</table>


<h2>Pointer クラスのメソッド</h2>

<h3>Pointer.new</h3>

<p>Pointer クラスのインスタンスを作成して返します。</p>

<ul>
<li>new(type, size = 1) -> Pointer

<ul>
<li>[PARAM] type:

<ul>
<li>どのようなポインタ変数を作成するか指定します。</li>
</ul>
</li>
<li>[PARAM] size:

<ul>
<li>ポインタ変数のサイズを指定します。</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>作成した Pointer のインスタンスを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Pointer.new_with_type</h3>

<p>Pointer.new の別名です。</p>

<h3>Pointer.magic_cookie</h3>

<p>即値を (void *) へキャストした Pointer のインスタンスを返します。</p>

<ul>
<li>magic_cookie(val) -> Pointer

<ul>
<li>[PARAM] val:

<ul>
<li>数値を指定します。</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>(void *) に即値をキャストした Pointer のインスタンスを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>OpenGL に関するチケット <a href="http://www.macruby.org/trac/ticket/1112">#1112</a> でこのメソッドが追加されました。</p>

<h3>Pointer#type</h3>

<p>どのような種類のポインタか確認するのに使用します。</p>

<ul>
<li>type -> String

<ul>
<li>[RETURN]

<ul>
<li>ポインタの種類を返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="n">framework</span> <span class="s1">&#39;Cocoa&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">pointer</span> <span class="o">=</span> <span class="no">Pointer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">NSRect</span><span class="o">.</span><span class="n">type</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">pointer</span><span class="o">.</span><span class="n">type</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;{CGRect={CGPoint=dd}{CGSize=dd}}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Pointer#cast!</h3>

<p>ポインタの種類を変更します。</p>

<ul>
<li>cast!(type) -> self

<ul>
<li>[PARAM] type:

<ul>
<li>変更先のポインタの種類を指定します。</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>ポインタの種類を変更したオブジェクトを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="n">pointer</span> <span class="o">=</span> <span class="no">Pointer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;i&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">pointer</span><span class="o">.</span><span class="n">type</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;i&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">pointer</span><span class="o">.</span><span class="n">cast!</span><span class="p">(</span><span class="s1">&#39;I&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">pointer</span><span class="o">.</span><span class="n">type</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;I&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Pointer#[]</h3>

<p>nth 番目の内容を取得します。</p>

<ul>
<li>self[nth]

<ul>
<li>[PARAM] nth:

<ul>
<li>取得する内容の位置を指定します。</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>nth 番目の内容を返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Pointer#[]=</h3>

<p>nth 番目の内容を val で置き換えます。</p>

<ul>
<li>self[nth] = val

<ul>
<li>[PARAM] nth:

<ul>
<li>置き換える内容の位置を指定します。</li>
</ul>
</li>
<li>[PARAM] val:

<ul>
<li>置き換える内容を指定します。</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>val を返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Pointer#value</h3>

<p>0 番目の内容を取得します。</p>

<ul>
<li>value

<ul>
<li>[RETURN]

<ul>
<li>0 番目の内容を取得します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">pointer</span> <span class="o">=</span> <span class="no">Pointer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">pointer</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="mi">42</span>
</span><span class='line'>
</span><span class='line'><span class="n">pointer</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>    <span class="c1"># =&gt; 42</span>
</span><span class='line'><span class="n">pointer</span><span class="o">.</span><span class="n">value</span> <span class="c1"># =&gt; 42</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Pointer#assign</h3>

<p>0 番目の内容を val で置き換えます。</p>

<ul>
<li>assign(val)

<ul>
<li>[PARAM] val:

<ul>
<li>置き換える内容を指定します。</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>val を返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Pointer#+</h3>

<p>指定した offset からの Pointer インスタンスを返します。</p>

<ul>
<li>self + offset -> Pointer

<ul>
<li>[PARAM] offset:

<ul>
<li>取得する内容の位置を指定します。</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>指定した位置からの Pointer インスタンスを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">name</span> <span class="o">=</span> <span class="no">Pointer</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="nb">name</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'><span class="nb">name</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="mi">11</span>
</span><span class='line'><span class="nb">name</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="mi">12</span>
</span><span class='line'><span class="nb">name</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="o">=</span> <span class="mi">13</span>
</span><span class='line'><span class="nb">name</span><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="o">=</span> <span class="mi">14</span>
</span><span class='line'>
</span><span class='line'><span class="n">tmp</span> <span class="o">=</span> <span class="nb">name</span> <span class="o">+</span> <span class="mi">3</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">p</span> <span class="n">tmp</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="c1"># =&gt; 13, 14</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Pointer#-</h3>

<p>Pointer#+ と同じように、指定した offset からの Pointer インスタンスを返します。</p>

<ul>
<li>self - offset -> Pointer

<ul>
<li>[PARAM] offset:

<ul>
<li>取得する内容の位置を指定します。</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>指定した位置からの Pointer インスタンスを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Pointer#to_object</h3>

<p>TBD</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacRuby 独自の定数]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/26/original-constants/"/>
    <updated>2012-03-26T21:00:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/26/original-constants</id>
    <content type="html"><![CDATA[<p>ここでは MacRuby で追加されている定数について説明します。</p>

<h2>独自の定数</h2>

<h3>Kernel::RUBY_ARCH</h3>

<p>動作している MacRuby が対象としている CPU のアーキテクチャ名。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="no">Kernel</span><span class="o">::</span><span class="no">RUBY_ARCH</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;x86_64&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Kernel::MACRUBY_VERSION</h3>

<p>MacRuby のバージョン。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="no">Kernel</span><span class="o">::</span><span class="no">MACRUBY_VERSION</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;0.12&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>たとえば以下のようなメソッドを用意しておくと、実行している環境が MacRuby かそれ以外なのか簡単にチェックすることができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">is_macruby?</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="no">MACRUBY_VERSION</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">true</span>
</span><span class='line'>  <span class="k">rescue</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Kernel::MACRUBY_REVISION</h3>

<p>最後にコミットされたパッチの Git SHA1 ハッシュ値(古い MacRuby では SVN のリビジョン番号)。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="no">Kernel</span><span class="o">::</span><span class="no">MACRUBY_REVISION</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;git commit e35df75944e7a13d16f019e2ed1e4ce2406b06af&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Dir::NS_TMPDIR</h3>

<p>テンポラリディレクトリのパス。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="no">Dir</span><span class="o">::</span><span class="no">NS_TMPDIR</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;/var/folders/1z/ff7x15cj7vb24rl38ty0y52w0000gn/T/&quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacRuby 独自のメソッド]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/26/original-methods/"/>
    <updated>2012-03-26T12:00:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/26/original-methods</id>
    <content type="html"><![CDATA[<p>MacRuby には CRuby や Cocoa API に存在しない、独自のメソッドやクラスが存在します。ここでは、独自メソッドについて説明します。</p>

<h2>独自メソッド</h2>

<h3>String#transform</h3>

<p>文字列を大文字や小文字、または別の言語の文字列に変形することができます。<a href="http://site.icu-project.org/">ICU</a> の <a href="http://userguide.icu-project.org/transforms/general">Transforms</a> という機能を用いて実装されています。</p>

<ul>
<li>transform(pattern) -> String

<ul>
<li>[PARAM] pattern:

<ul>
<li>どのような文字列に変換するかを指定します。</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>変換結果の文字列を返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="s2">&quot;hello&quot;</span><span class="o">.</span><span class="n">transform</span><span class="p">(</span><span class="s2">&quot;Upper&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;HELLO&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="s2">&quot;HELLO&quot;</span><span class="o">.</span><span class="n">transform</span><span class="p">(</span><span class="s2">&quot;Lower&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;hello&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="s2">&quot;hello&quot;</span><span class="o">.</span><span class="n">transform</span><span class="p">(</span><span class="s2">&quot;Hiragana&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;へっろ&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="s2">&quot;hello&quot;</span><span class="o">.</span><span class="n">transform</span><span class="p">(</span><span class="s2">&quot;Greek&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;ἑλλο&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>String#pointer</h3>

<p>文字列から Pointer クラスのオブジェクトを返します。オブジェクトは <code>unsigned char*</code> の変数に対応します。Cocoa API では String オブジェクトではなく、文字列のポインタ変数を受け付けるメソッドがあります。それらのメソッドに渡すためのデータを用意するために使用します。</p>

<ul>
<li>pinter -> Pointer

<ul>
<li>[RETURN]

<ul>
<li>Pointer オブジェクトを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="n">pointer</span> <span class="o">=</span> <span class="s2">&quot;foo&quot;</span><span class="o">.</span><span class="n">pointer</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Pointer:0x4007ac580&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="no">NSData</span><span class="o">.</span><span class="n">dataWithBytes</span><span class="p">(</span><span class="n">pointer</span><span class="p">,</span> <span class="n">length</span><span class="p">:</span> <span class="s2">&quot;foo&quot;</span><span class="o">.</span><span class="n">length</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="mi">666</span><span class="n">f6f</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">data</span><span class="o">.</span><span class="n">to_str</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;foo&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>String#to_data</h3>

<p>文字列から <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/NSData_Class/Reference/Reference.html">NSData</a> クラスのオブジェクトを生成し返します。</p>

<ul>
<li>to_data -> NSData

<ul>
<li>[RETURN]

<ul>
<li>NSData オブジェクトを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="s2">&quot;foo&quot;</span><span class="o">.</span><span class="n">to_data</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="mi">666</span><span class="n">f6f</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="s2">&quot;foo&quot;</span><span class="o">.</span><span class="n">to_data</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="n">__NSCFData</span>
</span></code></pre></td></tr></table></div></figure>


<h3>NSData#to_str</h3>

<p>文字列を伴う NSData オブジェクトから、文字列を返します。</p>

<ul>
<li>to_str -> String

<ul>
<li>[RETURN]

<ul>
<li>文字列を返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="s2">&quot;foo&quot;</span><span class="o">.</span><span class="n">to_data</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">&lt;</span><span class="mi">666</span><span class="n">f6f</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">data</span><span class="o">.</span><span class="n">to_str</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;foo&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Kernel.framework</h3>

<p>フレームワークをロードします。</p>

<ul>
<li>framework -> bool

<ul>
<li>[RETURN]

<ul>
<li>フレームワークのロードに成功すれば true、失敗した場合には false を返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="n">framework</span> <span class="s1">&#39;Foundation&#39;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Kernel.load_bridge_support_file</h3>

<p>Bridge Support ファイルをロードします。</p>

<ul>
<li>load_bridge_support_file(filename) -> self</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="n">load_bridge_support_file</span><span class="p">(</span><span class="s2">&quot;Foo.bridgesupport&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="n">main</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Kernel.load_plist</h3>

<p>plist 形式の文字列を Ruby オブジェクトに変換し返します。</p>

<ul>
<li>load_plist(string) -> Object

<ul>
<li>[PARAM] string:

<ul>
<li>plist データの文字列を渡します。</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>オブジェクトを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s1">&#39;StopWatch-Info.plist&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">load_plist</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="p">{</span><span class="s2">&quot;CFBundleName&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;${PRODUCT_NAME}&quot;</span><span class="p">,</span> <span class="s2">&quot;CFBundleIdentifier&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Watson.${PRODUCT_NAME:rfc1034identifier}&quot;</span><span class="p">,</span> <span class="s2">&quot;CFBundleInfoDictionaryVersion&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;6.0&quot;</span><span class="p">,</span> <span class="s2">&quot;CFBundleVersion&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;1&quot;</span><span class="p">,</span> <span class="s2">&quot;CFBundleExecutable&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;${EXECUTABLE_NAME}&quot;</span><span class="p">,</span> <span class="s2">&quot;NSPrincipalClass&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;NSApplication&quot;</span><span class="p">,</span> <span class="s2">&quot;CFBundlePackageType&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;APPL&quot;</span><span class="p">,</span> <span class="s2">&quot;CFBundleIconFile&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;MacRuby.icns&quot;</span><span class="p">,</span> <span class="s2">&quot;CFBundleSignature&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;????&quot;</span><span class="p">,</span> <span class="s2">&quot;NSMainNibFile&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;MainMenu&quot;</span><span class="p">,</span> <span class="s2">&quot;LSMinimumSystemVersion&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;${MACOSX_DEPLOYMENT_TARGET}&quot;</span><span class="p">,</span> <span class="s2">&quot;CFBundleDevelopmentRegion&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;en&quot;</span><span class="p">,</span> <span class="s2">&quot;CFBundleShortVersionString&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;1.0&quot;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="s2">&quot;foo&quot;</span><span class="o">.</span><span class="n">to_plist</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="n">load_plist</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;foo&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Object#to_plist</h3>

<p>plist 形式に変換したデータを文字列で返します。</p>

<ul>
<li>to_plist -> String

<ul>
<li>[RETURN]

<ul>
<li>文字列を返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="s2">&quot;foo&quot;</span><span class="o">.</span><span class="n">to_plist</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;&lt;?xml version=</span><span class="se">\&quot;</span><span class="s2">1.0</span><span class="se">\&quot;</span><span class="s2"> encoding=</span><span class="se">\&quot;</span><span class="s2">UTF-8</span><span class="se">\&quot;</span><span class="s2">?&gt;</span><span class="se">\n</span><span class="s2">&lt;!DOCTYPE plist PUBLIC </span><span class="se">\&quot;</span><span class="s2">-//Apple//DTD PLIST 1.0//EN</span><span class="se">\&quot;</span><span class="s2"> </span><span class="se">\&quot;</span><span class="s2">http://www.apple.com/DTDs/PropertyList-1.0.dtd</span><span class="se">\&quot;</span><span class="s2">&gt;</span><span class="se">\n</span><span class="s2">&lt;plist version=</span><span class="se">\&quot;</span><span class="s2">1.0</span><span class="se">\&quot;</span><span class="s2">&gt;</span><span class="se">\n</span><span class="s2">&lt;string&gt;foo&lt;/string&gt;</span><span class="se">\n</span><span class="s2">&lt;/plist&gt;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="p">{</span><span class="s2">&quot;foo&quot;</span> <span class="o">=&gt;</span> <span class="mi">42</span><span class="p">}</span><span class="o">.</span><span class="n">to_plist</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;&lt;?xml version=</span><span class="se">\&quot;</span><span class="s2">1.0</span><span class="se">\&quot;</span><span class="s2"> encoding=</span><span class="se">\&quot;</span><span class="s2">UTF-8</span><span class="se">\&quot;</span><span class="s2">?&gt;</span><span class="se">\n</span><span class="s2">&lt;!DOCTYPE plist PUBLIC </span><span class="se">\&quot;</span><span class="s2">-//Apple//DTD PLIST 1.0//EN</span><span class="se">\&quot;</span><span class="s2"> </span><span class="se">\&quot;</span><span class="s2">http://www.apple.com/DTDs/PropertyList-1.0.dtd</span><span class="se">\&quot;</span><span class="s2">&gt;</span><span class="se">\n</span><span class="s2">&lt;plist version=</span><span class="se">\&quot;</span><span class="s2">1.0</span><span class="se">\&quot;</span><span class="s2">&gt;</span><span class="se">\n</span><span class="s2">&lt;dict&gt;</span><span class="se">\n\t</span><span class="s2">&lt;key&gt;foo&lt;/key&gt;</span><span class="se">\n\t</span><span class="s2">&lt;integer&gt;42&lt;/integer&gt;</span><span class="se">\n</span><span class="s2">&lt;/dict&gt;</span><span class="se">\n</span><span class="s2">&lt;/plist&gt;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="o">[</span><span class="s2">&quot;foo&quot;</span><span class="p">,</span> <span class="s2">&quot;bar&quot;</span><span class="o">].</span><span class="n">to_plist</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;&lt;?xml version=</span><span class="se">\&quot;</span><span class="s2">1.0</span><span class="se">\&quot;</span><span class="s2"> encoding=</span><span class="se">\&quot;</span><span class="s2">UTF-8</span><span class="se">\&quot;</span><span class="s2">?&gt;</span><span class="se">\n</span><span class="s2">&lt;!DOCTYPE plist PUBLIC </span><span class="se">\&quot;</span><span class="s2">-//Apple//DTD PLIST 1.0//EN</span><span class="se">\&quot;</span><span class="s2"> </span><span class="se">\&quot;</span><span class="s2">http://www.apple.com/DTDs/PropertyList-1.0.dtd</span><span class="se">\&quot;</span><span class="s2">&gt;</span><span class="se">\n</span><span class="s2">&lt;plist version=</span><span class="se">\&quot;</span><span class="s2">1.0</span><span class="se">\&quot;</span><span class="s2">&gt;</span><span class="se">\n</span><span class="s2">&lt;array&gt;</span><span class="se">\n\t</span><span class="s2">&lt;string&gt;foo&lt;/string&gt;</span><span class="se">\n\t</span><span class="s2">&lt;string&gt;bar&lt;/string&gt;</span><span class="se">\n</span><span class="s2">&lt;/array&gt;</span><span class="se">\n</span><span class="s2">&lt;/plist&gt;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Object#methods</h3>

<p>オブジェクトに対して呼び出せるメソッド名の一覧を返します。CRuby も Object#methods がありますが、MacRuby では <code>objc_methods</code> 引数が追加されています。</p>

<ul>
<li>methods(include_inherited = true, objc_methods = false) -> [Symbol]

<ul>
<li>[PARAM] include_inherited:

<ul>
<li>引数が false の時は Object#singleton_methods(false) と同じになります。</li>
</ul>
</li>
<li>[PARAM] objc_methods:

<ul>
<li>引数が true の時は Ruby のメソッドのほかに Cocoa API の一覧も返します。</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>メソッド名の一覧を返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="s2">&quot;foo&quot;</span><span class="o">.</span><span class="n">methods</span><span class="p">(</span><span class="kp">true</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:encode!</span><span class="p">,</span> <span class="ss">:&quot;replaceCharactersInRange:withString:&quot;</span><span class="p">,</span> <span class="ss">:&quot;getCharacters:range:&quot;</span><span class="p">,</span> <span class="ss">:characterAtIndex</span><span class="p">,</span> <span class="ss">:length</span><span class="p">,</span> <span class="ss">:transform</span><span class="p">,</span> <span class="ss">:crypt</span><span class="p">,</span> <span class="ss">:rpartition</span><span class="p">,</span> <span class="ss">:partition</span><span class="p">,</span> <span class="ss">:sum</span><span class="p">,</span> <span class="ss">:tr_s!</span><span class="p">,</span> <span class="ss">:tr_s</span><span class="p">,</span> <span class="ss">:tr!</span><span class="p">,</span> <span class="ss">:tr</span><span class="p">,</span> <span class="ss">:squeeze!</span><span class="p">,</span> <span class="ss">:squeeze</span><span class="p">,</span> <span class="ss">:delete!</span><span class="p">,</span> <span class="ss">:delete</span><span class="p">,</span> <span class="ss">:count</span><span class="p">,</span> <span class="ss">:reverse!</span><span class="p">,</span> <span class="ss">:reverse</span><span class="p">,</span> <span class="ss">:upto</span><span class="p">,</span> <span class="ss">:next!</span><span class="p">,</span> <span class="ss">:next</span><span class="p">,</span> <span class="ss">:succ!</span><span class="p">,</span> <span class="ss">:succ</span><span class="p">,</span> <span class="ss">:each_codepoint</span><span class="p">,</span> <span class="ss">:codepoints</span><span class="p">,</span> <span class="ss">:each_byte</span><span class="p">,</span> <span class="ss">:bytes</span><span class="p">,</span> <span class="ss">:each_char</span><span class="p">,</span> <span class="ss">:chars</span><span class="p">,</span> <span class="ss">:each_line</span><span class="p">,</span> <span class="ss">:lines</span><span class="p">,</span> <span class="ss">:rstrip!</span><span class="p">,</span> <span class="ss">:lstrip!</span><span class="p">,</span> <span class="ss">:strip!</span><span class="p">,</span> <span class="ss">:rstrip</span><span class="p">,</span> <span class="ss">:lstrip</span><span class="p">,</span> <span class="ss">:strip</span><span class="p">,</span> <span class="ss">:center</span><span class="p">,</span> <span class="ss">:rjust</span><span class="p">,</span> <span class="ss">:ljust</span><span class="p">,</span> <span class="ss">:capitalize!</span><span class="p">,</span> <span class="ss">:capitalize</span><span class="p">,</span> <span class="ss">:swapcase!</span><span class="p">,</span> <span class="ss">:swapcase</span><span class="p">,</span> <span class="ss">:upcase!</span><span class="p">,</span> <span class="ss">:upcase</span><span class="p">,</span> <span class="ss">:downcase!</span><span class="p">,</span> <span class="ss">:downcase</span><span class="p">,</span> <span class="ss">:gsub!</span><span class="p">,</span> <span class="ss">:gsub</span><span class="p">,</span> <span class="ss">:sub!</span><span class="p">,</span> <span class="ss">:sub</span><span class="p">,</span> <span class="ss">:chop!</span><span class="p">,</span> <span class="ss">:chop</span><span class="p">,</span> <span class="ss">:chomp!</span><span class="p">,</span> <span class="ss">:chomp</span><span class="p">,</span> <span class="ss">:to_f</span><span class="p">,</span> <span class="ss">:chr</span><span class="p">,</span> <span class="ss">:ord</span><span class="p">,</span> <span class="ss">:oct</span><span class="p">,</span> <span class="ss">:hex</span><span class="p">,</span> <span class="ss">:to_i</span><span class="p">,</span> <span class="ss">:split</span><span class="p">,</span> <span class="ss">:scan</span><span class="p">,</span> <span class="p">:</span><span class="o">=~</span><span class="p">,</span> <span class="ss">:match</span><span class="p">,</span> <span class="ss">:dump</span><span class="p">,</span> <span class="ss">:inspect</span><span class="p">,</span> <span class="ss">:intern</span><span class="p">,</span> <span class="ss">:to_sym</span><span class="p">,</span> <span class="ss">:to_str</span><span class="p">,</span> <span class="ss">:to_s</span><span class="p">,</span> <span class="ss">:end_with?</span><span class="p">,</span> <span class="ss">:start_with?</span><span class="p">,</span> <span class="ss">:include?</span><span class="p">,</span> <span class="ss">:eql?</span><span class="p">,</span> <span class="ss">:casecmp</span><span class="p">,</span> <span class="ss">:&lt;=&gt;</span><span class="p">,</span> <span class="ss">:==</span><span class="p">,</span> <span class="ss">:concat</span><span class="p">,</span> <span class="ss">:&lt;&lt;</span><span class="p">,</span> <span class="ss">:%</span><span class="p">,</span> <span class="ss">:*</span><span class="p">,</span> <span class="ss">:+</span><span class="p">,</span> <span class="ss">:rindex</span><span class="p">,</span> <span class="ss">:index</span><span class="p">,</span> <span class="ss">:insert</span><span class="p">,</span> <span class="ss">:slice!</span><span class="p">,</span> <span class="ss">:slice</span><span class="p">,</span> <span class="ss">:[]=</span><span class="p">,</span> <span class="ss">:[]</span><span class="p">,</span> <span class="ss">:ascii_only?</span><span class="p">,</span> <span class="ss">:valid_encoding?</span><span class="p">,</span> <span class="ss">:force_encoding</span><span class="p">,</span> <span class="ss">:pointer</span><span class="p">,</span> <span class="ss">:to_data</span><span class="p">,</span> <span class="ss">:setbyte</span><span class="p">,</span> <span class="ss">:getbyte</span><span class="p">,</span> <span class="ss">:bytesize</span><span class="p">,</span> <span class="ss">:empty?</span><span class="p">,</span> <span class="ss">:size</span><span class="p">,</span> <span class="ss">:encoding</span><span class="p">,</span> <span class="ss">:clear</span><span class="p">,</span> <span class="ss">:replace</span><span class="p">,</span> <span class="ss">:dup</span><span class="p">,</span> <span class="ss">:&quot;performSelector:withObject:withObject:&quot;</span><span class="p">,</span> <span class="ss">:&quot;performSelector:withObject:&quot;</span><span class="p">,</span> <span class="ss">:performSelector</span><span class="p">,</span> <span class="ss">:conformsToProtocol</span><span class="p">,</span> <span class="ss">:dd_appendSpaces</span><span class="p">,</span> <span class="ss">:&quot;replaceOccurrencesOfString:withString:options:range:&quot;</span><span class="p">,</span> <span class="ss">:initWithCapacity</span><span class="p">,</span> <span class="err">以下略</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Range#relative_to</h3>

<p><code>max</code> で指定した Range 範囲のオブジェクトを返します。負の範囲に対して実行した場合には、<code>max</code> との相対的な範囲となります。</p>

<ul>
<li>relative_to(max) -> Range

<ul>
<li>[PARAM] max:

<ul>
<li>Range の範囲の最大値を指定します。</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>新しい Range オブジェクトを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">relative_to</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">5</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">relative_to</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">3</span><span class="o">.</span><span class="n">.</span><span class="mi">4</span>
</span></code></pre></td></tr></table></div></figure>


<h3>BasicSocket#sendfile</h3>

<p>ソケットを介してファイルのデータを <a href="http://developer.apple.com/library/ios/#DOCUMENTATION/System/Conceptual/ManPages_iPhoneOS/man2/sendfile.2.html">sendfile(2)</a> を用いて送信します。</p>

<ul>
<li>sendfile(file, offset, length) -> Integer

<ul>
<li>[PARAM] file:

<ul>
<li>送信するファイルのパス、または IO オブジェクトを渡します。</li>
</ul>
</li>
<li>[PARAM] offset:

<ul>
<li>送信を開始するデータの位置を指定します。</li>
</ul>
</li>
<li>[PARAM] length:

<ul>
<li>送信するデータサイズを指定します。</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>送信したデータサイズを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;socket&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">port</span> <span class="o">=</span> <span class="mi">5000</span>
</span><span class='line'><span class="n">socket</span> <span class="o">=</span> <span class="no">TCPSocket</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s1">&#39;localhost&#39;</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">path</span> <span class="o">=</span> <span class="s1">&#39;sample.txt&#39;</span>
</span><span class='line'><span class="n">socket</span><span class="o">.</span><span class="n">sendfile</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">128</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Fixnum#popcnt</h3>

<p>数値を 2 進数表記した際に、1 となるビットの数を返します。</p>

<ul>
<li>popcnt -> Fixnum</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;&gt;</span> <span class="mi">13</span><span class="o">.</span><span class="n">to_s</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;1101&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="mi">13</span><span class="o">.</span><span class="n">popcnt</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">3</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="mi">255</span><span class="o">.</span><span class="n">to_s</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;11111111&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;</span> <span class="mi">255</span><span class="o">.</span><span class="n">popcnt</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">8</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Changes an Application's Icon]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/24/intro-icon/"/>
    <updated>2012-03-24T10:00:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/24/intro-icon</id>
    <content type="html"><![CDATA[<p>All applications which you created have a system default icon.</p>

<p><img src="http://watson1978.github.com/MacRuby-DoJo/images/en/intro-icon/default_icon.png" alt="image" /></p>

<p>You can change the icon of the application to suit your needs.</p>

<h2>Icon Composer</h2>

<p>Prepare the image for the icon to set for your application. Convert an image to icon with Icon Composer. Icon Composer is installed along with Xcode.</p>

<p>Since Xcode 4.3, launch Icon Composer with [Xcode]->[Open Developer Tool] in Xcode&#8217;s menu.</p>

<p><img src="http://watson1978.github.com/MacRuby-DoJo/images/en/intro-icon/icon_composer_xcode43.png" alt="image" /></p>

<p>Previous Xcode 4.2, Icon Composer exists in <em>/Developer/Applications/Utilities/Icon Composer.app</em></p>

<p><img src="http://watson1978.github.com/MacRuby-DoJo/images/en/intro-icon/icon_composer_xcode42.png" alt="image" /></p>

<p>Some frames are shown in main screen of Icon Composer. Drag and drop prepared the image into there. After that, save it as icon.</p>

<p><img src="http://watson1978.github.com/MacRuby-DoJo/images/en/intro-icon/icns.png" alt="image" /></p>

<h2>Change an Application&#8217;s Icon</h2>

<p>Change an Application&#8217;s Icon with Xcode. Choose a [TARGETS] like the following figure. After that, drag and drop an icon which created with Icon Composer into [App Icon].</p>

<p><img src="http://watson1978.github.com/MacRuby-DoJo/images/en/intro-icon/change_icon.png" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyGems を利用して Markdown ファイルを表示しよう]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/22/markdown-viewer/"/>
    <updated>2012-03-22T16:30:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/22/markdown-viewer</id>
    <content type="html"><![CDATA[<p>MacRuby は WebKit など Objective-C で作られたフレームワークはもちろん、RubyGems ライブラリを用いてアプリケーションを作ることができます。今回は、Markdown ファイルを HTML へ変換する RubyGems ライブラリを利用し、WebKit で変換された HTML を表示するアプリケーションを作成します。</p>

<h2>RubyGems ライブラリをインストールする</h2>

<p>Markdown ファイルを HTML へ変換するために、<a href="http://rubygems.org/gems/rdiscount">rdiscount</a> という RubyGems を用います。Markdown ファイルを変換するためのライブラリはほかにも <a href="http://deveiate.org/projects/BlueCloth">BlueCloth</a> などいくつかありますので、いろいろ試してみるとおもしろいかもしれません。</p>

<p>それでは、rdiscount をインストールしてみましょう。Terminal 上で以下のようにコマンドを実行します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo macgem install rdiscount</span></code></pre></td></tr></table></div></figure>


<p>rdiscount を用いて以下のように、<code>RDiscount.new</code> へ Markdown ファイルの内容を渡し <code>to_html</code> というメソッドで HTML へ変換できます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ macirb
</span><span class='line'>irb(main):001:0&gt; require 'rubygems'
</span><span class='line'>=&gt; true
</span><span class='line'>irb(main):002:0&gt; require 'rdiscount'
</span><span class='line'>=&gt; true
</span><span class='line'>irb(main):003:0&gt; path = "MarkDownSyntax.md"
</span><span class='line'>=&gt; "MarkDownSyntax.md"
</span><span class='line'>irb(main):004:0&gt; md = RDiscount.new(File.read(path))
</span><span class='line'>=&gt; #&lt;RDiscount:0x4008cace0 以下略
</span><span class='line'>irb(main):005:0&gt; md.to_html
</span><span class='line'>=&gt; "&lt;h1&gt;Markdown: Syntax&lt;/h1&gt;\n\n&lt;ul 以下略</span></code></pre></td></tr></table></div></figure>




<div class="note">
CRuby 1.9 では <code>require 'rubygems'</code> が不要なのですが、MacRuby で RubyGems を利用する際には必須となります。「MacRuby の起動にさらに時間がかかるので、rubygems をロードしていない」というのが理由です。(参考: <a href="http://www.macruby.org/trac/ticket/855">MacRuby should load the &#8220;rubygems&#8221; automatically.</a>)
</div>


<h2>Web Viewの準備</h2>

<p><a href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/15/webkit/">WebKit フレームワークを使ってみよう</a>の記事を参考に、Web View をアウトレット接続するところまでを行います。</p>

<p><img src="http://watson1978.github.com/MacRuby-DoJo/images/ja/webkit/connect_outlet.png" alt="image" /></p>

<h2>Markdown ファイルを読む</h2>

<p>アプリケーションメニューの [File]->[Open&#8230;] がクリックされると、ファイルを選択するためのオープンパネルを表示しファイルを読み込むようにします。</p>

<p><img src="http://watson1978.github.com/MacRuby-DoJo/images/ja/markdown-viewer/file_open.png" alt="image" /></p>

<p>[File]->[Open&#8230;] はボタンと同じように、アクションメソッドが必要となります。以下のようなメソッドを用意しておきます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">open</span><span class="p">(</span><span class="n">sender</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># [File]-&gt;[Open...] のアクション</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>[Main Menu] の中にある [File]->[Open&#8230;] から、control キーを押しながら App Delegate までドラッグして、さきほど用意した <code>open</code> とアクションを接続します。</p>

<p><img src="http://watson1978.github.com/MacRuby-DoJo/images/ja/markdown-viewer/connect_action.png" alt="image" /></p>

<p>これで、[File]->[Open&#8230;] がクリックされると <code>open</code> が呼び出されます。引き続き、以下のようなオープンパネルを表示するための処理を <code>open</code> へ実装します。</p>

<p><img src="http://watson1978.github.com/MacRuby-DoJo/images/ja/markdown-viewer/open_panel.png" alt="image" /></p>

<p>オープンパネルの表示には <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/ApplicationKit/Classes/NSOpenPanel_Class/Reference/Reference.html">NSOpenPanel</a> を利用し、以下のように実装します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">open</span><span class="p">(</span><span class="n">sender</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># オープンパネルのインスタンスを取得</span>
</span><span class='line'>    <span class="n">panel</span> <span class="o">=</span> <span class="no">NSOpenPanel</span><span class="o">.</span><span class="n">openPanel</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># パネルを表示</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">panel</span><span class="o">.</span><span class="n">runModalForDirectory</span><span class="p">(</span><span class="no">NSHomeDirectory</span><span class="p">(),</span>                <span class="c1"># パネルを表示するときのディレクトリ</span>
</span><span class='line'>                                        <span class="n">file</span><span class="p">:</span> <span class="kp">nil</span><span class="p">,</span>                        <span class="c1"># 選択できるファイル名を指定。指定しないので nil とする</span>
</span><span class='line'>                                        <span class="n">types</span><span class="p">:</span> <span class="o">[</span><span class="s2">&quot;md&quot;</span><span class="p">,</span> <span class="s2">&quot;mkd&quot;</span><span class="p">,</span> <span class="s2">&quot;markdown&quot;</span><span class="o">]</span><span class="p">)</span> <span class="c1"># 選択できるファイル拡張子を指定。</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">result</span> <span class="o">==</span> <span class="no">NSOKButton</span><span class="p">)</span>
</span><span class='line'>      <span class="c1"># パネルの Open がクリックされたときの処理</span>
</span><span class='line'>      <span class="n">path</span> <span class="o">=</span> <span class="n">panel</span><span class="o">.</span><span class="n">filename</span> <span class="c1"># 選択されたファイルのパスを取得</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># ファイルを読む</span>
</span><span class='line'>      <span class="n">markdown_content</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Markdown を HTML へ変換し表示する</h2>

<p>Markdown ファイルを読むまでの処理ができましたので、つぎに HTML へ変換する処理を実装します。まず、<code>rdiscount</code> を <em>AppDelegate.rb</em> の先頭で <code>require</code> でロードします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;rdiscount&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">AppDelegate</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:window</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:webView</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>open</code> メソッドでファイルを読んだ後の処理として、Markdown を HTML へ変換し表示する処理を実装します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># ファイルを読む</span>
</span><span class='line'>  <span class="n">markdown_content</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Markdown を HTML へ変換</span>
</span><span class='line'>  <span class="n">md</span> <span class="o">=</span> <span class="no">RDiscount</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">markdown_content</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># 変換された HTML にヘッダなどを追加</span>
</span><span class='line'>  <span class="n">html</span> <span class="o">=&lt;&lt;</span><span class="sh">&quot;</span><span class="no">EOS</span><span class="sh">&quot;</span>
</span><span class='line'><span class="sh">&lt;html&gt;</span>
</span><span class='line'><span class="sh">&lt;head&gt;</span>
</span><span class='line'><span class="sh">&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span>
</span><span class='line'><span class="sh">&lt;/head&gt;</span>
</span><span class='line'><span class="sh">&lt;body&gt;</span>
</span><span class='line'><span class="sh">#{md.to_html}</span>
</span><span class='line'><span class="sh">&lt;/body&gt;</span>
</span><span class='line'><span class="sh">&lt;/html&gt;</span>
</span><span class='line'><span class="no">EOS</span>
</span><span class='line'>  <span class="c1"># WebView に HTML を表示</span>
</span><span class='line'>  <span class="n">webView</span><span class="o">.</span><span class="n">mainFrame</span><span class="o">.</span><span class="n">loadHTMLString</span><span class="p">(</span><span class="n">html</span><span class="p">,</span> <span class="n">baseURL</span><span class="p">:</span> <span class="kp">nil</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>webView.mainFrame</code> の <code>loadHTMLString</code> を用いると作成した HTML を表示できます。</p>

<p><img src="http://watson1978.github.com/MacRuby-DoJo/images/ja/markdown-viewer/markdown-viewer.png" alt="image" /></p>

<p>スタイルシートを記述して見栄えをよくしたりしてみてください。Markdown ファイルで使用している画像を表示するために <code>baseURL</code> の指定を変更する必要があるかと思います。いろいろ試してみてください。その際には、MacRuby のサンプルにある <a href="https://github.com/MacRuby/MacRuby/tree/master/sample-macruby/MarkdownViewer">MarkdownViewer</a> が参考になるかと思います。</p>

<h2>Deployment のオプションを追加</h2>

<p>Deployment するときに、今回使用した rdiscount がアプリケーションに埋め込まれるように <code>--gem rdiscount</code> をオプションに追加しておきましょう。</p>

<p><img src="http://watson1978.github.com/MacRuby-DoJo/images/ja/markdown-viewer/deployment_option.png" alt="image" /></p>

<div class="note">
Deployment するとロードパスの探索範囲内に rdiscount が埋め込まれるようになります。そのため、Deployment する際に <code>require 'rubygems'</code> を削除しても動作します。(rubygems を読み込まない分、起動が速くなるかもしれません、という程度ですが。)
</div>


<h2>付録 : 今回作成したコード</h2>

<p>最後に今回作成した <em>AppDelegate.rb</em> の全文を記載します。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;rdiscount&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">AppDelegate</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:window</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:webView</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">applicationDidFinishLaunching</span><span class="p">(</span><span class="n">a_notification</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># Insert code here to initialize your application</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">open</span><span class="p">(</span><span class="n">sender</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># オープンパネルのインスタンスを取得</span>
</span><span class='line'>    <span class="n">panel</span> <span class="o">=</span> <span class="no">NSOpenPanel</span><span class="o">.</span><span class="n">openPanel</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># パネルを表示</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">=</span> <span class="n">panel</span><span class="o">.</span><span class="n">runModalForDirectory</span><span class="p">(</span><span class="no">NSHomeDirectory</span><span class="p">(),</span>                <span class="c1"># パネルを表示するときのディレクトリ</span>
</span><span class='line'>                                        <span class="n">file</span><span class="p">:</span> <span class="kp">nil</span><span class="p">,</span>                        <span class="c1"># 選択できるファイル名を指定。指定しないので nil とする</span>
</span><span class='line'>                                        <span class="n">types</span><span class="p">:</span> <span class="o">[</span><span class="s2">&quot;md&quot;</span><span class="p">,</span> <span class="s2">&quot;mkd&quot;</span><span class="p">,</span> <span class="s2">&quot;markdown&quot;</span><span class="o">]</span><span class="p">)</span> <span class="c1"># 選択できるファイル拡張子を指定。</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">result</span> <span class="o">==</span> <span class="no">NSOKButton</span><span class="p">)</span>
</span><span class='line'>      <span class="c1"># パネルの Open がクリックされたときの処理</span>
</span><span class='line'>      <span class="n">path</span> <span class="o">=</span> <span class="n">panel</span><span class="o">.</span><span class="n">filename</span> <span class="c1"># 選択されたファイルのパスを取得</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># ファイルを読む</span>
</span><span class='line'>      <span class="n">markdown_content</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># Markdown を HTML へ変換</span>
</span><span class='line'>      <span class="n">md</span> <span class="o">=</span> <span class="no">RDiscount</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">markdown_content</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1"># 変換された HTML にヘッダなどを追加</span>
</span><span class='line'>      <span class="n">html</span> <span class="o">=&lt;&lt;</span><span class="sh">&quot;</span><span class="no">EOS</span><span class="sh">&quot;</span>
</span><span class='line'><span class="sh">&lt;html&gt;</span>
</span><span class='line'><span class="sh">&lt;head&gt;</span>
</span><span class='line'><span class="sh">&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span>
</span><span class='line'><span class="sh">&lt;/head&gt;</span>
</span><span class='line'><span class="sh">&lt;body&gt;</span>
</span><span class='line'><span class="sh">#{md.to_html}</span>
</span><span class='line'><span class="sh">&lt;/body&gt;</span>
</span><span class='line'><span class="sh">&lt;/html&gt;</span>
</span><span class='line'><span class="no">EOS</span>
</span><span class='line'>      <span class="c1"># WebView に HTML を表示</span>
</span><span class='line'>      <span class="n">webView</span><span class="o">.</span><span class="n">mainFrame</span><span class="o">.</span><span class="n">loadHTMLString</span><span class="p">(</span><span class="n">html</span><span class="p">,</span> <span class="n">baseURL</span><span class="p">:</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Organizer で API を調べてみよう]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/21/organizer/"/>
    <updated>2012-03-21T22:33:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/21/organizer</id>
    <content type="html"><![CDATA[<p>Xcode には Organizer という、iPhone などのデバイスやプロジェクト、ドキュメントを扱うツールがあります。Xcode で [Window]->[Organizer] とメニューを選択すると Organizer が起動します。</p>

<p><img src="http://watson1978.github.com/MacRuby-DoJo/images/ja/organizer/xcode_menu_organizer.png" alt="image" /></p>

<p>Organizer のツールバーにある Documentation というアイコンを選択すると、Mac OS X や iOS のドキュメントを閲覧することができます。</p>

<p><img src="http://watson1978.github.com/MacRuby-DoJo/images/ja/organizer/organizer.png" alt="image" /></p>

<p>各 Framework のクラスで、どのようなメソッドが存在するのか調べたりする際などで活用してみてください。</p>

<p><img src="http://watson1978.github.com/MacRuby-DoJo/images/ja/organizer/organizer_doc_search.png" alt="image" /></p>
]]></content>
  </entry>
  
</feed>
