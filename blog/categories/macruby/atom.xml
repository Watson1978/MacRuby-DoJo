<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: MacRuby | MacRuby DoJo (道場)]]></title>
  <link href="http://watson1978.github.com/MacRuby-DoJo/blog/categories/macruby/atom.xml" rel="self"/>
  <link href="http://watson1978.github.com/MacRuby-DoJo/"/>
  <updated>2012-03-31T16:21:10+09:00</updated>
  <id>http://watson1978.github.com/MacRuby-DoJo/</id>
  <author>
    <name><![CDATA[Watson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Original Methods in MacRuby]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/31/original-methods/"/>
    <updated>2012-03-31T16:00:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/31/original-methods</id>
    <content type="html"><![CDATA[<p>MacRuby has some original methods. They does not exist in CRuby's methods and Cocoa APIs. This content describes those methods.</p>

<h2>Original Methods</h2>

<h3>String#transform</h3>

<p>Transforms the string to uppercase/lowercase or another language charactors.
This method is implemented with <a href="http://site.icu-project.org/">ICU</a>  <a href="http://userguide.icu-project.org/transforms/general">Transforms</a>.</p>

<ul>
<li>transform(pattern) -> String

<ul>
<li>[PARAM] pattern:

<ul>
<li>Specifies transliteration identifier.</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>Returns the transformed string.</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>```ruby</p>

<blockquote><blockquote><p>"hello".transform("Upper")
=> "HELLO"
"HELLO".transform("Lower")
=> "hello"
"hello".transform("Hiragana")
=> "へっろ"
"hello".transform("Greek")
=> "ἑλλο"
```</p></blockquote></blockquote>

<h3>String#pointer</h3>

<p>Returns a Pointer object converted from String. Returned object corresponds to a variable of <code>unsigned char *</code>.</p>

<p>Cocoa APIs has some methods which accepts the pointer variable.
<code>String#pointer</code> may be used for these methods.</p>

<ul>
<li>pinter -> Pointer

<ul>
<li>[RETURN]

<ul>
<li>Returns a Pointer object converted from String.</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>```ruby</p>

<blockquote><blockquote><p>pointer = "foo".pointer
=> #&lt;Pointer:0x4007ac580>
data = NSData.dataWithBytes(pointer, length: "foo".length)
=> <666f6f>
data.to_str
=> "foo"
```</p></blockquote></blockquote>

<h3>String#to_data</h3>

<p>Returns an <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/NSData_Class/Reference/Reference.html">NSData</a> object which is converted from String.</p>

<ul>
<li>to_data -> NSData

<ul>
<li>[RETURN]

<ul>
<li>Returns a NSData object.</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>```ruby</p>

<blockquote><blockquote><p>"foo".to_data
=> <666f6f>
"foo".to_data.class
=> __NSCFData
```</p></blockquote></blockquote>

<h3>NSData#to_str</h3>

<p>Returns a String object which is converted from NSData.</p>

<ul>
<li>to_str -> String

<ul>
<li>[RETURN]

<ul>
<li>Returns a String object</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>```ruby</p>

<blockquote><blockquote><p>data = "foo".to_data
=> <666f6f>
data.to_str
=> "foo"
```</p></blockquote></blockquote>

<h3>Kernel.framework</h3>

<p>Loads a framework.</p>

<ul>
<li>framework -> bool

<ul>
<li>[RETURN]

<ul>
<li>Returns a true if loaded a framework. Otherwise, returns a false.</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>```ruby</p>

<blockquote><blockquote><p>framework 'Foundation'
=> true
```</p></blockquote></blockquote>

<h3>Kernel.load_bridge_support_file</h3>

<p>Loads a Bridge Support file.</p>

<ul>
<li>load_bridge_support_file(filename) -> self</li>
</ul>


<p>```ruby</p>

<blockquote><blockquote><p>load_bridge_support_file("Foo.bridgesupport")
=> main
```</p></blockquote></blockquote>

<h3>Kernel.load_plist</h3>

<p>Returns an object which is converted from string of plist format.</p>

<ul>
<li>load_plist(string) -> Object

<ul>
<li>[PARAM] string:

<ul>
<li>Passes a string of plist format.</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>Returns an object.</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>```ruby</p>

<blockquote><blockquote><p>data = File.read('StopWatch-Info.plist')
load_plist(data)
=> {"CFBundleName"=>"${PRODUCT_NAME}", "CFBundleIdentifier"=>"Watson.${PRODUCT_NAME:rfc1034identifier}", "CFBundleInfoDictionaryVersion"=>"6.0", "CFBundleVersion"=>"1", "CFBundleExecutable"=>"${EXECUTABLE_NAME}", "NSPrincipalClass"=>"NSApplication", "CFBundlePackageType"=>"APPL", "CFBundleIconFile"=>"MacRuby.icns", "CFBundleSignature"=>"????", "NSMainNibFile"=>"MainMenu", "LSMinimumSystemVersion"=>"${MACOSX_DEPLOYMENT_TARGET}", "CFBundleDevelopmentRegion"=>"en", "CFBundleShortVersionString"=>"1.0"}</p>

<p>data = "foo".to_plist
load_plist(data)
=> "foo"
```</p></blockquote></blockquote>

<h3>Object#to_plist</h3>

<p>Returns a string of plist format which is converted from Object.</p>

<ul>
<li>to_plist -> String

<ul>
<li>[RETURN]

<ul>
<li>Returns a string of plist format.</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>```ruby</p>

<blockquote><blockquote><p>"foo".to_plist
=> "&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?>\n&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<string>foo</string>\n</plist>\n"
{"foo" => 42}.to_plist
=> "&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?>\n&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n\t<key>foo</key>\n\t<integer>42</integer>\n</dict>\n</plist>\n"
["foo", "bar"].to_plist
=> "&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?>\n&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<array>\n\t<string>foo</string>\n\t<string>bar</string>\n</array>\n</plist>\n"
```</p></blockquote></blockquote>

<h3>Object#methods</h3>

<p>Returns a methods list. CRuby also has <code>Object#methods</code>, <code>objc_methods</code> argument is added to MacRuby's method.</p>

<ul>
<li>methods(include_inherited = true, objc_methods = false) -> [Symbol]

<ul>
<li>[PARAM] include_inherited:

<ul>
<li>If passes a true, looks up a recursively.</li>
</ul>
</li>
<li>[PARAM] objc_methods:

<ul>
<li>If passes a true, returns the Ruby's methods and Cocoa APIs.</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>Returns a method list.</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>```ruby</p>

<blockquote><p>"foo".methods(true, true)
=> [:encode!, :"replaceCharactersInRange:withString:", :"getCharacters:range:", :characterAtIndex, :length, :transform, :crypt, :rpartition, :partition, :sum, :tr_s!, :tr_s, :tr!, :tr, :squeeze!, :squeeze, :delete!, :delete, :count, :reverse!, :reverse, :upto, :next!, :next, :succ!, :succ, :each_codepoint, :codepoints, :each_byte, :bytes, :each_char, :chars, :each_line, :lines, :rstrip!, :lstrip!, :strip!, :rstrip, :lstrip, :strip, :center, :rjust, :ljust, :capitalize!, :capitalize, :swapcase!, :swapcase, :upcase!, :upcase, :downcase!, :downcase, :gsub!, :gsub, :sub!, :sub, :chop!, :chop, :chomp!, :chomp, :to_f, :chr, :ord, :oct, :hex, :to_i, :split, :scan, :=~, :match, :dump, :inspect, :intern, :to_sym, :to_str, :to_s, :end_with?, :start_with?, :include?, :eql?, :casecmp, :&lt;=>, :==, :concat, :&lt;&lt;, :%, :*, :+, :rindex, :index, :insert, :slice!, :slice, :[]=, :[], :ascii_only?, :valid_encoding?, :force_encoding, :pointer, :to_data, :setbyte, :getbyte, :bytesize, :empty?, :size, :encoding, :clear, :replace, :dup, :"performSelector:withObject:withObject:", :"performSelector:withObject:", :performSelector, :conformsToProtocol, :dd_appendSpaces, :"replaceOccurrencesOfString:withString:options:range:", :initWithCapacity,  ---- snip ----
```</p></blockquote>

<h3>Range#relative_to</h3>

<p>Returns a new Range instance which has negative values in <code>rng</code> expanded relative to <code>max</code>.</p>

<ul>
<li>relative_to(max) -> Range

<ul>
<li>[PARAM] max:

<ul>
<li>Specifies a max of Range.</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>Returns a new Range instance.</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>```ruby</p>

<blockquote><blockquote><p>(1..10).relative_to(5)
=> 1..5
(-2..-1).relative_to(5)
=> 3..4
```</p></blockquote></blockquote>

<h3>BasicSocket#sendfile</h3>

<p>Sends a file with socket. This method is implemented with <a href="http://developer.apple.com/library/ios/#DOCUMENTATION/System/Conceptual/ManPages_iPhoneOS/man2/sendfile.2.html">sendfile(2)</a>.</p>

<ul>
<li>sendfile(file, offset, length) -> Integer

<ul>
<li>[PARAM] file:

<ul>
<li>Specifies a file path or readable IO object.</li>
</ul>
</li>
<li>[PARAM] offset:

<ul>
<li>Specifies a offset as start position.</li>
</ul>
</li>
<li>[PARAM] length:

<ul>
<li>Specifies a length to send.</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>Returns a sent length.</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>```ruby
require 'socket'</p>

<p>port = 5000
socket = TCPSocket.open('localhost', port)</p>

<p>path = 'sample.txt'
socket.sendfile(path, 0, 128)
```</p>

<h2>Fixnum#popcnt</h2>

<p>Returns the number of 1 bits set in the internal representation of Fixnum.</p>

<ul>
<li>popcnt -> Fixnum</li>
</ul>


<p>```ruby</p>

<blockquote><blockquote><p>13.to_s(2)
=> "1101"
13.popcnt
=> 3
255.to_s(2)
=> "11111111"
255.popcnt
=> 8
```</p></blockquote></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Original Constants in MacRuby]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/31/original-constants/"/>
    <updated>2012-03-31T16:00:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/31/original-constants</id>
    <content type="html"><![CDATA[<p>This content describes the constants that have been added in MacRuby.</p>

<h2>Original Constants</h2>

<h3>Kernel::RUBY_ARCH</h3>

<p>CPU name of the architecture which MacRuby is ran.</p>

<p>```ruby</p>

<blockquote><blockquote><p>Kernel::RUBY_ARCH
=> "x86_64"
```</p></blockquote></blockquote>

<h3>Kernel::MACRUBY_VERSION</h3>

<p>MacRuby version.</p>

<p>```ruby</p>

<blockquote><blockquote><p>Kernel::MACRUBY_VERSION
=> "0.12"
```</p></blockquote></blockquote>

<p>Following method may check whether running your program on MacRuby.
```ruby
def is_macruby?
  begin</p>

<pre><code>MACRUBY_VERSION
return true
</code></pre>

<p>  rescue</p>

<pre><code>return false
</code></pre>

<p>  end
end
```</p>

<h3>Kernel::MACRUBY_REVISION</h3>

<p>Git SHA1 Hash which indicates a last commit. (Older MacRuby shows a revision number of SVN)</p>

<p>```ruby</p>

<blockquote><blockquote><p>Kernel::MACRUBY_REVISION
=> "git commit e35df75944e7a13d16f019e2ed1e4ce2406b06af"
```</p></blockquote></blockquote>

<h3>Dir::NS_TMPDIR</h3>

<p>Path of temporary directory.</p>

<p>```ruby</p>

<blockquote><blockquote><p>Dir::NS_TMPDIR
=> "/var/folders/1z/ff7x15cj7vb24rl38ty0y52w0000gn/T/"
```</p></blockquote></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dispatch::Source クラス]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/31/dispatch-source-class/"/>
    <updated>2012-03-31T10:00:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/31/dispatch-source-class</id>
    <content type="html"><![CDATA[<p>Dispatch::Source クラスは何らかのイベントが発生するときに、イベントをハンドリングして処理を実行する仕組みを提供します。</p>

<h2>Dispatch::Source クラスの定数</h2>

<ul>
<li>Dispatch::Source::DATA_ADD</li>
<li>Dispatch::Source::DATA_OR</li>
<li>Dispatch::Source::PROC</li>
<li>Dispatch::Source::SIGNAL</li>
<li>Dispatch::Source::READ</li>
<li>Dispatch::Source::WRITE</li>
<li>Dispatch::Source::VNODE</li>
<li><br/></li>
<li>Dispatch::Source::PROC_EXIT</li>
<li>Dispatch::Source::PROC_FORK</li>
<li>Dispatch::Source::PROC_EXEC</li>
<li>Dispatch::Source::PROC_SIGNAL</li>
<li><br/></li>
<li>Dispatch::Source::VNODE_DELETE</li>
<li>Dispatch::Source::VNODE_WRITE</li>
<li>Dispatch::Source::VNODE_EXTEND</li>
<li>Dispatch::Source::VNODE_ATTRIB</li>
<li>Dispatch::Source::VNODE_LINK</li>
<li>Dispatch::Source::VNODE_RENAME</li>
<li>Dispatch::Source::VNODE_REVOKE</li>
</ul>


<p>Dispatch Source の種類として、以下のものを使用できます。</p>

<table class="table">
<tr><th>定数名</th><th>GCD API での定義</th><th>内容</th></tr>
<tr>
  <td>Dispatch::Source::DATA_ADD</td>
  <td>DISPATCH_SOURCE_TYPE_DATA_ADD</td>
  <td><code>&lt;&lt;</code> メソッドを通じてイベントが発生し、処理を実行します。</td>
</tr>
<tr>
  <td>Dispatch::Source::DATA_OR</td>
  <td>DISPATCH_SOURCE_TYPE_DATA_OR</td>
  <td><code>&lt;&lt;</code> メソッドを通じてイベントが発生し、処理を実行します。</td>
</tr>
<tr>
  <td>Dispatch::Source::PROC</td>
  <td>DISPATCH_SOURCE_TYPE_PROC</td>
  <td>プロセスに関するイベントを受けると、処理を実行します。</td>
</tr>
<tr>
  <td>Dispatch::Source::SIGNAL</td>
  <td>DISPATCH_SOURCE_TYPE_SIGNAL</td>
  <td>シグナルを受けると、処理を実行します。</td>
</tr>
<tr>
  <td>Dispatch::Source::READ</td>
  <td>DISPATCH_SOURCE_TYPE_READ</td>
  <td>ファイルディスクリプタが読み込み可能になると、処理を実行します。</td>
</tr>
<tr>
  <td>Dispatch::Source::WRITE</td>
  <td>DISPATCH_SOURCE_TYPE_WRITE</td>
  <td>ファイルディスクリプタが書き込み可能になると、処理を実行します。</td>
</tr>
<tr>
  <td>Dispatch::Source::VNODE</td>
  <td>DISPATCH_SOURCE_TYPE_VNODE</td>
  <td>ファイルが削除されたりファイルシステム上で変更があると、処理を実行します。</td>
</tr>
</table>


<p>Dispatch::Source::PROC を使用する際に、以下の定数をマスクとして使用できます。</p>

<table class="table">
<tr>
  <td>Dispatch::Source::PROC_EXIT</td>
  <td>DISPATCH_PROC_EXIT</td>
  <td>プロセスが終了した。</td>
</tr>
<tr>
  <td>Dispatch::Source::PROC_FORK</td>
  <td>DISPATCH_PROC_FORK</td>
  <td>子プロセスを作成した。</td>
</tr>
<tr>
  <td>Dispatch::Source::PROC_EXEC</td>
  <td>DISPATCH_PROC_EXEC</td>
  <td>exec や posix_spawn で別のプロセスを実行した。</td>
</tr>
<tr>
  <td>Dispatch::Source::PROC_SIGNAL</td>
  <td>DISPATCH_PROC_SIGNAL</td>
  <td>シグナルを送信した。</td>
</tr>
</table>


<p>Dispatch::Source::VNODE を使用する際に、以下の定数をマスクとして使用できます。</p>

<table class="table">
<tr>
  <td>Dispatch::Source::VNODE_DELETE</td>
  <td>DISPATCH_VNODE_DELETE</td>
  <td>ファイルなどが削除された。</td>
</tr>
<tr>
  <td>Dispatch::Source::VNODE_WRITE</td>
  <td>DISPATCH_VNODE_WRITE</td>
  <td>ファイルなどのデータが変更された。</td>
</tr>
<tr>
  <td>Dispatch::Source::VNODE_EXTEND</td>
  <td>DISPATCH_VNODE_EXTEND</td>
  <td>ファイルサイズが変更された。</td>
</tr>
<tr>
  <td>Dispatch::Source::VNODE_ATTRIB</td>
  <td>DISPATCH_VNODE_ATTRIB</td>
  <td>ファイルなどのメタ情報が変更された。</td>
</tr>
<tr>
  <td>Dispatch::Source::VNODE_LINK</td>
  <td>DISPATCH_VNODE_LINK</td>
  <td>The file-system object link count changed.</td>
</tr>
<tr>
  <td>Dispatch::Source::VNODE_RENAME</td>
  <td>DISPATCH_VNODE_RENAME</td>
  <td>ファイル名が変更された。</td>
</tr>
<tr>
  <td>Dispatch::Source::VNODE_REVOKE</td>
  <td>DISPATCH_VNODE_REVOKE</td>
  <td>The file-system object was revoked.</td>
</tr>
</table>


<p>Dispatch Source は他のクラスよりもわかりにくいと思います。MacRuby のリポジトリにある <a href="https://github.com/MacRuby/MacRuby/blob/master/spec/macruby/core/gcd/source_spec.rb">source_spec.rb</a> を参考にしたりすると良いでしょう。</p>

<h2>Dispatch::Source クラスのメソッド</h2>

<h3>Dispatch::Source.new</h3>

<p>Dispatch Source を生成し返します。</p>

<ul>
<li>new(type, handle, mask, queue) { ... } -> Source

<ul>
<li>[PARAM] type:

<ul>
<li>Dispatch Source の種類を指定します。</li>
</ul>
</li>
<li>[PARAM] handle:

<ul>
<li>イベントを監視するためのディスクリプタを指定します。type に <code>DATA_ADD</code> と <code>DATA_OR</code> を指定した場合には、<code>handle</code> は <code>0</code> とします。</li>
</ul>
</li>
<li>[PARAM] mask:

<ul>
<li>マスクを指定できる Dispatch Source の種類を type で使用した際に指定します。</li>
</ul>
</li>
<li>[PARAM] queue:

<ul>
<li>イベントが発生したときに、block の処理を追加する Dispatch Queue を指定します。</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>生成した Dispatch Source のインスタンスを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Dispatch::Source.timer</h3>

<p>タイマーイベント用の Dispatch Source を生成し返します。</p>

<ul>
<li>timer(delay, interval, leeway, queue) { ... } -> Source

<ul>
<li>[PARAM] delay:

<ul>
<li>何秒後からタイマーを開始するか指定します。nil の場合には Dispatch::TIME_NOW が指定されたのと同じになります</li>
</ul>
</li>
<li>[PARAM] interval:

<ul>
<li>何秒間隔で繰り返すか指定します。</li>
</ul>
</li>
<li>[PARAM] leeway:

<ul>
<li>何秒までの遅れを許容するか指定します。</li>
</ul>
</li>
<li>[PARAM] queue:

<ul>
<li>イベントが発生したときに、block の処理を追加する Dispatch Queue を指定します。</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>生成した Dispatch Source のインスタンスを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>```ruby
gcdq = Dispatch::Queue.new('sample')
timer = Dispatch::Source.timer(0.5, 1, 0.5, gcdq) do |s|
  puts "Wake up!"
end</p>

<p>sleep 3
```</p>

<h3>Dispatch::Source#cancelled?</h3>

<p>Dispatch Source がキャンセルされているか返します。</p>

<ul>
<li>cancelled? -> bool

<ul>
<li>[RETURN]

<ul>
<li>キャンセルされていれば true、そうでなれば false を返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Dispatch::Source#cancel!</h3>

<p>Dispatch Source をキャンセルします。</p>

<ul>
<li>cancel!</li>
</ul>


<p>```ruby
gcdq = Dispatch::Queue.new('sample')
timer = Dispatch::Source.timer(1, 0.5, 0, gcdq) do |s|
  puts "Wake up!"
end</p>

<p>sleep 2</p>

<p>timer.cancel!
p timer.cancelled? # => true</p>

<p>sleep 1
```</p>

<h3>Dispatch::Source#handle</h3>

<p>Dispatch Source の handle を返します。</p>

<ul>
<li>handle

<ul>
<li>[RETURN]

<ul>
<li>Dispatch Source の handle を返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Dispatch::Source#mask</h3>

<p>Dispatch Source の mask を返します。GCD API の <code>dispatch_source_get_mask</code> に相当します。</p>

<ul>
<li>mask

<ul>
<li>[RETURN]

<ul>
<li>Dispatch Source の mask を返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Dispatch::Source#data</h3>

<p>Dispatch Source でまだ処理されていないデータを返します。GCD API の <code>dispatch_source_get_data</code> に相当します。</p>

<ul>
<li>data

<ul>
<li>[RETURN]

<ul>
<li>Dispatch Source でまだ処理されていないデータを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>Dispatch Source の種類によって、以下のようなデータを返します。</p>

<table class="table">
<tr>
  <td>Dispatch::Source::DATA_ADD</td>
  <td><code>&lt;&lt;</code>で送信されたデータ</td>
</tr>
<tr>
  <td>Dispatch::Source::DATA_OR</td>
  <td><code>&lt;&lt;</code>で送信されたデータ</td>
</tr>
<tr>
  <td>Dispatch::Source::PROC</td>
  <td>Dispatch::Source::PROC_EXIT、Dispatch::Source::PROC_FORK、Dispatch::Source::PROC_EXEC、Dispatch::Source::PROC_SIGNAL のいずれか</td>
</tr>
<tr>
  <td>Dispatch::Source::SIGNAL</td>
  <td>シグナルの番号</td>
</tr>
<tr>
  <td>Dispatch::Source::READ</td>
  <td>読み込み可能なバイト数</td>
</tr>
</table>


<p><code>ruby
gcdq = Dispatch::Queue.new('sample')
src = Dispatch::Source.new(Dispatch::Source::DATA_ADD, 0, 0, gcdq) do |s|
  puts s.data
end
src &lt;&lt; 1
sleep 0.5
</code></p>

<h3>Dispatch::Source#&lt;&lt;</h3>

<p>Dispatch::Source::DATA_ADD と Dispatch::Source::DATA_OR を指定した Dispatch Source で使用します。指定したデータを Dispatch Source の block へ送信します。GCD API の <code>dispatch_source_get_data</code> に相当します。</p>

<ul>
<li>&lt;&lt; data</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dispatch::Semaphore クラス]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/31/dispatch-semaphore-class/"/>
    <updated>2012-03-31T10:00:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/31/dispatch-semaphore-class</id>
    <content type="html"><![CDATA[<p>Dispatch::Semaphore クラスは排他制御機能を提供します。たとえば、Concurrent Dispatch Queue を用いて並行処理をしていた際に計算結果を 1 つの配列に格納する場合などに Dispatch Semaphore で排他制御を行います。</p>

<h2>Dispatch::Semaphore クラスのメソッド</h2>

<h3>Dispatch::Semaphore.new</h3>

<p>Dispatch Semaphore を生成し返します。GCD API の <code>dispatch_semaphore_create</code> に相当します。</p>

<ul>
<li>new(count) -> Semaphore

<ul>
<li>[PARAM] count:

<ul>
<li>セマフォのカウンタの初期値を指定します。</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>生成した Dispatch Semaphore のインスタンスを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Dispatch::Semaphore#wait</h3>

<p>Dispatch::Semaphore#signal が呼び出されセマフォのカウンタが 1 以上になるまで待ちます。カウンタが 1 以上になると 1 減算して待ち状態が解除されます。GCD API の <code>dispatch_semaphore_wait</code> に相当します。</p>

<ul>
<li>wait(timeout = nil) -> bool

<ul>
<li>[PARAM] timeout:

<ul>
<li>タイムアウト時間を指定します。省略された場合には Dispatch::TIME_FOREVER が指定されたのと同じになります。</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>Dispatch::Semaphore#signal で wait が解除された場合には true、タイムアウトした場合には false を返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<p><code>ruby
gcdq = Dispatch::Queue.new('sample')
sema = Dispatch::Semaphore.new(0)
gcdq.async {
  sleep 1
  puts "Hello"
  sema.signal
}
sema.wait #=&gt; true
</code></p>

<h3>Dispatch::Semaphore#signal</h3>

<p>Dispatch Semaphore のカウンタを 1 加算します。GCD API の <code>dispatch_semaphore_signal</code> に相当します。</p>

<ul>
<li>signal -> bool

<ul>
<li>[RETURN]

<ul>
<li>セマフォを待っているスレッドがなければ true、それ以外で false を返します。</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dispatch::Queue クラス]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/31/dispatch-queue-class/"/>
    <updated>2012-03-31T10:00:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/31/dispatch-queue-class</id>
    <content type="html"><![CDATA[<p>GCD を用いると簡単にマルチスレッドで処理を行うことができます。私たちは、GCD を使いたい処理を書き、適切な Dispatch Queue へ追加するだけです。あとは、GCD が必要なスレッドを生成して処理してくれます。</p>

<p>Dispatch Queue の種類として、以下の 4 つがあります。</p>

<ul>
<li>Serial Dispatch Queue</li>
<li>Concurrent Dispatch Queue</li>
<li>Main Dispatch Queue (Serial Dispatch Queue)</li>
<li>Global Dispatch Queue (Concurrent Dispatch Queue)</li>
</ul>


<p>Serial Dispatch Queue はタスクを逐次的に実行する際に用い、Concurrent Dispatch Queue は平行して複数の処理を行う際に用います。</p>

<p>Main Dispatch Queue と Global Dispatch Queue はあらかじめ用意されており、<code>new</code> でインスタンスを生成しなくとも使うことができます。Main Dispatch Queue は Serial Dispatch Queue の、Global Dispatch Queue は Concurrent Dispatch Queue の一種となっています。</p>

<h2>Dispatch::Queue クラスのメソッド</h2>

<h3>Dispatch::Queue.new</h3>

<p>逐次処理用に Serial Dispatch Queue を生成します。</p>

<ul>
<li>new(label) -> Queue

<ul>
<li>[PARAM] label:

<ul>
<li>生成する Queue に付与するユニークなラベルを指定します。</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>生成した Dispatch Queue のインスタンスを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Dispatch::Queue.concurrent</h3>

<p>並行処理用に Global Dispatch Queue を返します。Mac OS X 10.7 でビルドされた MacRuby では、優先度を指定すると Concurrent Dispatch Queue を返します。</p>

<ul>
<li>concurrent(priority = :default) -> Queue

<ul>
<li>[PARAM] priority:

<ul>
<li>生成する Queue の優先度を指定します。<code>:high</code>、<code>:low</code>、<code>:default</code> と Mac OS X 10.7 からは  <code>:background</code> も指定できます。</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>Dispatch Queue のインスタンスを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Dispatch::Queue.main</h3>

<p>Main Dispatch Queue を返します。</p>

<ul>
<li>main -> Queue

<ul>
<li>[RETURN]

<ul>
<li>Main Dispatch Queue のインスタンスを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Dispatch::Queue.current</h3>

<p>現在使用している Dispatch Queue を返します。GCD タスクの block 内で呼び出すと、そのタスクを実行している Queue が返ります。block の外側で呼び出すと Main Dispatch Queue が返ります。</p>

<ul>
<li>current -> Queue

<ul>
<li>[RETURN]

<ul>
<li>現在使用している Dispatch Queue のインスタンスを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>```ruby
gcdq = Dispatch::Queue.new('sample')
gcdq.after(Dispatch::TIME_NOW) {
  q = Dispatch::Queue.current
  puts q.label # => sample
}</p>

<p>sleep 1</p>

<p>q = Dispatch::Queue.current
puts q.label # => com.apple.main-thread
```</p>

<h3>Dispatch::Queue#apply</h3>

<p>指定した回数 block を Dispatch Queue に追加し、それらの処理がすべて完了するまで待ちます。GCD API の <code>dispatch_apply</code> に相当します。</p>

<ul>
<li>apply(iterations) {|index| ... }

<ul>
<li>[PARAM] iterations:

<ul>
<li>Dispatch Queue に block を追加する回数を指定します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<p><code>ruby
gcdq = Dispatch::Queue.new('sample')
@result = []
gcdq.apply(5) {|i| @result[i] = i*i }
p @result  #=&gt; [0, 1, 4, 9, 16, 25]
</code></p>

<h3>Dispatch::Queue#async</h3>

<p>長時間にわたる処理など、非同期的に実行したい block を Dispatch Queue に追加します。group を指定すると GCD API の <code>dispatch_group_async</code> に、それ以外は <code>dispatch_async</code> に相当します。</p>

<ul>
<li>async(group = nil) { ... }

<ul>
<li>[PARAM] group:

<ul>
<li>group を指定することで、Dispatch Queue に追加するタスクが group と関連づけられます。</li>
</ul>
</li>
</ul>
</li>
</ul>


<p><code>ruby
gcdq = Dispatch::Queue.new('sample')
@i = 0
gcdq.async { @i = 42 }
while @i == 0 do; end
p @i #=&gt; 42
</code></p>

<p>group を用いることで、Dispatch Queue に追加したすべてのタスクが完了するのを待ち合わせることができたりします。</p>

<p><code>ruby
gcdq = Dispatch::Queue.new('sample')
gcdg = Dispatch::Group.new
@i = 0
gcdq.async(gcdg) { @i = 42 }
gcdg.wait
p @i #=&gt; 42
</code></p>

<h3>Dispatch::Queue#sync</h3>

<p>同期的に実行したい block を Dispatch Queue に追加します。処理が完了するまで待ちます。GCD API の <code>dispatch_sync</code> に相当します。</p>

<ul>
<li>sync { ... }</li>
</ul>


<p><code>ruby
gcdq = Dispatch::Queue.new('sample')
@i = 0
gcdq.sync { @i = 42 }
p @i #=&gt; 42
</code></p>

<h3>Dispatch::Queue#after</h3>

<p>指定した時間が経過した後、block を Dispatch Queue に追加します。</p>

<ul>
<li>after(delay) { ... }

<ul>
<li>[PARAM] delay:

<ul>
<li>何秒後に block を Dispatch Queue に追加するか指定します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>```ruby
gcdq = Dispatch::Queue.new('sample')
gcdq.after(0.5) { puts "Hello" }</p>

<p>sleep 1
```</p>

<h3>Dispatch::Queue#label</h3>

<p>Dispatch Queue のラベルを返します。GCD API の <code>dispatch_queue_get_label</code> に相当します。</p>

<ul>
<li>label -> String

<ul>
<li>[RETURN]

<ul>
<li>Dispatch Queue のラベルを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<p><code>ruby
gcdq = Dispatch::Queue.new('sample')
gcdq.label # =&gt; 'sample'
</code></p>

<h3>Dispatch::Queue#to_s</h3>

<p>Dispatch::Queue#label の別名です。</p>

<h3>Dispatch::Queue#barrier_async</h3>

<p>TBD</p>

<h3>Dispatch::Queue#barrier_sync</h3>

<p>TBD</p>

<h3>Dispatch::Queue.main.run</h3>

<p>TBD</p>
]]></content>
  </entry>
  
</feed>
