<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: MacRuby | MacRuby DoJo (道場)]]></title>
  <link href="http://watson1978.github.com/MacRuby-DoJo/blog/categories/macruby/atom.xml" rel="self"/>
  <link href="http://watson1978.github.com/MacRuby-DoJo/"/>
  <updated>2012-03-31T11:26:29+09:00</updated>
  <id>http://watson1978.github.com/MacRuby-DoJo/</id>
  <author>
    <name><![CDATA[Watson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dispatch::Source クラス]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/31/dispatch-source-class/"/>
    <updated>2012-03-31T10:00:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/31/dispatch-source-class</id>
    <content type="html"><![CDATA[<p>Dispatch::Source クラスは何らかのイベントが発生するときに、イベントをハンドリングして処理を実行する仕組みを提供します。</p>

<h2>Dispatch::Source クラスの定数</h2>

<ul>
<li>Dispatch::Source::DATA_ADD</li>
<li>Dispatch::Source::DATA_OR</li>
<li>Dispatch::Source::PROC</li>
<li>Dispatch::Source::SIGNAL</li>
<li>Dispatch::Source::READ</li>
<li>Dispatch::Source::WRITE</li>
<li>Dispatch::Source::VNODE</li>
<li><br/></li>
<li>Dispatch::Source::PROC_EXIT</li>
<li>Dispatch::Source::PROC_FORK</li>
<li>Dispatch::Source::PROC_EXEC</li>
<li>Dispatch::Source::PROC_SIGNAL</li>
<li><br/></li>
<li>Dispatch::Source::VNODE_DELETE</li>
<li>Dispatch::Source::VNODE_WRITE</li>
<li>Dispatch::Source::VNODE_EXTEND</li>
<li>Dispatch::Source::VNODE_ATTRIB</li>
<li>Dispatch::Source::VNODE_LINK</li>
<li>Dispatch::Source::VNODE_RENAME</li>
<li>Dispatch::Source::VNODE_REVOKE</li>
</ul>


<p>Dispatch Source の種類として、以下のものを使用できます。</p>

<table class="table">
<tr><th>定数名</th><th>GCD API での定義</th><th>内容</th></tr>
<tr>
  <td>Dispatch::Source::DATA_ADD</td>
  <td>DISPATCH_SOURCE_TYPE_DATA_ADD</td>
  <td><code>&lt;&lt;</code> メソッドを通じてイベントが発生し、処理を実行します。</td>
</tr>
<tr>
  <td>Dispatch::Source::DATA_OR</td>
  <td>DISPATCH_SOURCE_TYPE_DATA_OR</td>
  <td><code>&lt;&lt;</code> メソッドを通じてイベントが発生し、処理を実行します。</td>
</tr>
<tr>
  <td>Dispatch::Source::PROC</td>
  <td>DISPATCH_SOURCE_TYPE_PROC</td>
  <td>プロセスに関するイベントを受けると、処理を実行します。</td>
</tr>
<tr>
  <td>Dispatch::Source::SIGNAL</td>
  <td>DISPATCH_SOURCE_TYPE_SIGNAL</td>
  <td>シグナルを受けると、処理を実行します。</td>
</tr>
<tr>
  <td>Dispatch::Source::READ</td>
  <td>DISPATCH_SOURCE_TYPE_READ</td>
  <td>ファイルディスクリプタが読み込み可能になると、処理を実行します。</td>
</tr>
<tr>
  <td>Dispatch::Source::WRITE</td>
  <td>DISPATCH_SOURCE_TYPE_WRITE</td>
  <td>ファイルディスクリプタが書き込み可能になると、処理を実行します。</td>
</tr>
<tr>
  <td>Dispatch::Source::VNODE</td>
  <td>DISPATCH_SOURCE_TYPE_VNODE</td>
  <td>ファイルが削除されたりファイルシステム上で変更があると、処理を実行します。</td>
</tr>
</table>


<p>Dispatch::Source::PROC を使用する際に、以下の定数をマスクとして使用できます。</p>

<table class="table">
<tr>
  <td>Dispatch::Source::PROC_EXIT</td>
  <td>DISPATCH_PROC_EXIT</td>
  <td>プロセスが終了した。</td>
</tr>
<tr>
  <td>Dispatch::Source::PROC_FORK</td>
  <td>DISPATCH_PROC_FORK</td>
  <td>子プロセスを作成した。</td>
</tr>
<tr>
  <td>Dispatch::Source::PROC_EXEC</td>
  <td>DISPATCH_PROC_EXEC</td>
  <td>exec や posix_spawn で別のプロセスを実行した。</td>
</tr>
<tr>
  <td>Dispatch::Source::PROC_SIGNAL</td>
  <td>DISPATCH_PROC_SIGNAL</td>
  <td>シグナルを送信した。</td>
</tr>
</table>


<p>Dispatch::Source::VNODE を使用する際に、以下の定数をマスクとして使用できます。</p>

<table class="table">
<tr>
  <td>Dispatch::Source::VNODE_DELETE</td>
  <td>DISPATCH_VNODE_DELETE</td>
  <td>ファイルなどが削除された。</td>
</tr>
<tr>
  <td>Dispatch::Source::VNODE_WRITE</td>
  <td>DISPATCH_VNODE_WRITE</td>
  <td>ファイルなどのデータが変更された。</td>
</tr>
<tr>
  <td>Dispatch::Source::VNODE_EXTEND</td>
  <td>DISPATCH_VNODE_EXTEND</td>
  <td>ファイルサイズが変更された。</td>
</tr>
<tr>
  <td>Dispatch::Source::VNODE_ATTRIB</td>
  <td>DISPATCH_VNODE_ATTRIB</td>
  <td>ファイルなどのメタ情報が変更された。</td>
</tr>
<tr>
  <td>Dispatch::Source::VNODE_LINK</td>
  <td>DISPATCH_VNODE_LINK</td>
  <td>The file-system object link count changed.</td>
</tr>
<tr>
  <td>Dispatch::Source::VNODE_RENAME</td>
  <td>DISPATCH_VNODE_RENAME</td>
  <td>ファイル名が変更された。</td>
</tr>
<tr>
  <td>Dispatch::Source::VNODE_REVOKE</td>
  <td>DISPATCH_VNODE_REVOKE</td>
  <td>The file-system object was revoked.</td>
</tr>
</table>


<p>Dispatch Source は他のクラスよりもわかりにくいと思います。MacRuby のリポジトリにある <a href="https://github.com/MacRuby/MacRuby/blob/master/spec/macruby/core/gcd/source_spec.rb">source_spec.rb</a> を参考にしたりすると良いでしょう。</p>

<h2>Dispatch::Source クラスのメソッド</h2>

<h3>Dispatch::Source.new</h3>

<p>Dispatch Source を生成し返します。</p>

<ul>
<li>new(type, handle, mask, queue) { ... } -> Source

<ul>
<li>[PARAM] type:

<ul>
<li>Dispatch Source の種類を指定します。</li>
</ul>
</li>
<li>[PARAM] handle:

<ul>
<li>イベントを監視するためのディスクリプタを指定します。type に <code>DATA_ADD</code> と <code>DATA_OR</code> を指定した場合には、<code>handle</code> は <code>0</code> とします。</li>
</ul>
</li>
<li>[PARAM] mask:

<ul>
<li>マスクを指定できる Dispatch Source の種類を type で使用した際に指定します。</li>
</ul>
</li>
<li>[PARAM] queue:

<ul>
<li>イベントが発生したときに、block の処理を追加する Dispatch Queue を指定します。</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>生成した Dispatch Source のインスタンスを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Dispatch::Source.timer</h3>

<p>タイマーイベント用の Dispatch Source を生成し返します。</p>

<ul>
<li>timer(delay, interval, leeway, queue) { ... } -> Source

<ul>
<li>[PARAM] delay:

<ul>
<li>何秒後からタイマーを開始するか指定します。nil の場合には Dispatch::TIME_NOW が指定されたのと同じになります</li>
</ul>
</li>
<li>[PARAM] interval:

<ul>
<li>何秒間隔で繰り返すか指定します。</li>
</ul>
</li>
<li>[PARAM] leeway:

<ul>
<li>何秒までの遅れを許容するか指定します。</li>
</ul>
</li>
<li>[PARAM] queue:

<ul>
<li>イベントが発生したときに、block の処理を追加する Dispatch Queue を指定します。</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>生成した Dispatch Source のインスタンスを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>```ruby
gcdq = Dispatch::Queue.new('sample')
timer = Dispatch::Source.timer(0.5, 1, 0.5, gcdq) do |s|
  puts "Wake up!"
end</p>

<p>sleep 3
```</p>

<h3>Dispatch::Source#cancelled?</h3>

<p>Dispatch Source がキャンセルされているか返します。</p>

<ul>
<li>cancelled? -> bool

<ul>
<li>[RETURN]

<ul>
<li>キャンセルされていれば true、そうでなれば false を返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Dispatch::Source#cancel!</h3>

<p>Dispatch Source をキャンセルします。</p>

<ul>
<li>cancel!</li>
</ul>


<p>```ruby
gcdq = Dispatch::Queue.new('sample')
timer = Dispatch::Source.timer(1, 0.5, 0, gcdq) do |s|
  puts "Wake up!"
end</p>

<p>sleep 2</p>

<p>timer.cancel!
p timer.cancelled? # => true</p>

<p>sleep 1
```</p>

<h3>Dispatch::Source#handle</h3>

<p>Dispatch Source の handle を返します。</p>

<ul>
<li>handle

<ul>
<li>[RETURN]

<ul>
<li>Dispatch Source の handle を返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Dispatch::Source#mask</h3>

<p>Dispatch Source の mask を返します。GCD API の <code>dispatch_source_get_mask</code> に相当します。</p>

<ul>
<li>mask

<ul>
<li>[RETURN]

<ul>
<li>Dispatch Source の mask を返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Dispatch::Source#data</h3>

<p>Dispatch Source でまだ処理されていないデータを返します。GCD API の <code>dispatch_source_get_data</code> に相当します。</p>

<ul>
<li>data

<ul>
<li>[RETURN]

<ul>
<li>Dispatch Source でまだ処理されていないデータを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>Dispatch Source の種類によって、以下のようなデータを返します。</p>

<table class="table">
<tr>
  <td>Dispatch::Source::DATA_ADD</td>
  <td><code>&lt;&lt;</code>で送信されたデータ</td>
</tr>
<tr>
  <td>Dispatch::Source::DATA_OR</td>
  <td><code>&lt;&lt;</code>で送信されたデータ</td>
</tr>
<tr>
  <td>Dispatch::Source::PROC</td>
  <td>Dispatch::Source::PROC_EXIT、Dispatch::Source::PROC_FORK、Dispatch::Source::PROC_EXEC、Dispatch::Source::PROC_SIGNAL のいずれか</td>
</tr>
<tr>
  <td>Dispatch::Source::SIGNAL</td>
  <td>シグナルの番号</td>
</tr>
<tr>
  <td>Dispatch::Source::READ</td>
  <td>読み込み可能なバイト数</td>
</tr>
</table>


<p><code>ruby
gcdq = Dispatch::Queue.new('sample')
src = Dispatch::Source.new(Dispatch::Source::DATA_ADD, 0, 0, gcdq) do |s|
  puts s.data
end
src &lt;&lt; 1
sleep 0.5
</code></p>

<h3>Dispatch::Source#&lt;&lt;</h3>

<p>Dispatch::Source::DATA_ADD と Dispatch::Source::DATA_OR を指定した Dispatch Source で使用します。指定したデータを Dispatch Source の block へ送信します。GCD API の <code>dispatch_source_get_data</code> に相当します。</p>

<ul>
<li>&lt;&lt; data</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dispatch::Semaphore クラス]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/31/dispatch-semaphore-class/"/>
    <updated>2012-03-31T10:00:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/31/dispatch-semaphore-class</id>
    <content type="html"><![CDATA[<p>Dispatch::Semaphore クラスは排他制御機能を提供します。たとえば、Concurrent Dispatch Queue を用いて並行処理をしていた際に計算結果を 1 つの配列に格納する場合などに Dispatch Semaphore で排他制御を行います。</p>

<h2>Dispatch::Semaphore クラスのメソッド</h2>

<h3>Dispatch::Semaphore.new</h3>

<p>Dispatch Semaphore を生成し返します。GCD API の <code>dispatch_semaphore_create</code> に相当します。</p>

<ul>
<li>new(count) -> Semaphore

<ul>
<li>[PARAM] count:

<ul>
<li>セマフォのカウンタの初期値を指定します。</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>生成した Dispatch Semaphore のインスタンスを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Dispatch::Semaphore#wait</h3>

<p>Dispatch::Semaphore#signal が呼び出されセマフォのカウンタが 1 以上になるまで待ちます。カウンタが 1 以上になると 1 減算して待ち状態が解除されます。GCD API の <code>dispatch_semaphore_wait</code> に相当します。</p>

<ul>
<li>wait(timeout = nil) -> bool

<ul>
<li>[PARAM] timeout:

<ul>
<li>タイムアウト時間を指定します。省略された場合には Dispatch::TIME_FOREVER が指定されたのと同じになります。</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>Dispatch::Semaphore#signal で wait が解除された場合には true、タイムアウトした場合には false を返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<p><code>ruby
gcdq = Dispatch::Queue.new('sample')
sema = Dispatch::Semaphore.new(0)
gcdq.async {
  sleep 1
  puts "Hello"
  sema.signal
}
sema.wait #=&gt; true
</code></p>

<h3>Dispatch::Semaphore#signal</h3>

<p>Dispatch Semaphore のカウンタを 1 加算します。GCD API の <code>dispatch_semaphore_signal</code> に相当します。</p>

<ul>
<li>signal -> bool

<ul>
<li>[RETURN]

<ul>
<li>セマフォを待っているスレッドがなければ true、それ以外で false を返します。</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dispatch::Queue クラス]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/31/dispatch-queue-class/"/>
    <updated>2012-03-31T10:00:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/31/dispatch-queue-class</id>
    <content type="html"><![CDATA[<p>GCD を用いると簡単にマルチスレッドで処理を行うことができます。私たちは、GCD を使いたい処理を書き、適切な Dispatch Queue へ追加するだけです。あとは、GCD が必要なスレッドを生成して処理してくれます。</p>

<p>Dispatch Queue の種類として、以下の 4 つがあります。</p>

<ul>
<li>Serial Dispatch Queue</li>
<li>Concurrent Dispatch Queue</li>
<li>Main Dispatch Queue (Serial Dispatch Queue)</li>
<li>Global Dispatch Queue (Concurrent Dispatch Queue)</li>
</ul>


<p>Serial Dispatch Queue はタスクを逐次的に実行する際に用い、Concurrent Dispatch Queue は平行して複数の処理を行う際に用います。</p>

<p>Main Dispatch Queue と Global Dispatch Queue はあらかじめ用意されており、<code>new</code> でインスタンスを生成しなくとも使うことができます。Main Dispatch Queue は Serial Dispatch Queue の、Global Dispatch Queue は Concurrent Dispatch Queue の一種となっています。</p>

<h2>Dispatch::Queue クラスのメソッド</h2>

<h3>Dispatch::Queue.new</h3>

<p>逐次処理用に Serial Dispatch Queue を生成します。</p>

<ul>
<li>new(label) -> Queue

<ul>
<li>[PARAM] label:

<ul>
<li>生成する Queue に付与するユニークなラベルを指定します。</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>生成した Dispatch Queue のインスタンスを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Dispatch::Queue.concurrent</h3>

<p>並行処理用に Global Dispatch Queue を返します。Mac OS X 10.7 でビルドされた MacRuby では、優先度を指定すると Concurrent Dispatch Queue を返します。</p>

<ul>
<li>concurrent(priority = :default) -> Queue

<ul>
<li>[PARAM] priority:

<ul>
<li>生成する Queue の優先度を指定します。<code>:high</code>、<code>:low</code>、<code>:default</code> と Mac OS X 10.7 からは  <code>:background</code> も指定できます。</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>Dispatch Queue のインスタンスを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Dispatch::Queue.main</h3>

<p>Main Dispatch Queue を返します。</p>

<ul>
<li>main -> Queue

<ul>
<li>[RETURN]

<ul>
<li>Main Dispatch Queue のインスタンスを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Dispatch::Queue.current</h3>

<p>現在使用している Dispatch Queue を返します。GCD タスクの block 内で呼び出すと、そのタスクを実行している Queue が返ります。block の外側で呼び出すと Main Dispatch Queue が返ります。</p>

<ul>
<li>current -> Queue

<ul>
<li>[RETURN]

<ul>
<li>現在使用している Dispatch Queue のインスタンスを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>```ruby
gcdq = Dispatch::Queue.new('sample')
gcdq.after(Dispatch::TIME_NOW) {
  q = Dispatch::Queue.current
  puts q.label # => sample
}</p>

<p>sleep 1</p>

<p>q = Dispatch::Queue.current
puts q.label # => com.apple.main-thread
```</p>

<h3>Dispatch::Queue#apply</h3>

<p>指定した回数 block を Dispatch Queue に追加し、それらの処理がすべて完了するまで待ちます。GCD API の <code>dispatch_apply</code> に相当します。</p>

<ul>
<li>apply(iterations) {|index| ... }

<ul>
<li>[PARAM] iterations:

<ul>
<li>Dispatch Queue に block を追加する回数を指定します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<p><code>ruby
gcdq = Dispatch::Queue.new('sample')
@result = []
gcdq.apply(5) {|i| @result[i] = i*i }
p @result  #=&gt; [0, 1, 4, 9, 16, 25]
</code></p>

<h3>Dispatch::Queue#async</h3>

<p>長時間にわたる処理など、非同期的に実行したい block を Dispatch Queue に追加します。group を指定すると GCD API の <code>dispatch_group_async</code> に、それ以外は <code>dispatch_async</code> に相当します。</p>

<ul>
<li>async(group = nil) { ... }

<ul>
<li>[PARAM] group:

<ul>
<li>group を指定することで、Dispatch Queue に追加するタスクが group と関連づけられます。</li>
</ul>
</li>
</ul>
</li>
</ul>


<p><code>ruby
gcdq = Dispatch::Queue.new('sample')
@i = 0
gcdq.async { @i = 42 }
while @i == 0 do; end
p @i #=&gt; 42
</code></p>

<p>group を用いることで、Dispatch Queue に追加したすべてのタスクが完了するのを待ち合わせることができたりします。</p>

<p><code>ruby
gcdq = Dispatch::Queue.new('sample')
gcdg = Dispatch::Group.new
@i = 0
gcdq.async(gcdg) { @i = 42 }
gcdg.wait
p @i #=&gt; 42
</code></p>

<h3>Dispatch::Queue#sync</h3>

<p>同期的に実行したい block を Dispatch Queue に追加します。処理が完了するまで待ちます。GCD API の <code>dispatch_sync</code> に相当します。</p>

<ul>
<li>sync { ... }</li>
</ul>


<p><code>ruby
gcdq = Dispatch::Queue.new('sample')
@i = 0
gcdq.sync { @i = 42 }
p @i #=&gt; 42
</code></p>

<h3>Dispatch::Queue#after</h3>

<p>指定した時間が経過した後、block を Dispatch Queue に追加します。</p>

<ul>
<li>after(delay) { ... }

<ul>
<li>[PARAM] delay:

<ul>
<li>何秒後に block を Dispatch Queue に追加するか指定します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>```ruby
gcdq = Dispatch::Queue.new('sample')
gcdq.after(0.5) { puts "Hello" }</p>

<p>sleep 1
```</p>

<h3>Dispatch::Queue#label</h3>

<p>Dispatch Queue のラベルを返します。GCD API の <code>dispatch_queue_get_label</code> に相当します。</p>

<ul>
<li>label -> String

<ul>
<li>[RETURN]

<ul>
<li>Dispatch Queue のラベルを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<p><code>ruby
gcdq = Dispatch::Queue.new('sample')
gcdq.label # =&gt; 'sample'
</code></p>

<h3>Dispatch::Queue#to_s</h3>

<p>Dispatch::Queue#label の別名です。</p>

<h3>Dispatch::Queue#barrier_async</h3>

<p>TBD</p>

<h3>Dispatch::Queue#barrier_sync</h3>

<p>TBD</p>

<h3>Dispatch::Queue.main.run</h3>

<p>TBD</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dispatch::Group クラス]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/31/dispatch-group-class/"/>
    <updated>2012-03-31T10:00:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/31/dispatch-group-class</id>
    <content type="html"><![CDATA[<p>Dispatch Queue に追加された複数の処理がすべて完了するまで待ちたい場合があるかと思います。そのような場合に Dispatch Group を用います。</p>

<h3>Dispatch::Group.new</h3>

<p>Dispatch Group を生成します。</p>

<ul>
<li>new -> Group

<ul>
<li>[RETURN]

<ul>
<li>生成した Dispatch Group のインスタンスを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Dispatch::Group#notify</h3>

<p>Dispatch Queue のタスクがすべて完了すると実行する block を Dispatch Queue に追加します。GCD API の <code>dispatch_group_notify</code> に相当します。</p>

<ul>
<li>notify(queue) { ... }

<ul>
<li>[PARAM] queue:

<ul>
<li>block を追加する Dispatch Queue を指定します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<p><code>ruby
gcdq = Dispatch::Queue.new('sample')
gcdg = Dispatch::Group.new
@i = 0
gcdq.async { @i = 42 }
gcdg.notify(gcdq) { p @i } # =&gt; 42
</code></p>

<h3>Dispatch::Group#on_completion</h3>

<p>Dispatch::Group#notify の別名です。</p>

<h3>Dispatch::Group#wait</h3>

<p>Dispatch Group に所属しているDispatch Queue のタスクがすべて完了するのを待ちます。GCD API の <code>dispatch_group_wait</code> に相当します。</p>

<ul>
<li>wait(timeout = nil) -> bool

<ul>
<li>[PARAM] timeout:

<ul>
<li>タイムアウト時間を指定します。省略された場合には Dispatch::TIME_FOREVER が指定されたのと同じになります。</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>すべてのタスクが完了していれば true、タイムアウトにより完了していないタスクがあれば false を返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>```ruby
gcdq = Dispatch::Queue.new('sample')
gcdg = Dispatch::Group.new
gcdq.async(gcdg) { sleep 5 }
gcdg.wait # => true</p>

<p>gcdq.async(gcdg) { sleep 5 }
gcdg.wait(1) # => false
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dispatch クラス]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/31/dispatch-class/"/>
    <updated>2012-03-31T10:00:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/31/dispatch-class</id>
    <content type="html"><![CDATA[<p>Mac OS X 10.6 から追加された <a href="https://developer.apple.com/library/mac/#documentation/Performance/Reference/GCD_libdispatch_Ref/Reference/reference.html">Grand Central Dispatch (GCD)</a> を利用するために、MacRuby には Dispatch モジュールと、以下のようにいくつかのクラスがあります。</p>

<ul>
<li>Dispatch クラス</li>
<li><a href="/blog/2012/03/31/dispatch-queue-class/">Dispatch::Queue クラス</a></li>
<li><a href="/blog/2012/03/31/dispatch-group-class/">Dispatch::Group クラス</a></li>
<li><a href="/blog/2012/03/31/dispatch-source-class/">Dispatch::Source クラス</a></li>
<li><a href="/blog/2012/03/31/dispatch-semaphore-class/">Dispatch::Semaphore クラス</a></li>
</ul>


<p>RubyGems の <a href="https://github.com/gunn/Dispatch">Dispatch</a> ライブラリを用いると、より簡単に GCD を使うこともできます。</p>

<h2>Dispatch クラスの定数</h2>

<h3>Dispatch::TIME_NOW</h3>

<p>「処理をすぐに開始する」と指示するときに使用します。GCD API で <code>DISPATCH_TIME_NOW</code> として定義されている定数と同じ定数です。</p>

<p>```ruby
gcdq = Dispatch::Queue.new('sample')
gcdq.after(Dispatch::TIME_NOW) { puts "Hello" }</p>

<p>sleep 0.5
```</p>

<h3>Dispatch::TIME_FOREVER</h3>

<p>処理が完了するのをタイムアウトなしで待ち続けたりするときに使用します。GCD API で <code>DISPATCH_TIME_FOREVER</code> として定義されている定数と同じ定数です。</p>

<p>```ruby
gcdq = Dispatch::Queue.new('sample')
sema = Dispatch::Semaphore.new(0)
gcdq.async {
  puts "Hello, "
  sleep 1
  sema.signal
}</p>

<p>puts "Waiting..."</p>

<p>sema.wait(Dispatch::TIME_FOREVER)
puts "World"
```</p>

<h2>Dispatch クラスのメソッド</h2>

<h3>Dispatch#resume!</h3>

<p>中断されている処理を再開します。GCD API の <code>dispatch_resume</code> に相当します。</p>

<ul>
<li>resume!</li>
</ul>


<p>```ruby
gcdq = Dispatch::Queue.new('sample')
gcdq.after(Dispatch::TIME_NOW) {
  sleep 0.5
  puts "Hello"
}
gcdq.suspend!
gcdq.suspended?  #=> true
gcdq.resume!</p>

<p>sleep 1
```</p>

<h3>Dispatch#suspend!</h3>

<p>処理を中断します。GCD API の <code>dispatch_suspend</code> に相当します。</p>

<ul>
<li>suspend!</li>
</ul>


<h3>Dispatch#suspended?</h3>

<p>処理が中断されているかを返します。</p>

<ul>
<li>suspended? -> bool

<ul>
<li>[RETURN]

<ul>
<li>処理が中断されていれば true、そうでなければ false を返します。</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
