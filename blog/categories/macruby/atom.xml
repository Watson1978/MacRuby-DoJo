<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: MacRuby | MacRuby DoJo (道場)]]></title>
  <link href="http://watson1978.github.com/MacRuby-DoJo/blog/categories/macruby/atom.xml" rel="self"/>
  <link href="http://watson1978.github.com/MacRuby-DoJo/"/>
  <updated>2012-05-06T16:58:29+09:00</updated>
  <id>http://watson1978.github.com/MacRuby-DoJo/</id>
  <author>
    <name><![CDATA[Watson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using the DTrace]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/04/15/dtrace/"/>
    <updated>2012-04-15T00:00:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/04/15/dtrace</id>
    <content type="html"><![CDATA[<p><a href="http://en.wikipedia.org/wiki/DTrace">DTrace</a> is a dynamic tracing framework, and you may trace application without changing by DTrace. MacRuby provides some probe for DTrace to trace the methods behavior.</p>

<table class="table">
<tr><th>Probe Name</th><th>Calling timing</th><th>arg0</th><th>arg1</th><th>arg2</th><th>arg3</th></tr>
<tr><td>method-entry</td><td>At the start of the method</td><td>Class name</td><td>Method name</td><td>File name</td><td>Line number</td></tr>
<td>method-return</td><td>At the end of the method</td><td>Class name</td><td>Method name</td><td>File name</td><td>Line number</td></tr>
<td>raise</td><td>An exception raises</td><td>Class name</td><td>File name</td><td>Line number</td><td>-</td></tr>
</table>


<p>Using these probes, you may easily trace the count of method calling or trace the execution time.</p>

<p>Here is DTrace script which trace the total execution time of String methods.</p>

<p>```d
/<em> time.d </em>/</p>

<h1>pragma D option quiet</h1>

<p>macruby$target:::method-entry
/ copyinstr(arg0) == "String" /  /<em> invokes only String methods </em>/
{</p>

<pre><code>self-&gt;starttime = walltimestamp / 1000;
</code></pre>

<p>}</p>

<p>macruby$target:::method-return
/ copyinstr(arg0) == "String" /  /<em> invokes only String methods </em>/
{</p>

<pre><code>@invoked_time[copyinstr(arg0), copyinstr(arg1)] = sum((walltimestamp / 1000) - self-&gt;starttime);
</code></pre>

<p>}</p>

<p>END
{</p>

<pre><code>printf("\n");
printf("%-10s  %-15s  %s\n", "CLASS", "METHOD", "TOTAL TIME µsec");
printf("--------------------------------------------------------------------------------\n");
printa("%-10s  %-15s  %@d\n", @invoked_time);
</code></pre>

<p>}
```</p>

<p>Prepare your application to trace the execution time.</p>

<p>```ruby</p>

<h1>test.rb</h1>

<p>1000.times do
  str = "abc\n" * 1000
  str.split("\n")
end
```</p>

<p>You may retrieve the result as following.</p>

<p>```
$ sudo dtrace -qs time.d  -c "macruby test.rb"</p>

<h2>CLASS       METHOD           TOTAL TIME µsec</h2>

<p>String      *:               6578
String      split:           1275979
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DTrace を使ってみよう]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/04/14/dtrace/"/>
    <updated>2012-04-14T21:00:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/04/14/dtrace</id>
    <content type="html"><![CDATA[<p>DTrace を使用することで、システムやアプリケーションに手を加えることなく、それらをトレースすることができます。MacRuby はメソッドの振る舞いをトレースするために、いくつかプローブというものを用意しています。</p>

<table class="table">
<tr><th>プローブ名</th><th>実行タイミング</th><th>arg0</th><th>arg1</th><th>arg2</th><th>arg3</th></tr>
<tr><td>method-entry</td><td>メソッド呼出開始</td><td>クラス名</td><td>メソッド名</td><td>ソースファイル名</td><td>行番号</td></tr>
<td>method-return</td><td>メソッド呼出終了</td><td>クラス名</td><td>メソッド名</td><td>ソースファイル名</td><td>行番号</td></tr>
<td>raise</td><td>例外発生時</td><td>クラス名</td><td>ソースファイル名</td><td>行番号</td><td>-</td></tr>
</table>


<p>これらを使用することで、メソッドが呼び出された回数や実行時間を簡単に計測できます。</p>

<p>以下は String クラスのメソッドの合計実行時間を計測するための DTrace スクリプトです。</p>

<p>```d</p>

<h1>!/usr/sbin/dtrace -s</h1>

<h1>pragma D option quiet</h1>

<p>macruby$target:::method-entry
/ copyinstr(arg0) == "String" /  /<em> invokes only String methods </em>/
{</p>

<pre><code>self-&gt;starttime = walltimestamp / 1000;
</code></pre>

<p>}</p>

<p>macruby$target:::method-return
/ copyinstr(arg0) == "String" /  /<em> invokes only String methods </em>/
{</p>

<pre><code>@invoked_time[copyinstr(arg0), copyinstr(arg1)] = sum((walltimestamp / 1000) - self-&gt;starttime);
</code></pre>

<p>}</p>

<p>END
{</p>

<pre><code>printf("\n");
printf("%-10s  %-15s  %s\n", "CLASS", "METHOD", "TOTAL TIME µsec");
printf("--------------------------------------------------------------------------------\n");
printa("%-10s  %-15s  %@d\n", @invoked_time);
</code></pre>

<p>}
```</p>

<p>実行時間を計測する Ruby のプログラムを用意します。</p>

<p>```ruby</p>

<h1>test.rb</h1>

<p>1000.times do
  str = "abc\n" * 1000
  str.split("\n")
end
```</p>

<p>これらを実行すると以下のような結果となります。</p>

<p>```
$ sudo dtrace -qs time.d  -c "macruby test.rb"</p>

<h2>CLASS       METHOD           TOTAL TIME µsec</h2>

<p>String      *:               6578
String      split:           1275979
```</p>

<p>DTrace については、以下のサイトなどが有益です。</p>

<ul>
<li><a href="http://docs.oracle.com/cd/E24845_01/html/E22189/toc.html">DTrace ユーザーガイド</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sandbox Class]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/04/14/sandbox-class/"/>
    <updated>2012-04-14T14:00:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/04/14/sandbox-class</id>
    <content type="html"><![CDATA[<p>MacRuby has the Sandbox class which restricts the access to network, to files, etc. Sandbox class is implemented using the <a href="https://developer.apple.com/library/mac/#documentation/Darwin/Reference/ManPages/man7/sandbox.7.html">sandbox(7)</a> in MacRuby.</p>

<p>You can restrict easily your application to access the network by <code>Sandbox.no_network.apply!</code>. Ruby methods and Cocoa APIs both are restricted by the Sandbox.</p>

<p>```ruby</p>

<blockquote><blockquote><p>framework 'Cocoa'
require 'socket'
Sandbox.no_network.apply!
Socket.gethostbyaddr("apple.com")
SocketError: host not found</p>

<p>NSHost.hostWithName("apple.com")
=> <NSHost 0x40121eb80> (null) ((
) (
))
```</p></blockquote></blockquote>

<p>The Sandbox is a good companion to the Ruby standard $SAFE functionality, you may use the Sandbox and $SAFE at the same time.</p>

<p>The Sandbox will be able to restrict your application,</p>

<ul>
<li>TCP/IP networking is prohibited.</li>
<li>All sockets-based networking is prohibited.</li>
<li>File system writes are prohibited.</li>
<li>File system writes are restricted to temporary folders.</li>
<li>All operating system services are prohibited.</li>
</ul>


<p>As notes,</p>

<ul>
<li>Restriction is not able to change after applying.</li>
<li>Restricts with respect to each process.</li>
</ul>


<h2>Methods in Sandbox Class</h2>

<h3>Sandbox.no_internet</h3>

<p>Restricts TCP/IP networking in current process.</p>

<ul>
<li>no_internet -> Sandbox

<ul>
<li>[RETURN]

<ul>
<li>Returns a Sandbox instance.</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Sandbox.no_network</h3>

<p>Restricts all sockets-based networking in current process.</p>

<ul>
<li>no_network -> Sandbox

<ul>
<li>[RETURN]

<ul>
<li>Returns a Sandbox instance.</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Sandbox.no_writes</h3>

<p>Restricts to write in current process.</p>

<ul>
<li>no_writes -> Sandbox

<ul>
<li>[RETURN]

<ul>
<li>Returns a Sandbox instance.</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Sandbox.temporary_writes</h3>

<p>Restricts to write outside temporary folders in current process.</p>

<ul>
<li>temporary_writes -> Sandbox

<ul>
<li>[RETURN]

<ul>
<li>Returns a Sandbox instance.</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Sandbox.pure_computation</h3>

<p>Restricts all operating system services in current process.</p>

<ul>
<li>pure_computation -> Sandbox

<ul>
<li>[RETURN]

<ul>
<li>Returns a Sandbox instance.</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Sandbox#apply!</h3>

<p>Applies the restriction.</p>

<ul>
<li>apply!</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Boxed Class]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/04/02/boxed-class/"/>
    <updated>2012-04-02T14:00:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/04/02/boxed-class</id>
    <content type="html"><![CDATA[<p>Boxed class is used to retrieve a structure information that is defined in Cocoa. All structures allow to retrieve an information by Boxed Class.</p>

<h2>Methods in Boxed Class</h2>

<h3>Boxed.type</h3>

<p>Returns a structure type information.</p>

<ul>
<li>type -> String

<ul>
<li>[RETURN]

<ul>
<li>Returns a structure type information.</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>```ruby</p>

<blockquote><blockquote><p>framework 'Cocoa'
NSRect.type
=> "{CGRect={CGPoint=dd}{CGSize=dd}}"
```</p></blockquote></blockquote>

<h3>Boxed.opaque?</h3>

<p>Returns whether structure is opaque.</p>

<ul>
<li>opaque? -> bool

<ul>
<li>[RETURN]

<ul>
<li>Returns a true if structure is opaque. Otherwise, returns a false.</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>```ruby</p>

<blockquote><blockquote><p>framework 'Cocoa'
NSRect.opaque?
=> false
NSModalSession.opaque?
=> true</p>

<p>```</p></blockquote></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pointer Class]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/04/02/pointer-class/"/>
    <updated>2012-04-02T10:00:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/04/02/pointer-class</id>
    <content type="html"><![CDATA[<p>If you use the Cocoa APIs, you might have to pass a pointer variable into argument of API. Some cases, you might need a variable such as <code>NSError* error;</code>.</p>

<p>To create a pointer instance as <code>NSError* error;</code>, you can write a program as following.</p>

<p><code>ruby
error = Pointer.new('@')
</code></p>

<p>You can create other Pointer instance if you pass a pointer type into <code>Pointer.new</code>. You can find the other pointer type in <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html">Type Encodings</a>.</p>

<p>Here is a few detail sample about Pointer.</p>

<p>```ruby
framework 'Cocoa'</p>

<p>error = Pointer.new('@')
url = NSURL.URLWithString("http://your_url")
string = NSString.stringWithContentsOfURL(url, encoding: NSUTF8StringEncoding, error: error)</p>

<p>if error[0]
  puts error[0].description
  raise
end
puts string
```</p>

<p>If an error occurs with <code>NSString.stringWithContentsOfURL</code>, an error is stored into <code>error[0]</code>.</p>

<p>To create a Pointer instance such as <code>char* name[5];</code>, specify a size in the second argument.</p>

<p><code>ruby
name = Pointer.new('c', 5)
name[0] = 'a'
name[1] = 'b'
name[2] = 'c'
name[3] = 'd'
name[4] = 'e'
</code></p>

<p>To create a Pointer instance of structure such as <code>NSRect *rect[2];</code>, you may write a program as following.</p>

<p><code>ruby
rect = Pointer.new("{CGRect={CGPoint=dd}{CGSize=dd}}", 2)
</code></p>

<p>Or,</p>

<p><code>ruby
rect = Pointer.new(NSRect.type, 2)
</code></p>

<h2>Alias of Pointer Types</h2>

<p>You may think difficult the pointer types such as <code>'@'</code>. MacRuby has the alias of pointer types.</p>

<p><code>ruby
error = Pointer.new(:object)  # alias of '@'
</code></p>

<table class="table">
<tr><th>Meaning</th><th>Pointer Types</th><th>Alias</th>
<tr><td>char</td><td>Pointer.new('c')</td><td>Pointer.new(:char)</td></tr>
<tr><td>unsigned char</td><td>Pointer.new('C')</td><td>Pointer.new(:uchar)</td></tr>
<tr><td>short</td><td>Pointer.new('s')</td><td>Pointer.new(:short)</td></tr>
<tr><td>unsigned short</td><td>Pointer.new('S')</td><td>Pointer.new(:ushort)</td></tr>
<tr><td>int</td><td>Pointer.new('i')</td><td>Pointer.new(:int)</td></tr>
<tr><td>unsigned int</td><td>Pointer.new('I')</td><td>Pointer.new(:uint)</td></tr>
<tr><td>long</td><td>Pointer.new('l')</td><td>Pointer.new(:long)</td></tr>
<tr><td>unsigned long</td><td>Pointer.new('L')</td><td>Pointer.new(:ulong)</td></tr>
<tr><td>long long</td><td>Pointer.new('q')</td><td>Pointer.new(:long_long)</td></tr>
<tr><td>unsigned long long</td><td>Pointer.new('Q')</td><td>Pointer.new(:ulong_long)</td></tr>
<tr><td>float</td><td>Pointer.new('f')</td><td>Pointer.new(:float)</td></tr>
<tr><td>double</td><td>Pointer.new('d')</td><td>Pointer.new(:double)</td></tr>
<tr><td>character string (char *)</td><td>Pointer.new('*')</td><td>Pointer.new(:string)</td></tr>
<tr><td>pointer</td><td>Pointer.new('^')</td><td>Pointer.new(:pointer)</td></tr>
<tr><td>object</td><td>Pointer.new('@')</td><td>Pointer.new(:object)<br>Pointer.new(:id)</td></tr>
<tr><td>class object (Class)</td><td>Pointer.new('#')</td><td>Pointer.new(:class)</td></tr>
<tr><td>boolean</td><td>Pointer.new('B')</td><td>Pointer.new(:boolean)<br>Pointer.new(:bool)</td></tr>
<tr><td>method selector (SEL)</td><td>Pointer.new(':')</td><td>Pointer.new(:selector)<br>Pointer.new(:sel)</td></tr>
</table>


<h2>Methods in Pointer Class</h2>

<h3>Pointer.new</h3>

<p>Returns a new Pointer instance.</p>

<ul>
<li>new(type, size = 1) -> Pointer

<ul>
<li>[PARAM] type:

<ul>
<li>Specifies a pointer type.</li>
</ul>
</li>
<li>[PARAM] size:

<ul>
<li>Specifies a size to allocate an array.</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>Returns a new Pointer instance.</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Pointer.new_with_type</h3>

<p>This method is alias of <code>Pointer.new</code>.</p>

<h3>Pointer.magic_cookie</h3>

<p>Returns a new Pointer instance which cast an immediate value to (void *).</p>

<ul>
<li>magic_cookie(val) -> Pointer

<ul>
<li>[PARAM] val:

<ul>
<li>Passes an immediate value to cast.</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>Returns a new Pointer instance.</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Pointer#type</h3>

<p>Returns a pointer type.</p>

<ul>
<li>type -> String

<ul>
<li>[RETURN]

<ul>
<li>Returns a string as pointer type.</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>```ruby</p>

<blockquote><blockquote><p>framework 'Cocoa'
pointer = Pointer.new(NSRect.type)
pointer.type
=> "{CGRect={CGPoint=dd}{CGSize=dd}}"
```</p></blockquote></blockquote>

<h3>Pointer#cast!</h3>

<p>Changes a pointer type.</p>

<ul>
<li>cast!(type) -> self

<ul>
<li>[PARAM] type:

<ul>
<li>Specifies a new point type.</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>Returns a self which pointer type was changed.</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>```ruby</p>

<blockquote><blockquote><p>pointer = Pointer.new('i')
pointer.type
=> "i"
pointer.cast!('I')
pointer.type
=> "I"
```</p></blockquote></blockquote>

<h3>Pointer#[]</h3>

<p>Get a value at nth position.</p>

<ul>
<li>self[nth]

<ul>
<li>[PARAM] nth:

<ul>
<li>Specifies a position to get a value.</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>Returns a value.</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Pointer#[]=</h3>

<p>Set a value into nth position.</p>

<ul>
<li>self[nth] = val

<ul>
<li>[PARAM] nth:

<ul>
<li>Specifies a position to set a value.</li>
</ul>
</li>
<li>[PARAM] val:

<ul>
<li>Passes a value to set.</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>Returns a <code>val</code>.</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Pointer#value</h3>

<p>Get a value at 0 position.</p>

<ul>
<li>value

<ul>
<li>[RETURN]

<ul>
<li>Returns a value at 0 position.</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>```ruby
pointer = Pointer.new('c')
pointer[0] = 42</p>

<p>pointer[0]    # => 42
pointer.value # => 42
```</p>

<h3>Pointer#assign</h3>

<p>Set a value into 0 position.</p>

<ul>
<li>assign(val)

<ul>
<li>[PARAM] val:

<ul>
<li>Specifies a position to set a value.</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>Returns a <code>val</code>.</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Pointer#+</h3>

<p>Returns a new Pointer instance from the specified offset.</p>

<ul>
<li>self + offset -> Pointer

<ul>
<li>[PARAM] offset:

<ul>
<li>Specifies an offset.</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>Returns a new Pointer instance</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>```ruby
name = Pointer.new('c', 5)
name[0] = 10
name[1] = 11
name[2] = 12
name[3] = 13
name[4] = 14</p>

<p>tmp = name + 3
2.times do |i|
  p tmp[i] # => 13, 14
end
```</p>

<h3>Pointer#-</h3>

<p>Returns a new Pointer instance from the specified offset.</p>

<ul>
<li>self - offset -> Pointer

<ul>
<li>[PARAM] offset:

<ul>
<li>Specifies an offset.</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>Returns a new Pointer instance</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>Pointer#to_object</h3>

<p>TBD</p>
]]></content>
  </entry>
  
</feed>
