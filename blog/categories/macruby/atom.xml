<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: MacRuby | MacRuby DoJo (道場)]]></title>
  <link href="http://watson1978.github.com/MacRuby-DoJo/blog/categories/macruby/atom.xml" rel="self"/>
  <link href="http://watson1978.github.com/MacRuby-DoJo/"/>
  <updated>2012-03-26T13:21:18+09:00</updated>
  <id>http://watson1978.github.com/MacRuby-DoJo/</id>
  <author>
    <name><![CDATA[Watson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MacRuby 独自のメソッド]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/26/original-methods/"/>
    <updated>2012-03-26T12:00:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/26/original-methods</id>
    <content type="html"><![CDATA[<p>MacRuby には CRuby や Cocoa API に存在しない、独自のメソッドやクラスが存在します。ここでは、独自メソッドについて説明します。</p>

<h2>独自メソッド</h2>

<h3>String#transform</h3>

<p>文字列を大文字や小文字、または別の言語の文字列に変形することができます。<a href="http://site.icu-project.org/">ICU</a> の <a href="http://userguide.icu-project.org/transforms/general">Transforms</a> という機能を用いて実装されています。</p>

<ul>
<li>transform(pattern) -> String

<ul>
<li>[PARAM] pattern:

<ul>
<li>どのような文字列に変換するかを指定します。</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>変換結果の文字列を返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>```</p>

<blockquote><blockquote><p>"hello".transform("Upper")
=> "HELLO"
"HELLO".transform("Lower")
=> "hello"
"hello".transform("Hiragana")
=> "へっろ"
"hello".transform("Greek")
=> "ἑλλο"
```</p></blockquote></blockquote>

<h3>String#to_data</h3>

<p>文字列から <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/NSData_Class/Reference/Reference.html">NSData</a> クラスのオブジェクトを生成し返します。</p>

<ul>
<li>to_data -> NSData

<ul>
<li>[RETURN]

<ul>
<li>NSData オブジェクトを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>```</p>

<blockquote><blockquote><p>"foo".to_data
=> <666f6f>
"foo".to_data.class
=> __NSCFData
```</p></blockquote></blockquote>

<h3>NSData#to_str</h3>

<p>文字列を伴う NSData オブジェクトから、文字列を返します。</p>

<ul>
<li>to_str -> String

<ul>
<li>[RETURN]

<ul>
<li>文字列を返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>```</p>

<blockquote><blockquote><p>data = "foo".to_data
=> <666f6f>
data.to_str
=> "foo"
```</p></blockquote></blockquote>

<h3>String#pointer</h3>

<p>文字列から Pointer クラスのオブジェクトを返します。オブジェクトは <code>unsigned char*</code> の変数に対応します。Cocoa API では String オブジェクトではなく、文字列のポインタ変数を受け付けるメソッドがあります。それらのメソッドに渡すためのデータを用意するために使用します。</p>

<ul>
<li>pinter -> Pointer

<ul>
<li>[RETURN]

<ul>
<li>Pointer オブジェクトを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>```</p>

<blockquote><blockquote><p>pointer = "foo".pointer
=> #&lt;Pointer:0x4007ac580>
data = NSData.dataWithBytes(pointer, length: "foo".length)
=> <666f6f>
data.to_str
=> "foo"
```</p></blockquote></blockquote>

<h3>Kernel.framework</h3>

<p>フレームワークをロードします。</p>

<ul>
<li>framework -> bool

<ul>
<li>[RETURN]

<ul>
<li>フレームワークのロードに成功すれば true、失敗した場合には false を返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>```</p>

<blockquote><blockquote><p>framework 'Foundation'
=> true
```</p></blockquote></blockquote>

<h3>Kernel.load_bridge_support_file</h3>

<p>Bridge Support ファイルをロードします。</p>

<ul>
<li>load_bridge_support_file(filename) -> self</li>
</ul>


<p>```</p>

<blockquote><blockquote><p>load_bridge_support_file("Foo.bridgesupport")
=> main
```</p></blockquote></blockquote>

<h3>Kernel.load_plist</h3>

<p>plist 形式の文字列から Hash オブジェクトに変換し返します。</p>

<ul>
<li>load_plist(string) -> Hash

<ul>
<li>[PARAM] string:

<ul>
<li>plist データの文字列を渡します。</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>plist データを Hash に変換したオブジェクトを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>```</p>

<blockquote><blockquote><p>data = File.read('StopWatch-Info.plist')
load_plist(data)
=> {"CFBundleName"=>"${PRODUCT_NAME}", "CFBundleIdentifier"=>"Watson.${PRODUCT_NAME:rfc1034identifier}", "CFBundleInfoDictionaryVersion"=>"6.0", "CFBundleVersion"=>"1", "CFBundleExecutable"=>"${EXECUTABLE_NAME}", "NSPrincipalClass"=>"NSApplication", "CFBundlePackageType"=>"APPL", "CFBundleIconFile"=>"MacRuby.icns", "CFBundleSignature"=>"????", "NSMainNibFile"=>"MainMenu", "LSMinimumSystemVersion"=>"${MACOSX_DEPLOYMENT_TARGET}", "CFBundleDevelopmentRegion"=>"en", "CFBundleShortVersionString"=>"1.0"}
```</p></blockquote></blockquote>

<h2>Object#methods</h2>

<p>オブジェクトに対して呼び出せるメソッド名の一覧を返します。CRuby も Object#methods がありますが、MacRuby では <code>objc_methods</code> 引数が追加されています。</p>

<ul>
<li>methods(include_inherited = true, objc_methods = false) -> [Symbol]

<ul>
<li>[PARAM] include_inherited:

<ul>
<li>引数が false の時は Object#singleton_methods(false) と同じになります。</li>
</ul>
</li>
<li>[PARAM] objc_methods:

<ul>
<li>引数が true の時は Ruby のメソッドのほかに Cocoa API の一覧も返します。</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>メソッド名の一覧を返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>```</p>

<blockquote><p>"foo".methods(true, true)
=> [:encode!, :"replaceCharactersInRange:withString:", :"getCharacters:range:", :characterAtIndex, :length, :transform, :crypt, :rpartition, :partition, :sum, :tr_s!, :tr_s, :tr!, :tr, :squeeze!, :squeeze, :delete!, :delete, :count, :reverse!, :reverse, :upto, :next!, :next, :succ!, :succ, :each_codepoint, :codepoints, :each_byte, :bytes, :each_char, :chars, :each_line, :lines, :rstrip!, :lstrip!, :strip!, :rstrip, :lstrip, :strip, :center, :rjust, :ljust, :capitalize!, :capitalize, :swapcase!, :swapcase, :upcase!, :upcase, :downcase!, :downcase, :gsub!, :gsub, :sub!, :sub, :chop!, :chop, :chomp!, :chomp, :to_f, :chr, :ord, :oct, :hex, :to_i, :split, :scan, :=~, :match, :dump, :inspect, :intern, :to_sym, :to_str, :to_s, :end_with?, :start_with?, :include?, :eql?, :casecmp, :&lt;=>, :==, :concat, :&lt;&lt;, :%, :*, :+, :rindex, :index, :insert, :slice!, :slice, :[]=, :[], :ascii_only?, :valid_encoding?, :force_encoding, :pointer, :to_data, :setbyte, :getbyte, :bytesize, :empty?, :size, :encoding, :clear, :replace, :dup, :"performSelector:withObject:withObject:", :"performSelector:withObject:", :performSelector, :conformsToProtocol, :dd_appendSpaces, :"replaceOccurrencesOfString:withString:options:range:", :initWithCapacity, 以下略
```</p></blockquote>

<h3>Object#to_plist</h3>

<p>plist 形式に変換したデータを文字列で返します。</p>

<ul>
<li>to_plist -> String

<ul>
<li>[RETURN]

<ul>
<li>文字列を返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>```</p>

<blockquote><blockquote><p>"foo".to_plist
=> "&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?>\n&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<string>foo</string>\n</plist>\n"
{"foo" => 42}.to_plist
=> "&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?>\n&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n\t<key>foo</key>\n\t<integer>42</integer>\n</dict>\n</plist>\n"
["foo", "bar"].to_plist
=> "&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?>\n&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<array>\n\t<string>foo</string>\n\t<string>bar</string>\n</array>\n</plist>\n"
```</p></blockquote></blockquote>

<h3>Range#relative_to</h3>

<p><code>max</code> で指定した Range 範囲のオブジェクトを返します。負の範囲に対して実行した場合には、<code>max</code> との相対的な範囲となります。</p>

<ul>
<li>relative_to(max) -> Range

<ul>
<li>[PARAM] max:

<ul>
<li>Range の範囲の最大値を指定します。</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>新しい Range オブジェクトを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>```</p>

<blockquote><blockquote><p>(1..10).relative_to(5)
=> 1..5
(-2..-1).relative_to(5)
=> 3..4
```</p></blockquote></blockquote>

<h3>BasicSocket#sendfile</h3>

<p>ソケットを介してファイルのデータを <a href="http://developer.apple.com/library/ios/#DOCUMENTATION/System/Conceptual/ManPages_iPhoneOS/man2/sendfile.2.html">sendfile(2)</a> を用いて送信します。</p>

<ul>
<li>sendfile(file, offset, length) -> Integer

<ul>
<li>[PARAM] file:

<ul>
<li>送信するファイルのパス、または IO オブジェクトを渡します。</li>
</ul>
</li>
<li>[PARAM] offset:

<ul>
<li>送信を開始するデータの位置を指定します。</li>
</ul>
</li>
<li>[PARAM] length:

<ul>
<li>送信するデータサイズを指定します。</li>
</ul>
</li>
<li>[RETURN]

<ul>
<li>送信したデータサイズを返します。</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>```ruby
require 'socket'</p>

<p>port = 5000
socket = TCPSocket.open('localhost', port)</p>

<p>path = 'sample.txt'
socket.sendfile(path, 0, 128)
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Changes an Application's Icon]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/24/intro-icon/"/>
    <updated>2012-03-24T10:00:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/24/intro-icon</id>
    <content type="html"><![CDATA[<p>All applications which you created have a system default icon.</p>

<p><img src="/images/en/intro-icon/default_icon.png" alt="image" /></p>

<p>You can change the icon of the application to suit your needs.</p>

<h2>Icon Composer</h2>

<p>Prepare the image for the icon to set for your application. Convert an image to icon with Icon Composer. Icon Composer is installed along with Xcode.</p>

<p>Since Xcode 4.3, launch Icon Composer with [Xcode]->[Open Developer Tool] in Xcode's menu.</p>

<p><img src="/images/en/intro-icon/icon_composer_xcode43.png" alt="image" /></p>

<p>Previous Xcode 4.2, Icon Composer exists in <em>/Developer/Applications/Utilities/Icon Composer.app</em></p>

<p><img src="/images/en/intro-icon/icon_composer_xcode42.png" alt="image" /></p>

<p>Some frames are shown in main screen of Icon Composer. Drag and drop prepared the image into there. After that, save it as icon.</p>

<p><img src="/images/en/intro-icon/icns.png" alt="image" /></p>

<h2>Change an Application's Icon</h2>

<p>Change an Application's Icon with Xcode. Choose a [TARGETS] like the following figure. After that, drag and drop an icon which created with Icon Composer into [App Icon].</p>

<p><img src="/images/en/intro-icon/change_icon.png" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyGems を利用して Markdown ファイルを表示しよう]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/22/markdown-viewer/"/>
    <updated>2012-03-22T16:30:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/22/markdown-viewer</id>
    <content type="html"><![CDATA[<p>MacRuby は WebKit など Objective-C で作られたフレームワークはもちろん、RubyGems ライブラリを用いてアプリケーションを作ることができます。今回は、Markdown ファイルを HTML へ変換する RubyGems ライブラリを利用し、WebKit で変換された HTML を表示するアプリケーションを作成します。</p>

<h2>RubyGems ライブラリをインストールする</h2>

<p>Markdown ファイルを HTML へ変換するために、<a href="http://rubygems.org/gems/rdiscount">rdiscount</a> という RubyGems を用います。Markdown ファイルを変換するためのライブラリはほかにも <a href="http://deveiate.org/projects/BlueCloth">BlueCloth</a> などいくつかありますので、いろいろ試してみるとおもしろいかもしれません。</p>

<p>それでは、rdiscount をインストールしてみましょう。Terminal 上で以下のようにコマンドを実行します。</p>

<p><code>
$ sudo macgem install rdiscount
</code></p>

<p>rdiscount を用いて以下のように、<code>RDiscount.new</code> へ Markdown ファイルの内容を渡し <code>to_html</code> というメソッドで HTML へ変換できます。</p>

<p><code>
$ macirb
irb(main):001:0&gt; require 'rubygems'
=&gt; true
irb(main):002:0&gt; require 'rdiscount'
=&gt; true
irb(main):003:0&gt; path = "MarkDownSyntax.md"
=&gt; "MarkDownSyntax.md"
irb(main):004:0&gt; md = RDiscount.new(File.read(path))
=&gt; #&lt;RDiscount:0x4008cace0 以下略
irb(main):005:0&gt; md.to_html
=&gt; "&lt;h1&gt;Markdown: Syntax&lt;/h1&gt;\n\n&lt;ul 以下略
</code></p>

<div class="note">
CRuby 1.9 では <code>require 'rubygems'</code> が不要なのですが、MacRuby で RubyGems を利用する際には必須となります。「MacRuby の起動にさらに時間がかかるので、rubygems をロードしていない」というのが理由です。(参考: <a href="http://www.macruby.org/trac/ticket/855">MacRuby should load the "rubygems" automatically.</a>)
</div>


<h2>Web Viewの準備</h2>

<p><a href="/blog/2012/03/15/webkit/">WebKit フレームワークを使ってみよう</a>の記事を参考に、Web View をアウトレット接続するところまでを行います。</p>

<p><img src="/images/ja/webkit/connect_outlet.png" alt="image" /></p>

<h2>Markdown ファイルを読む</h2>

<p>アプリケーションメニューの [File]->[Open...] がクリックされると、ファイルを選択するためのオープンパネルを表示しファイルを読み込むようにします。</p>

<p><img src="/images/ja/markdown-viewer/file_open.png" alt="image" /></p>

<p>[File]->[Open...] はボタンと同じように、アクションメソッドが必要となります。以下のようなメソッドを用意しておきます。</p>

<p>```ruby
  def open(sender)</p>

<pre><code># [File]-&gt;[Open...] のアクション
</code></pre>

<p>  end
```</p>

<p>[Main Menu] の中にある [File]->[Open...] から、control キーを押しながら App Delegate までドラッグして、さきほど用意した <code>open</code> とアクションを接続します。</p>

<p><img src="/images/ja/markdown-viewer/connect_action.png" alt="image" /></p>

<p>これで、[File]->[Open...] がクリックされると <code>open</code> が呼び出されます。引き続き、以下のようなオープンパネルを表示するための処理を <code>open</code> へ実装します。</p>

<p><img src="/images/ja/markdown-viewer/open_panel.png" alt="image" /></p>

<p>オープンパネルの表示には <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/ApplicationKit/Classes/NSOpenPanel_Class/Reference/Reference.html">NSOpenPanel</a> を利用し、以下のように実装します。</p>

<p>```ruby
  def open(sender)</p>

<pre><code># オープンパネルのインスタンスを取得
panel = NSOpenPanel.openPanel

# パネルを表示
result = panel.runModalForDirectory(NSHomeDirectory(),                # パネルを表示するときのディレクトリ
                                    file: nil,                        # 選択できるファイル名を指定。指定しないので nil とする
                                    types: ["md", "mkd", "markdown"]) # 選択できるファイル拡張子を指定。
if(result == NSOKButton)
  # パネルの Open がクリックされたときの処理
  path = panel.filename # 選択されたファイルのパスを取得

  # ファイルを読む
  markdown_content = File.read(path)
end
</code></pre>

<p>  end
```</p>

<h2>Markdown を HTML へ変換し表示する</h2>

<p>Markdown ファイルを読むまでの処理ができましたので、つぎに HTML へ変換する処理を実装します。まず、<code>rdiscount</code> を <em>AppDelegate.rb</em> の先頭で <code>require</code> でロードします。</p>

<p>```ruby
require 'rubygems'
require 'rdiscount'</p>

<p>class AppDelegate
  attr_accessor :window
  attr_accessor :webView
```</p>

<p><code>open</code> メソッドでファイルを読んだ後の処理として、Markdown を HTML へ変換し表示する処理を実装します。</p>

<p>```ruby</p>

<pre><code>  # ファイルを読む
  markdown_content = File.read(path)

  # Markdown を HTML へ変換
  md = RDiscount.new(markdown_content)

  # 変換された HTML にヘッダなどを追加
  html =&lt;&lt;"EOS"
</code></pre>

<p><html>
<head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
</head>
<body></p>

<h1>{md.to_html}</h1>

<p></body>
</html>
EOS</p>

<pre><code>  # WebView に HTML を表示
  webView.mainFrame.loadHTMLString(html, baseURL: nil)
</code></pre>

<p>```</p>

<p><code>webView.mainFrame</code> の <code>loadHTMLString</code> を用いると作成した HTML を表示できます。</p>

<p><img src="/images/ja/markdown-viewer/markdown-viewer.png" alt="image" /></p>

<p>スタイルシートを記述して見栄えをよくしたりしてみてください。Markdown ファイルで使用している画像を表示するために <code>baseURL</code> の指定を変更する必要があるかと思います。いろいろ試してみてください。その際には、MacRuby のサンプルにある <a href="https://github.com/MacRuby/MacRuby/tree/master/sample-macruby/MarkdownViewer">MarkdownViewer</a> が参考になるかと思います。</p>

<h2>Deployment のオプションを追加</h2>

<p>Deployment するときに、今回使用した rdiscount がアプリケーションに埋め込まれるように <code>--gem rdiscount</code> をオプションに追加しておきましょう。</p>

<p><img src="/images/ja/markdown-viewer/deployment_option.png" alt="image" /></p>

<div class="note">
Deployment するとロードパスの探索範囲内に rdiscount が埋め込まれるようになります。そのため、Deployment する際に <code>require 'rubygems'</code> を削除しても動作します。(rubygems を読み込まない分、起動が速くなるかもしれません、という程度ですが。)
</div>


<h2>付録 : 今回作成したコード</h2>

<p>最後に今回作成した <em>AppDelegate.rb</em> の全文を記載します。</p>

<p>```ruby
require 'rubygems'
require 'rdiscount'</p>

<p>class AppDelegate
  attr_accessor :window
  attr_accessor :webView</p>

<p>  def applicationDidFinishLaunching(a_notification)</p>

<pre><code># Insert code here to initialize your application
</code></pre>

<p>  end</p>

<p>  def open(sender)</p>

<pre><code># オープンパネルのインスタンスを取得
panel = NSOpenPanel.openPanel

# パネルを表示
result = panel.runModalForDirectory(NSHomeDirectory(),                # パネルを表示するときのディレクトリ
                                    file: nil,                        # 選択できるファイル名を指定。指定しないので nil とする
                                    types: ["md", "mkd", "markdown"]) # 選択できるファイル拡張子を指定。
if(result == NSOKButton)
  # パネルの Open がクリックされたときの処理
  path = panel.filename # 選択されたファイルのパスを取得

  # ファイルを読む
  markdown_content = File.read(path)

  # Markdown を HTML へ変換
  md = RDiscount.new(markdown_content)

  # 変換された HTML にヘッダなどを追加
  html =&lt;&lt;"EOS"
</code></pre>

<p><html>
<head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
</head>
<body></p>

<h1>{md.to_html}</h1>

<p></body>
</html>
EOS</p>

<pre><code>  # WebView に HTML を表示
  webView.mainFrame.loadHTMLString(html, baseURL: nil)
end
</code></pre>

<p>  end</p>

<p>end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Organizer で API を調べてみよう]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/21/organizer/"/>
    <updated>2012-03-21T22:33:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/21/organizer</id>
    <content type="html"><![CDATA[<p>Xcode には Organizer という、iPhone などのデバイスやプロジェクト、ドキュメントを扱うツールがあります。Xcode で [Window]->[Organizer] とメニューを選択すると Organizer が起動します。</p>

<p><img src="/images/ja/organizer/xcode_menu_organizer.png" alt="image" /></p>

<p>Organizer のツールバーにある Documentation というアイコンを選択すると、Mac OS X や iOS のドキュメントを閲覧することができます。</p>

<p><img src="/images/ja/organizer/organizer.png" alt="image" /></p>

<p>各 Framework のクラスで、どのようなメソッドが存在するのか調べたりする際などで活用してみてください。</p>

<p><img src="/images/ja/organizer/organizer_doc_search.png" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Embeds the MacRuby into Application]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/19/intro-deployment/"/>
    <updated>2012-03-19T00:00:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/19/intro-deployment</id>
    <content type="html"><![CDATA[<p>Application that you created has been just worked with environment which installed MacRuby. When you distribute your application, MacRuby might not be installed in users environments.</p>

<p>Therefore, MacRuby may embed itself into your application. The application which embedded MacRuby will work everywhere.</p>

<p>You choose "Deployment" and click [Run] like the following figure. MacRuby is embedded into your application.</p>

<p><img src="/images/en/intro-deployment/deployment.png" alt="image" /></p>

<p>You can specify several options with "Deployment" in "Arguments" like the following figure.</p>

<p><img src="/images/en/intro-deployment/deployment_option.png" alt="image" /></p>

<p>Run a <code>macruby_deploy</code> command in Terminal.app, you could confirm the options.</p>

<p>```
$ macruby_deploy
Usage: macruby_deploy [options] application-bundle</p>

<pre><code>    --compile                    Compile the bundle source code
    --embed                      Embed MacRuby inside the bundle
    --no-stdlib                  Do not embed the standard library
    --stdlib [LIB]               Embed only LIB from the standard library
    --gem [GEM]                  Embed GEM and its dependencies
    --bs                         Embed the system BridgeSupport files
    --verbose                    Log all commands to standard out
    --codesign [CERT]            Sign the files with the specified certificate
-v, --version                    Display the version
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
