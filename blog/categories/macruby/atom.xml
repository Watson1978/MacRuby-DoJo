<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: MacRuby | MacRuby DoJo (道場)]]></title>
  <link href="http://watson1978.github.com/MacRuby-DoJo/blog/categories/macruby/atom.xml" rel="self"/>
  <link href="http://watson1978.github.com/MacRuby-DoJo/"/>
  <updated>2012-03-23T11:40:03+09:00</updated>
  <id>http://watson1978.github.com/MacRuby-DoJo/</id>
  <author>
    <name><![CDATA[Watson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RubyGems を利用して Markdown ファイルを表示しよう]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/22/markdown-viewer/"/>
    <updated>2012-03-22T16:30:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/22/markdown-viewer</id>
    <content type="html"><![CDATA[<p>MacRuby は WebKit など Objective-C で作られたフレームワークはもちろん、RubyGems ライブラリを用いてアプリケーションを作ることができます。今回は、Markdown ファイルを HTML へ変換する RubyGems ライブラリを利用し、WebKit で変換された HTML を表示するアプリケーションを作成します。</p>

<h2>RubyGems ライブラリをインストールする</h2>

<p>Markdown ファイルを HTML へ変換するために、<a href="http://rubygems.org/gems/rdiscount">rdiscount</a> という RubyGems を用います。Markdown ファイルを変換するためのライブラリはほかにも <a href="http://deveiate.org/projects/BlueCloth">BlueCloth</a> などいくつかありますので、いろいろ試してみるとおもしろいかもしれません。</p>

<p>それでは、rdiscount をインストールしてみましょう。Terminal 上で以下のようにコマンドを実行します。</p>

<p><code>
$ sudo macgem install rdiscount
</code></p>

<p>rdiscount を用いて以下のように、<code>RDiscount.new</code> へ Markdown ファイルの内容を渡し <code>to_html</code> というメソッドで HTML へ変換できます。</p>

<p><code>
$ macirb
irb(main):001:0&gt; require 'rubygems'
=&gt; true
irb(main):002:0&gt; require 'rdiscount'
=&gt; true
irb(main):003:0&gt; path = "MarkDownSyntax.md"
=&gt; "MarkDownSyntax.md"
irb(main):004:0&gt; md = RDiscount.new(File.read(path))
=&gt; #&lt;RDiscount:0x4008cace0 以下略
irb(main):005:0&gt; md.to_html
=&gt; "&lt;h1&gt;Markdown: Syntax&lt;/h1&gt;\n\n&lt;ul 以下略
</code></p>

<div class="note">
CRuby 1.9 では <code>require 'rubygems'</code> が不要なのですが、MacRuby で RubyGems を利用する際には必須となります。「MacRuby の起動にさらに時間がかかるので、rubygems をロードしていない」というのが理由です。(参考: <a href="http://www.macruby.org/trac/ticket/855">MacRuby should load the "rubygems" automatically.</a>)
</div>


<h2>Web Viewの準備</h2>

<p><a href="/blog/2012/03/15/webkit/">WebKit フレームワークを使ってみよう</a>の記事を参考に、Web View をアウトレット接続するところまでを行います。</p>

<p><img src="/images/ja/webkit/connect_outlet.png" alt="image" /></p>

<h2>Markdown ファイルを読む</h2>

<p>アプリケーションメニューの [File]->[Open...] がクリックされると、ファイルを選択するためのオープンパネルを表示しファイルを読み込むようにします。</p>

<p><img src="/images/ja/markdown-viewer/file_open.png" alt="image" /></p>

<p>[File]->[Open...] はボタンと同じように、アクションメソッドが必要となります。以下のようなメソッドを用意しておきます。</p>

<p>```ruby
  def open(sender)</p>

<pre><code># [File]-&gt;[Open...] のアクション
</code></pre>

<p>  end
```</p>

<p>[Main Menu] の中にある [File]->[Open...] から、control キーを押しながら App Delegate までドラッグして、さきほど用意した <code>open</code> とアクションを接続します。</p>

<p><img src="/images/ja/markdown-viewer/connect_action.png" alt="image" /></p>

<p>これで、[File]->[Open...] がクリックされると <code>open</code> が呼び出されます。引き続き、以下のようなオープンパネルを表示するための処理を <code>open</code> へ実装します。</p>

<p><img src="/images/ja/markdown-viewer/open_panel.png" alt="image" /></p>

<p>オープンパネルの表示には <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/ApplicationKit/Classes/NSOpenPanel_Class/Reference/Reference.html">NSOpenPanel</a> を利用し、以下のように実装します。</p>

<p>```ruby
  def open(sender)</p>

<pre><code># オープンパネルのインスタンスを取得
panel = NSOpenPanel.openPanel

# パネルを表示
result = panel.runModalForDirectory(NSHomeDirectory(),                # パネルを表示するときのディレクトリ
                                    file: nil,                        # 選択できるファイル名を指定。指定しないので nil とする
                                    types: ["md", "mkd", "markdown"]) # 選択できるファイル拡張子を指定。
if(result == NSOKButton)
  # パネルの Open がクリックされたときの処理
  path = panel.filename # 選択されたファイルのパスを取得

  # ファイルを読む
  markdown_content = File.read(path)
end
</code></pre>

<p>  end
```</p>

<h2>Markdown を HTML へ変換し表示する</h2>

<p>Markdown ファイルを読むまでの処理ができましたので、つぎに HTML へ変換する処理を実装します。まず、<code>rdiscount</code> を <em>AppDelegate.rb</em> の先頭で <code>require</code> でロードします。</p>

<p>```ruby
require 'rubygems'
require 'rdiscount'</p>

<p>class AppDelegate
  attr_accessor :window
  attr_accessor :webView
```</p>

<p><code>open</code> メソッドでファイルを読んだ後の処理として、Markdown を HTML へ変換し表示する処理を実装します。</p>

<p>```ruby</p>

<pre><code>  # ファイルを読む
  markdown_content = File.read(path)

  # Markdown を HTML へ変換
  md = RDiscount.new(markdown_content)

  # 変換された HTML にヘッダなどを追加
  html =&lt;&lt;"EOS"
</code></pre>

<p><html>
<head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
</head>
<body></p>

<h1>{md.to_html}</h1>

<p></body>
</html>
EOS</p>

<pre><code>  # WebView に HTML を表示
  webView.mainFrame.loadHTMLString(html, baseURL: nil)
</code></pre>

<p>```</p>

<p><code>webView.mainFrame</code> の <code>loadHTMLString</code> を用いると作成した HTML を表示できます。</p>

<p><img src="/images/ja/markdown-viewer/markdown-viewer.png" alt="image" /></p>

<p>スタイルシートを記述して見栄えをよくしたりしてみてください。Markdown ファイルで使用している画像を表示するために <code>baseURL</code> の指定を変更する必要があるかと思います。いろいろ試してみてください。その際には、MacRuby のサンプルにある <a href="https://github.com/MacRuby/MacRuby/tree/master/sample-macruby/MarkdownViewer">MarkdownViewer</a> が参考になるかと思います。</p>

<h2>Deployment のオプションを追加</h2>

<p>Deployment するときに、今回使用した rdiscount がアプリケーションに埋め込まれるように <code>--gem rdiscount</code> をオプションに追加しておきましょう。</p>

<p><img src="/images/ja/markdown-viewer/deployment_option.png" alt="image" /></p>

<div class="note">
Deployment するとロードパスの探索範囲内に rdiscount が埋め込まれるようになります。そのため、Deployment する際に <code>require 'rubygems'</code> を削除しても動作します。(rubygems を読み込まない分、起動が速くなるかもしれません、という程度ですが。)
</div>


<h2>付録 : 今回作成したコード</h2>

<p>最後に今回作成した <em>AppDelegate.rb</em> の全文を記載します。</p>

<p>```ruby
require 'rubygems'
require 'rdiscount'</p>

<p>class AppDelegate
  attr_accessor :window
  attr_accessor :webView</p>

<p>  def applicationDidFinishLaunching(a_notification)</p>

<pre><code># Insert code here to initialize your application
</code></pre>

<p>  end</p>

<p>  def open(sender)</p>

<pre><code># オープンパネルのインスタンスを取得
panel = NSOpenPanel.openPanel

# パネルを表示
result = panel.runModalForDirectory(NSHomeDirectory(),                # パネルを表示するときのディレクトリ
                                    file: nil,                        # 選択できるファイル名を指定。指定しないので nil とする
                                    types: ["md", "mkd", "markdown"]) # 選択できるファイル拡張子を指定。
if(result == NSOKButton)
  # パネルの Open がクリックされたときの処理
  path = panel.filename # 選択されたファイルのパスを取得

  # ファイルを読む
  markdown_content = File.read(path)

  # Markdown を HTML へ変換
  md = RDiscount.new(markdown_content)

  # 変換された HTML にヘッダなどを追加
  html =&lt;&lt;"EOS"
</code></pre>

<p><html>
<head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
</head>
<body></p>

<h1>{md.to_html}</h1>

<p></body>
</html>
EOS</p>

<pre><code>  # WebView に HTML を表示
  webView.mainFrame.loadHTMLString(html, baseURL: nil)
end
</code></pre>

<p>  end</p>

<p>end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Organizer で API を調べてみよう]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/21/organizer/"/>
    <updated>2012-03-21T22:33:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/21/organizer</id>
    <content type="html"><![CDATA[<p>Xcode には Organizer という、iPhone などのデバイスやプロジェクト、ドキュメントを扱うツールがあります。Xcode で [Window]->[Organizer] とメニューを選択すると Organizer が起動します。</p>

<p><img src="/images/ja/organizer/xcode_menu_organizer.png" alt="image" /></p>

<p>Organizer のツールバーにある Documentation というアイコンを選択すると、Mac OS X や iOS のドキュメントを閲覧することができます。</p>

<p><img src="/images/ja/organizer/organizer.png" alt="image" /></p>

<p>各 Framework のクラスで、どのようなメソッドが存在するのか調べたりする際などで活用してみてください。</p>

<p><img src="/images/ja/organizer/organizer_doc_search.png" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Embeds the MacRuby into Application]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/19/intro-deployment/"/>
    <updated>2012-03-19T00:00:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/19/intro-deployment</id>
    <content type="html"><![CDATA[<p>Application that you created has been just worked with environment which installed MacRuby. When you distribute your application, MacRuby might not be installed in users environments.</p>

<p>Therefore, MacRuby may embed itself into your application. The application which embedded MacRuby will work everywhere.</p>

<p>You choose "Deployment" and click [Run] as a following figure, then MacRuby is embedded into your application.</p>

<p><img src="/images/en/intro-deployment/deployment.png" alt="image" /></p>

<p>You can specify several options with "Deployment" in "Arguments" as a following figure.</p>

<p><img src="/images/en/intro-deployment/deployment_option.png" alt="image" /></p>

<p>Run a <code>macruby_deploy</code> command in Terminal.app, you could confirm the options.</p>

<p>```
$ macruby_deploy
Usage: macruby_deploy [options] application-bundle</p>

<pre><code>    --compile                    Compile the bundle source code
    --embed                      Embed MacRuby inside the bundle
    --no-stdlib                  Do not embed the standard library
    --stdlib [LIB]               Embed only LIB from the standard library
    --gem [GEM]                  Embed GEM and its dependencies
    --bs                         Embed the system BridgeSupport files
    --verbose                    Log all commands to standard out
    --codesign [CERT]            Sign the files with the specified certificate
-v, --version                    Display the version
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creates a Stopwatch Application]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/18/intro-stopwatch/"/>
    <updated>2012-03-18T00:01:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/18/intro-stopwatch</id>
    <content type="html"><![CDATA[<p>In this content, describe how to create a simple application. This content have some essences to create an application using MacRuby.</p>

<p>Show an application’s User Interface in following figure. We will call this application "StopWatch".</p>

<p><img src="/images/en/intro-stopwatch/stopwatch.png" alt="image" /></p>

<p>The "StopWatch" has below behaviors.</p>

<ol>
<li>Run a timer if start button is clicked.</li>
<li>Stop a timer if stop button is clicked.</li>
<li>A timer value is displayed in Text Field.</li>
</ol>


<h2>User Interface</h2>

<p>To start the design, need some operations in Xcode.</p>

<p>Choose a <em>MainMenu.xib</em>.</p>

<p><img src="/images/en/intro-stopwatch/mainmenu_xib.png" alt="image" /></p>

<p>Choose a [Window - StopWatch] to display Window for design.</p>

<p><img src="/images/en/intro-stopwatch/window_stopwatch.png" alt="image" /></p>

<p>Click an icon in toolbar like the following figure. After that, Object Library is displayed.</p>

<p><img src="/images/en/intro-stopwatch/show_object_library.png" alt="image" /></p>

<p>You have been completed to prepare to design. Then, place the User Interface parts from Object Library to Window.</p>

<p><img src="/images/en/intro-stopwatch/ui_design.png" alt="image" /></p>

<h2>Connect the Outlets</h2>

<p>The "StopWatch" application sets a timer value into Text Field. However, if Text Field is just placed on Window, cannot set a value into there. We should use the Outlets to set a value or to get a status of User Interface parts.</p>

<p>To use the Outlets, need to write a program code. Choose a <em>AppDelegate.rb</em>. After that, add a <code>attr_accessor :textField</code> to AppDelegate class.</p>

<p><code>ruby
class AppDelegate
  attr_accessor :window
  attr_accessor :textField # Outlet
</code></p>

<p>Return to <em>MainMenu.xib</em> screen, connect the Outlet. Press <kbd>control</kbd> key and drag from App Delegate to Text Field.</p>

<p><img src="/images/en/intro-stopwatch/connect_outlet.png" alt="image" /></p>

<p>A list of Outlets will be displayed, and then choose a <code>textField</code> to connect it.</p>

<p><img src="/images/en/intro-stopwatch/outlets.png" alt="image" /></p>

<p>You can set/get the value of the Text Field through the textField accessor.</p>

<h2>Connect the Actions</h2>

<p>When you clicked start/stop button, still nothing happens. You need to set the behaviors when the buttons are clicked.</p>

<p>Choose an <em>AppDelegate.rb</em>. After that, add <code>startTimer</code> and <code>stopTimer</code> methods as following.</p>

<p>```ruby
class AppDelegate
  attr_accessor :window
  attr_accessor :textField # Outlet
  def applicationDidFinishLaunching(a_notification)</p>

<pre><code># Insert code here to initialize your application
</code></pre>

<p>  end</p>

<p>  def startTimer(sender)</p>

<pre><code># This method is called when clicked start button.
</code></pre>

<p>  end</p>

<p>  def stopTimer(sender)</p>

<pre><code># This method is called when clicked stop button.
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>Return to <em>MainMenu.xib</em> screen, connect the Actions. Press control key and drag from start button to App Delegate.</p>

<p><img src="/images/en/intro-stopwatch/connect_action.png" alt="image" /></p>

<p>A list of Actions will be displayed, and then choose a <code>startTimer</code> to connect it.</p>

<p><img src="/images/en/intro-stopwatch/actions.png" alt="image" /></p>

<p>Connect stop button to <code>stopTimer</code> in the same way. Each methods will be called when the button is clicked.</p>

<p><code>stopTimer</code>/<code>startTimer</code> are also known as the action method.</p>

<div class="note">
If you write an action method, you <strong>must</strong> provide a <code>sender</code> argument. If methods does not have a <code>sender</code> argument, it is not recognized as an action method.
</div>


<h2>Use the timer</h2>

<p>If you do something at a constant interval, use the <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/nstimer_Class/Reference/NSTimer.html">NSTimer</a>.</p>

<p>When use a timer as shown below, you will be able to handle at a constant interval.</p>

<p>```ruby
@timer = NSTimer</p>

<pre><code>       .scheduledTimerWithTimeInterval(0.1,
                                       target: self,
                                       selector: "timerHandler:",
                                       userInfo: nil,
                                       repeats: true)
</code></pre>

<p>def timerHandler(userInfo)
  # Handler
end
```</p>

<p>Generate a timer at startTimer and stop a timer at stopTimer.</p>

<p>```ruby
class AppDelegate
  attr_accessor :window
  attr_accessor :textField # Outlet
  def applicationDidFinishLaunching(a_notification)</p>

<pre><code># Insert code here to initialize your application
</code></pre>

<p>  end</p>

<p>  def startTimer(sender)</p>

<pre><code>if @timer.nil?
  @time = 0.0
  @timer = NSTimer
            .scheduledTimerWithTimeInterval(0.1,
                                            target: self,
                                            selector: "timerHandler:",
                                            userInfo: nil,
                                            repeats: true)
end
</code></pre>

<p>  end</p>

<p>  def stopTimer(sender)</p>

<pre><code>if @timer
  @timer.invalidate
  @timer = nil
end
</code></pre>

<p>  end</p>

<p>  def timerHandler(userInfo)</p>

<pre><code>@time += 0.1
string = sprintf("%.1f", @time)
textField.setStringValue(string)
</code></pre>

<p>  end
end
```</p>

<p>Invoke <code>@timer.invalidate</code> to stop a timer. Invoke <code>textField.setStringValue(string)</code> to set string to Text Field.</p>

<p>"Stopwatch" application is complete!</p>

<p>Change to "StopWatch" from "Deployment" in Scheme. After that, Click [Run]. "Stopwatch" application will be running!!</p>

<p><img src="/images/en/intro-stopwatch/scheme.png" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WebKit フレームワークを使ってみよう]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/15/webkit/"/>
    <updated>2012-03-15T08:52:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/15/webkit</id>
    <content type="html"><![CDATA[<p>[MacRuby Application] テンプレートを用いてプロジェクトを作成すると、あらかじめ Cocoa.framework というフレームワークが読み込まれるようになっています。</p>

<p><img src="/images/ja/webkit/framework.png" alt="image" /></p>

<p>また、<em>rb_main.rb</em> で以下のように Cocoa.framework が読み込まれプログラム中から扱えるようになっています。</p>

<p>```ruby</p>

<h1>Loading the Cocoa framework. If you need to load more frameworks, you can</h1>

<h1>do that here too.</h1>

<p>framework 'Cocoa'
```</p>

<div class="note">
Cocoa.framework は Foundation.framework、AppKit.framework と CoreData.framework を 1 つにまとめたフレームワークとなっています。これらのフレームワークで扱っている UI 部品や API は、プロジェクト作成直後から利用することができます。
</div>


<h2>WebKit.framework を追加する</h2>

<p>さっそくフレームワークを追加してみましょう。以下の図のように "+" ボタンをクリックすると、フレームワークを追加することができます。</p>

<p><img src="/images/ja/webkit/add_framework.png" alt="image" /></p>

<p>シートダイアログが表示されるので、追加するフレームワークを選択します。</p>

<p><img src="/images/ja/webkit/choose_framework.png" alt="image" /></p>

<p><em>rb_main.rb</em> で以下のように WebKit.framework を読み込むようにします。</p>

<p>```ruby</p>

<h1>Loading the Cocoa framework. If you need to load more frameworks, you can</h1>

<h1>do that here too.</h1>

<p>framework 'Cocoa'
framework 'WebKit' # 追加
```</p>

<p>以上で、フレームワークの追加作業が完了です。</p>

<h2>Web View を配置する</h2>

<p><img src="/images/ja/webkit/put_webview.png" alt="image" /></p>

<p>Object Library から Web View を Window 上に配置します。</p>

<h2>Web View をアウトレット接続する</h2>

<p><em>AppDelegate.rb</em> に webView のアウトレット用のアクセサを追加し、Web View と接続します。</p>

<p><code>ruby
class AppDelegate
  attr_accessor :window
  attr_accessor :webView # アウトレット
</code></p>

<p><img src="/images/ja/webkit/connect_outlet.png" alt="image" /></p>

<h2>Web サイトを表示する</h2>

<p>以下のように、アウトレット接続した <code>webView</code> の <code>mainFrame</code> に URL のサイトを読み込むように指示すると、さきほど配置した Web View に Web サイトが表示されます。</p>

<p>```ruby
class AppDelegate
  attr_accessor :window
  attr_accessor :webView # アウトレット</p>

<p>  def applicationDidFinishLaunching(a_notification)</p>

<pre><code># Insert code here to initialize your application
url = "http://www.apple.com/"
nsurl = NSURL.URLWithString(url)
nsurl_req = NSURLRequest.requestWithURL(nsurl)

webView.mainFrame.loadRequest(nsurl_req)
</code></pre>

<p>  end
end
```</p>

<p><img src="/images/ja/webkit/webview.png" alt="image" /></p>
]]></content>
  </entry>
  
</feed>
