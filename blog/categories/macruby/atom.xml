<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: MacRuby | MacRuby DoJo (道場)]]></title>
  <link href="http://watson1978.github.com/MacRuby-DoJo/blog/categories/macruby/atom.xml" rel="self"/>
  <link href="http://watson1978.github.com/MacRuby-DoJo/"/>
  <updated>2012-03-22T01:36:38+09:00</updated>
  <id>http://watson1978.github.com/MacRuby-DoJo/</id>
  <author>
    <name><![CDATA[Watson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Organizer で API を調べてみよう]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/21/organizer/"/>
    <updated>2012-03-21T22:33:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/21/organizer</id>
    <content type="html"><![CDATA[<p>Xcode には Organizer という、iPhone などのデバイスやプロジェクト、ドキュメントを扱うツールがあります。Xcode で [Window]->[Organizer] とメニューを選択すると Organizer が起動します。</p>

<p><img src="/images/ja/organizer/xcode_menu_organizer.png" alt="image" /></p>

<p>Organizer のツールバーにある Documentation というアイコンを選択すると、Mac OS X や iOS のドキュメントを閲覧することができます。</p>

<p><img src="/images/ja/organizer/organizer.png" alt="image" /></p>

<p>各 Framework のクラスで、どのようなメソッドが存在するのか調べたりする際などで活用してみてください。</p>

<p><img src="/images/ja/organizer/organizer_doc_search.png" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Embeds the MacRuby into Application]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/19/intro-deployment/"/>
    <updated>2012-03-19T00:00:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/19/intro-deployment</id>
    <content type="html"><![CDATA[<p>Application that you created has been just worked with environment which installed MacRuby. When you distribute your application, MacRuby might not be installed in users environments.</p>

<p>Therefore, MacRuby may embed itself into your application. The application which embedded MacRuby will work everywhere.</p>

<p>You choose "Deployment" and click [Run] as a following figure, then MacRuby is embedded into your application.</p>

<p><img src="/images/en/intro-deployment/deployment.png" alt="image" /></p>

<p>You can specify several options with "Deployment" in "Arguments" as a following figure.</p>

<p><img src="/images/en/intro-deployment/deployment_option.png" alt="image" /></p>

<p>Run a <code>macruby_deploy</code> command in Terminal.app, you could confirm the options.</p>

<p>```
$ macruby_deploy
Usage: macruby_deploy [options] application-bundle</p>

<pre><code>    --compile                    Compile the bundle source code
    --embed                      Embed MacRuby inside the bundle
    --no-stdlib                  Do not embed the standard library
    --stdlib [LIB]               Embed only LIB from the standard library
    --gem [GEM]                  Embed GEM and its dependencies
    --bs                         Embed the system BridgeSupport files
    --verbose                    Log all commands to standard out
    --codesign [CERT]            Sign the files with the specified certificate
-v, --version                    Display the version
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creates a Stopwatch Application]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/18/intro-stopwatch/"/>
    <updated>2012-03-18T00:01:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/18/intro-stopwatch</id>
    <content type="html"><![CDATA[<p>In this content, describe how to create a simple application. This content have some essences to create an application using MacRuby.</p>

<p>Show an application’s User Interface in following figure. We will call this application "StopWatch".</p>

<p><img src="/images/en/intro-stopwatch/stopwatch.png" alt="image" /></p>

<p>"StopWatch" has below behaviors.</p>

<ol>
<li>Run a timer if start button is clicked.</li>
<li>Stop a timer if stop button is clicked.</li>
<li>A timer value is displayed in Text Field.</li>
</ol>


<h2>Design User Interface</h2>

<p>To start the design, need some operations in Xcode.</p>

<p>Choose a <em>MainMenu.xib</em>.</p>

<p><img src="/images/en/intro-stopwatch/mainmenu_xib.png" alt="image" /></p>

<p>Choose a [Window - StopWatch] to display Window for design.</p>

<p><img src="/images/en/intro-stopwatch/window_stopwatch.png" alt="image" /></p>

<p>Click an icon in toolbar in following figure. After then, Object Library is displayed.</p>

<p><img src="/images/en/intro-stopwatch/show_object_library.png" alt="image" /></p>

<p>You have been completed to prepare to design. Then, place the User Interface parts from Object Library to Window.</p>

<p><img src="/images/en/intro-stopwatch/ui_design.png" alt="image" /></p>

<h2>Connect the Outlets</h2>

<p>"StopWatch" application sets a timer value into Text Field. However, if Text Field is just placed on Window, cannot set a value into there. We should use the Outlets to set a value or to get a status of User Interface parts.</p>

<p>To use the Outlets, need to write a program code. Choose a <em>AppDelegate.rb</em>, then add a <code>attr_accessor :textField</code> to AppDelegate class.</p>

<p><code>ruby
class AppDelegate
  attr_accessor :window
  attr_accessor :textField # Outlet
</code></p>

<p>Return to <em>MainMenu.xib</em> screen, connect the Outlet. Press <kbd>control</kbd> key, and drag from App Delegate to Text Field.</p>

<p><img src="/images/en/intro-stopwatch/connect_outlet.png" alt="image" /></p>

<p>A list of Outlets will be displayed, then choose a <code>textField</code> to connect it.</p>

<p><img src="/images/en/intro-stopwatch/outlets.png" alt="image" /></p>

<p>You can  set/get the value of the Text Field through the textField accessor.</p>

<h2>Connect the Actions</h2>

<p>When you clicked start/stop button, still nothing happens. You need to set the behaviors when the buttons are clicked.</p>

<p>Choose an <em>AppDelegate.rb</em>, then add <code>startTimer</code> and <code>stopTimer</code> methods as following.</p>

<p>```ruby
class AppDelegate
  attr_accessor :window
  attr_accessor :textField # Outlet
  def applicationDidFinishLaunching(a_notification)</p>

<pre><code># Insert code here to initialize your application
</code></pre>

<p>  end</p>

<p>  def startTimer(sender)</p>

<pre><code># This method is called when clicked start button.
</code></pre>

<p>  end</p>

<p>  def stopTimer(sender)</p>

<pre><code># This method is called when clicked stop button.
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>Return to <em>MainMenu.xib</em> screen, connect the Actions. Press control key, and drag from start button to App Delegate.</p>

<p><img src="/images/en/intro-stopwatch/connect_action.png" alt="image" /></p>

<p>A list of Actions will be displayed, then choose a <code>startTimer</code> to connect it.</p>

<p><img src="/images/en/intro-stopwatch/actions.png" alt="image" /></p>

<p>Connect stop button to <code>stopTimer</code> in the same way. Each methods will be called when the button is clicked.</p>

<p><code>stopTimer</code>/<code>startTimer</code> are also known as the action method.</p>

<div class="note">
When you write an action method, you <strong>must</strong> provide a <code>sender</code> argument. If methods does not have a <code>sender</code> argument, it is not recognized as an action method.
</div>


<h2>Use the timer</h2>

<p>If you do something at a constant interval, use the <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/nstimer_Class/Reference/NSTimer.html">NSTimer</a>.</p>

<p>When use a timer as shown below, you will be able to handle at a constant interval.</p>

<p>```ruby
@timer = NSTimer</p>

<pre><code>       .scheduledTimerWithTimeInterval(0.1,
                                       target: self,
                                       selector: "timerHandler:",
                                       userInfo: nil,
                                       repeats: true)
</code></pre>

<p>def timerHandler(userInfo)
  # Handler
end
```</p>

<p>Generate a timer at startTimer and stop a timer at stopTimer.</p>

<p>```ruby
class AppDelegate
  attr_accessor :window
  attr_accessor :textField # Outlet
  def applicationDidFinishLaunching(a_notification)</p>

<pre><code># Insert code here to initialize your application
</code></pre>

<p>  end</p>

<p>  def startTimer(sender)</p>

<pre><code>if @timer.nil?
  @time = 0.0
  @timer = NSTimer
            .scheduledTimerWithTimeInterval(0.1,
                                            target: self,
                                            selector: "timerHandler:",
                                            userInfo: nil,
                                            repeats: true)
end
</code></pre>

<p>  end</p>

<p>  def stopTimer(sender)</p>

<pre><code>if @timer
  @timer.invalidate
  @timer = nil
end
</code></pre>

<p>  end</p>

<p>  def timerHandler(userInfo)</p>

<pre><code>@time += 0.1
string = sprintf("%.1f", @time)
textField.setStringValue(string)
</code></pre>

<p>  end
end
```</p>

<p>Invoke <code>@timer.invalidate</code> to stop a timer. Invoke <code>textField.setStringValue(string)</code> to set string to Text Field.</p>

<p>"Stopwatch" application is complete!</p>

<p>Change to "StopWatch" from "Deployment" in Scheme. Then, Click [Run]. "Stopwatch" application will be running!!</p>

<p><img src="/images/en/intro-stopwatch/scheme.png" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WebKit フレームワークを使ってみよう]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/15/webkit/"/>
    <updated>2012-03-15T08:52:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/15/webkit</id>
    <content type="html"><![CDATA[<p>[MacRuby Application] テンプレートを用いてプロジェクトを作成すると、あらかじめ Cocoa.framework というフレームワークが読み込まれるようになっています。</p>

<p><img src="/images/ja/webkit/framework.png" alt="image" /></p>

<p>また、<em>rb_main.rb</em> で以下のように Cocoa.framework が読み込まれプログラム中から扱えるようになっています。</p>

<p>```ruby</p>

<h1>Loading the Cocoa framework. If you need to load more frameworks, you can</h1>

<h1>do that here too.</h1>

<p>framework 'Cocoa'
```</p>

<div class="note">
Cocoa.framework は Foundation.framework、AppKit.framework と CoreData.framework を 1 つにまとめたフレームワークとなっています。これらのフレームワークで扱っている UI 部品や API は、プロジェクト作成直後から利用することができます。
</div>


<h2>WebKit.framework を追加する</h2>

<p>さっそくフレームワークを追加してみましょう。以下の図のように "+" ボタンをクリックすると、フレームワークを追加することができます。</p>

<p><img src="/images/ja/webkit/add_framework.png" alt="image" /></p>

<p>シートダイアログが表示されるので、追加するフレームワークを選択します。</p>

<p><img src="/images/ja/webkit/choose_framework.png" alt="image" /></p>

<p><em>rb_main.rb</em> で以下のように WebKit.framework を読み込むようにします。</p>

<p>```ruby</p>

<h1>Loading the Cocoa framework. If you need to load more frameworks, you can</h1>

<h1>do that here too.</h1>

<p>framework 'Cocoa'
framework 'WebKit' # 追加
```</p>

<p>以上で、フレームワークの追加作業が完了です。</p>

<h2>Web View を配置する</h2>

<p><img src="/images/ja/webkit/put_webview.png" alt="image" /></p>

<p>Object Library から Web View を Window 上に配置します。</p>

<h2>Web View をアウトレット接続する</h2>

<p><em>AppDelegate.rb</em> に webView のアウトレット用のアクセサを追加し、Web View と接続します。</p>

<p><code>ruby
class AppDelegate
  attr_accessor :window
  attr_accessor :webView # アウトレット
</code></p>

<p><img src="/images/ja/webkit/connect_outlet.png" alt="image" /></p>

<h2>Web サイトを表示する</h2>

<p>以下のように、アウトレット接続した <code>webView</code> の <code>mainFrame</code> に URL のサイトを読み込むように指示すると、さきほど配置した Web View に Web サイトが表示されます。</p>

<p>```ruby
class AppDelegate
  attr_accessor :window
  attr_accessor :webView # アウトレット</p>

<p>  def applicationDidFinishLaunching(a_notification)</p>

<pre><code># Insert code here to initialize your application
url = "http://www.apple.com/"
nsurl = NSURL.URLWithString(url)
nsurl_req = NSURLRequest.requestWithURL(nsurl)

webView.mainFrame.loadRequest(nsurl_req)
</code></pre>

<p>  end
end
```</p>

<p><img src="/images/ja/webkit/webview.png" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creates a New Project]]></title>
    <link href="http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/12/intro-new-project/"/>
    <updated>2012-03-12T12:34:00+09:00</updated>
    <id>http://watson1978.github.com/MacRuby-DoJo/blog/2012/03/12/intro-new-project</id>
    <content type="html"><![CDATA[<p>If you create a New Project, launch Xcode and click "Create a new Xcode project" in "Welcome to Xcode" screen.</p>

<p><img src="/images/en/intro-new-project/welcome_to_xcode.png" alt="image" /></p>

<p>Next, you would choose a Template for New Project.</p>

<p><img src="/images/en/intro-new-project/choose_a_templete.png" alt="image" /></p>

<p>Choose a [MacRuby Application], and click a [Next].</p>

<p><img src="/images/en/intro-new-project/product_name.png" alt="image" /></p>

<p>Input your Project Name, and then, choose location for New Project. You would be able to see New Project.</p>
]]></content>
  </entry>
  
</feed>
